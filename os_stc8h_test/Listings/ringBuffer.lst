C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE RINGBUFFER
OBJECT MODULE PLACED IN .\Objects\ringBuffer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE XmRTOS\utils\ringBuffer.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS;.\XmR
                    -TOS\utils) DEBUG OBJECTEXTEND CODE PRINT(.\Listings\ringBuffer.lst) OBJECT(.\Objects\ringBuffer.obj)

line level    source

   1          #include "ringBuffer.h"
   2          
   3          /**
   4          *       »·ÐÎÊý×é ×îºóÒ»Î»±£Áô
   5          *       ¿Õ»º³åÇø£º ÔÚ³õÊ¼»¯Ê±£¬¶ÁÖ¸ÕëºÍÐ´Ö¸Õë¶¼Ö¸ÏòÍ¬Ò»¸öÎ»ÖÃ£¬¼´»º³åÇøµÄÆðÊ¼Î»ÖÃ¡£ÕâÊ±¿ÉÒÔÍ¨¹ýÅÐ¶ÏÍ·Ö¸ÕëºÍÎ²Ö¸Õ
             -ëÊÇ·ñÏàµÈÀ´ÅÐ¶Ï»º³åÇøÊÇ·ñÎª¿Õ¡£
   6          *       Âú»º³åÇø£º ¶ÁÖ¸Õë > Ð´Ö¸ÕëµÄÊ±ºò ±íÊ¾»º³åÇøÒÑ¾­ÂúÁË¡£
   7          *       Ð´Ö¸ÕëÊÇ²»»áµ½´ïÊý×é×îºóÒ»Î»µÄ£¬ÔÚ¶ÁµÄÊ±ºònext_rÖ¸Ïò×îºóÒ»Î»µÄÊ±ºò´ú±í»º³åÇøÒÑÂú
   8          */
   9          
  10          
  11          /***********************************************************************
  12          *       º¯ÊýÃèÊö£º´´½¨Ò»¸ö»·ÐÎ»º³åÇø²Ù×÷¾ä±ú
  13          *       ´«Èë²ÎÊý£º
  14          *                               ring_buffer     : »º³åÇø²Ù×÷¾ä±úÖ¸Õë
  15          *                               buff            : »º³åÊý×é
  16          *                               buff_size       : »º³åÊý×é
  17          *                               itemSize        : »º³åÊý×éÃ¿Ò»¸öÔªËØµÄ´óÐ¡
  18          * ·µ»Ø²ÎÊý£º
  19          *                               os_uint8_t      : RINGBUFF_SUCCESS Ö»·µ»Ø³É¹¦
  20          ***********************************************************************/
  21          os_uint8_t ringbuffer_created(RingBufferHandle *ring_buffer, void *buff, os_uint8_t buff_size, os_uint8_t 
             -itemSize)
  22          {
  23   1      
  24   1              
  25   1              ring_buffer->r_                 = buff;           // Ä¬ÈÏÖ¸ÏòbuffÍ·²¿
  26   1              ring_buffer->w_                 = buff;           // Ä¬ÈÏÖ¸ÏòbuffÍ·²¿
  27   1              ring_buffer->itemSize   = itemSize;
  28   1              ring_buffer->buff_size  = buff_size;
  29   1              ring_buffer->buff               = buff;
  30   1      
  31   1              
  32   1              return RINGBUFF_SUCCESS;
  33   1      }
  34          /***********************************************************************
  35          *       º¯ÊýÃèÊö£º  »º³åÇøÐ´ Ð´ÈëÂú²»ÖØÐÂ¿ªÊ¼Ð´£¬ÐèÒªµÈ´ý¶ÁÍê
  36          *       ´«Èë²ÎÊý£º
  37          *                               ring_buffer     : »º³åÇø²Ù×÷¾ä±úÖ¸Õë
  38          *                               _data           : Ð´ÈëµÄÊý¾ÝÏî
  39          * ·µ»Ø²ÎÊý£º
  40          *                               os_uint8_t      : 
  41          *                                                               RINGBUFF_WRITE_OVERFLOW = »º³åÇøÒç³ö
  42          *                                                               RINGBUFF_SUCCESS                = Ð´Èë³É¹¦ 
  43          ***********************************************************************/
  44          os_uint8_t ringbuffer_write(RingBufferHandle *ring_buffer, void *_data)
  45          {               
  46   1              os_uint8_t *next_w = ring_buffer->w_ + ring_buffer->itemSize;  // ÏÂÒ»´ÎÐ´ÈëµÄÎ»ÖÃ
  47   1              // ÏÂÒ»´ÎÐ´ÈëµÄÎ»ÖÃµÈÓÚ ¶ÁÈ¡ µÄÎ»ÖÃ ±íÊ¾ÂúÁË
  48   1          if (next_w == ring_buffer->r_) {
  49   2                      // Òç³ö
  50   2              return RINGBUFF_WRITE_OVERFLOW; 
  51   2      
  52   2          }
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 2   

  53   1              // Ð´Ò»¸öÐ´ÈëÖ¸Ïò Êý×é×îºóÒ»Î»±íÊ¾Òç³ö
  54   1          if (next_w >= (os_uint8_t *)(ring_buffer->buff + ring_buffer->buff_size)) {
  55   2                      // Òç³ö
  56   2              return RINGBUFF_WRITE_OVERFLOW; 
  57   2          }
  58   1      
  59   1          memcpy((void *)ring_buffer->w_, _data, ring_buffer->itemSize); // Ð´ÈëÊý¾Ý
  60   1          ring_buffer->w_ = next_w; // ¸üÐÂÐ´Èë Î²Ö¸Õë
  61   1              return RINGBUFF_SUCCESS;
  62   1      }
  63          
  64          /***********************************************************************
  65          *       º¯ÊýÃèÊö£º  »º³åÇø¶Á ¶ÁºÍÐ´¶¼µ½Í·ÁË ÖØÐÂ»Øµ½Êý×é0
  66          *       ´«Èë²ÎÊý£º
  67          *                               ring_buffer     : »º³åÇø²Ù×÷¾ä±úÖ¸Õë
  68          *                               _data           : ¶ÁÈ¡µ½Êý¾ÝµÄÖ¸Õë
  69          * ·µ»Ø²ÎÊý£º
  70          *                               os_uint8_t      : 
  71          *                                                               RINGBUFF_READ_NULL              = »º³åÇøÎÞÊý¾Ý
  72          *                                                               RINGBUFF_SUCCESS                = Ð´Èë³É¹¦ 
  73          ***********************************************************************/
  74          os_uint8_t ringbuffer_read(RingBufferHandle *ring_buffer, void *_data)
  75          {
  76   1      
  77   1              // ÏÂÒ»´Î¶ÁÈ¡µÄÎ»ÖÃ
  78   1          os_uint8_t *next_r  = (os_uint8_t *)ring_buffer->r_ + ring_buffer->itemSize;  
  79   1              // ÏÂÒ»´Î¶ÁÖ¸Õë > Ð´Ö¸Õë ²¢ÇÒ  ÏÂÒ»´Î µÈÓÚ Êý×é×îÎ²²¿µÄÊ±ºò Êý×éÒç³ö
  80   1          if (
  81   1                              next_r > ring_buffer->w_ && next_r == (os_uint8_t *)(ring_buffer->buff + (ring_buffer->buff_size ) )
  82   1                      ) 
  83   1              {
  84   2              memcpy(_data, ring_buffer->r_, ring_buffer->itemSize);
  85   2                      // ½«¶ÁÐ´Ö¸Õë Ö¸ÏòÊý¾ÝÆðÊ¼Î» Êý×é0
  86   2              ring_buffer->r_ = ring_buffer->buff; 
  87   2              ring_buffer->w_ = ring_buffer->buff; 
  88   2              return RINGBUFF_READ_NULL; // ËãÊÇÒç³öÒ²Ëã¿Õ¡£¿Õ°ÉËã
  89   2          }
  90   1              
  91   1              // µ±Ç°¶ÁÈ¡Î»ÖÃ ºÍ ÏÂÒ»´ÎÐ´ÈëÎ»ÖÃÖØºÏ ±íÊ¾¿Õ
  92   1          if (ring_buffer->r_ == ring_buffer->w_) {
  93   2              return RINGBUFF_READ_NULL; // ¿Õ
  94   2          }
  95   1              
  96   1              // ¶ÁÈ¡Êý¾Ý²¢¸üÐÂ¶ÁÖ¸Õë
  97   1          memcpy(_data, ring_buffer->r_, ring_buffer->itemSize); // ¶ÁÈ¡Êý¾Ý
  98   1          ring_buffer->r_ = next_r; // ¸üÐÂ¶ÁÖ¸Õë
  99   1      
 100   1              
 101   1              return RINGBUFF_SUCCESS;
 102   1      }
 103          
 104          #if 1==0
              void ringBufferTest(void)
              {
              
                      RingBufferHandle xdata queue_1 ;
                      os_uint8_t xdata queue_buff[6];
                      volatile  os_uint8_t test_data = 0xff;
                      volatile  os_uint8_t w_data = 0;
                      
                      // ³õÊ¼»¯Ò»¸ö¶ÓÁÐ
                      ringbuffer_created(&queue_1,&queue_buff,6,sizeof(os_uint8_t));
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 3   

                      // Ð´Îå´Î ÊÇ³É¹¦µÄ
                      w_data++;
                      ringbuffer_write(&queue_1,&w_data);
                      w_data++;
                      ringbuffer_write(&queue_1,&w_data);
                      w_data++;
                      ringbuffer_write(&queue_1,&w_data);
                      w_data++;
                      ringbuffer_write(&queue_1,&w_data);
                      w_data++;
                      ringbuffer_write(&queue_1,&w_data);
                      // Ð´Îå´Î ÊÇ³É¹¦µÄ
                      
                      // Ð´Îå´Îºó Ê§°Ü
                      ringbuffer_write(&queue_1,&(os_uint8_t *)6);
                      ringbuffer_write(&queue_1,&(os_uint8_t *)7);    
                      // Ð´Îå´Îºó Ê§°Ü
              
                      // ¶ÁÎå´Î ³É¹¦
                      ringbuffer_read(&queue_1, &test_data);
                      ringbuffer_read(&queue_1, &test_data);
                      ringbuffer_read(&queue_1, &test_data);
                      ringbuffer_read(&queue_1, &test_data);
                      ringbuffer_read(&queue_1, &test_data);
                      ringbuffer_read(&queue_1, &test_data);
                      // ¶ÁÎå´Î ³É¹¦
              
                      // ¶ÁÎå´Îºó µÚÒ»´Î¶Á Ê§°Ü²¢ÈÃ ¶ÁºÍÐ´Ö¸Õý»Øµ½Êý×é0
                      ringbuffer_read(&queue_1, &test_data);
                      // ¶ÁÎå´Îºó µÚ¶þ´Î¶Á ¶ÁºÍÐ´ÖØºÏ  »º³åÇøÊý¾ÝÎª¿Õ
                      ringbuffer_read(&queue_1, &test_data);  
              
              
                      // ÕâÁ½¾äºó »º³åÇøÊý¾ÝÎª¿Õ
                      
                      // Ð´Ò»´Î³É¹¦
                      w_data = 0x33;
                      ringbuffer_write(&queue_1,&w_data);
                      // ¶ÁÒ»´Î³É¹¦
                      ringbuffer_read(&queue_1, &test_data);  
                      
                      // ÕâÁ½¾äºó »º³åÇøÊý¾ÝÎª¿Õ
              }
              #endif
 159          
 160          
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _ringbuffer_created (BEGIN)
                                           ; SOURCE LINE # 21
0000 8B00        R     MOV     ring_buffer,R3
0002 8A00        R     MOV     ring_buffer+01H,R2
0004 8900        R     MOV     ring_buffer+02H,R1
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 25
0006 AB00        R     MOV     R3,buff
0008 AA00        R     MOV     R2,buff+01H
000A A900        R     MOV     R1,buff+02H
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 AB00        R     MOV     R3,ring_buffer
0014 AA00        R     MOV     R2,ring_buffer+01H
0016 A900        R     MOV     R1,ring_buffer+02H
0018 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 26
001B AB00        R     MOV     R3,buff
001D AA00        R     MOV     R2,buff+01H
001F A900        R     MOV     R1,buff+02H
0021 C003              PUSH    AR3
0023 C002              PUSH    AR2
0025 C001              PUSH    AR1
0027 AB00        R     MOV     R3,ring_buffer
0029 AA00        R     MOV     R2,ring_buffer+01H
002B A900        R     MOV     R1,ring_buffer+02H
002D 900003            MOV     DPTR,#03H
0030 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 27
0033 AB00        R     MOV     R3,ring_buffer
0035 AA00        R     MOV     R2,ring_buffer+01H
0037 A900        R     MOV     R1,ring_buffer+02H
0039 900007            MOV     DPTR,#07H
003C E500        R     MOV     A,itemSize
003E 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 28
0041 900006            MOV     DPTR,#06H
0044 E500        R     MOV     A,buff_size
0046 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 29
0049 AB00        R     MOV     R3,buff
004B AA00        R     MOV     R2,buff+01H
004D A900        R     MOV     R1,buff+02H
004F C003              PUSH    AR3
0051 C002              PUSH    AR2
0053 C001              PUSH    AR1
0055 AB00        R     MOV     R3,ring_buffer
0057 AA00        R     MOV     R2,ring_buffer+01H
0059 A900        R     MOV     R1,ring_buffer+02H
005B 900008            MOV     DPTR,#08H
005E 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 32
0061 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 33
0063 22                RET     
             ; FUNCTION _ringbuffer_created (END)

             ; FUNCTION _ringbuffer_write (BEGIN)
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 5   

                                           ; SOURCE LINE # 44
0000 8B00        R     MOV     ring_buffer,R3
0002 8A00        R     MOV     ring_buffer+01H,R2
0004 8900        R     MOV     ring_buffer+02H,R1
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0006 900003            MOV     DPTR,#03H
0009 120000      E     LCALL   ?C?PLDOPTR
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 AB00        R     MOV     R3,ring_buffer
0014 AA00        R     MOV     R2,ring_buffer+01H
0016 A900        R     MOV     R1,ring_buffer+02H
0018 900007            MOV     DPTR,#07H
001B 120000      E     LCALL   ?C?CLDOPTR
001E FE                MOV     R6,A
001F 7C00              MOV     R4,#00H
0021 D001              POP     AR1
0023 D002              POP     AR2
0025 D003              POP     AR3
0027 29                ADD     A,R1
0028 F9                MOV     R1,A
0029 EC                MOV     A,R4
002A 3A                ADDC    A,R2
002B 8B00        R     MOV     next_w,R3
002D F500        R     MOV     next_w+01H,A
002F 8900        R     MOV     next_w+02H,R1
                                           ; SOURCE LINE # 48
0031 AB00        R     MOV     R3,ring_buffer
0033 AA00        R     MOV     R2,ring_buffer+01H
0035 A900        R     MOV     R1,ring_buffer+02H
0037 120000      E     LCALL   ?C?PLDPTR
003A EB                MOV     A,R3
003B 8A83              MOV     DPH,R2
003D 8982              MOV     DPL,R1
003F 6500        R     XRL     A,next_w
0041 700A              JNZ     ?C0008
0043 E500        R     MOV     A,next_w+02H
0045 6582              XRL     A,DPL
0047 7004              JNZ     ?C0008
0049 E500        R     MOV     A,next_w+01H
004B 6583              XRL     A,DPH
004D         ?C0008:
004D 7003              JNZ     ?C0002
                                           ; SOURCE LINE # 50
004F 7F02              MOV     R7,#02H
0051 22                RET     
                                           ; SOURCE LINE # 52
0052         ?C0002:
                                           ; SOURCE LINE # 54
0052 AB00        R     MOV     R3,ring_buffer
0054 AA00        R     MOV     R2,ring_buffer+01H
0056 A900        R     MOV     R1,ring_buffer+02H
0058 900008            MOV     DPTR,#08H
005B 120000      E     LCALL   ?C?PLDOPTR
005E C003              PUSH    AR3
0060 C002              PUSH    AR2
0062 C001              PUSH    AR1
0064 AB00        R     MOV     R3,ring_buffer
0066 AA00        R     MOV     R2,ring_buffer+01H
0068 A900        R     MOV     R1,ring_buffer+02H
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 6   

006A 900006            MOV     DPTR,#06H
006D 120000      E     LCALL   ?C?CLDOPTR
0070 7C00              MOV     R4,#00H
0072 D001              POP     AR1
0074 D002              POP     AR2
0076 D003              POP     AR3
0078 29                ADD     A,R1
0079 F9                MOV     R1,A
007A EC                MOV     A,R4
007B 3A                ADDC    A,R2
007C FA                MOV     R2,A
007D 8A83              MOV     DPH,R2
007F 8982              MOV     DPL,R1
0081 C3                CLR     C
0082 E500        R     MOV     A,next_w+02H
0084 9582              SUBB    A,DPL
0086 E500        R     MOV     A,next_w+01H
0088 9583              SUBB    A,DPH
008A         ?C0009:
008A 4003              JC      ?C0004
                                           ; SOURCE LINE # 56
008C 7F02              MOV     R7,#02H
008E 22                RET     
                                           ; SOURCE LINE # 57
008F         ?C0004:
                                           ; SOURCE LINE # 59
008F EE                MOV     A,R6
0090 FF                MOV     R7,A
0091 7E00              MOV     R6,#00H
0093 AB00        R     MOV     R3,ring_buffer
0095 AA00        R     MOV     R2,ring_buffer+01H
0097 A900        R     MOV     R1,ring_buffer+02H
0099 900003            MOV     DPTR,#03H
009C 120000      E     LCALL   ?C?PLDOPTR
009F A801              MOV     R0,AR1
00A1 AC02              MOV     R4,AR2
00A3 AD03              MOV     R5,AR3
00A5 AB00        R     MOV     R3,_data
00A7 AA00        R     MOV     R2,_data+01H
00A9 A900        R     MOV     R1,_data+02H
00AB 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 60
00AE AB00        R     MOV     R3,next_w
00B0 AA00        R     MOV     R2,next_w+01H
00B2 A900        R     MOV     R1,next_w+02H
00B4 C003              PUSH    AR3
00B6 C002              PUSH    AR2
00B8 C001              PUSH    AR1
00BA AB00        R     MOV     R3,ring_buffer
00BC AA00        R     MOV     R2,ring_buffer+01H
00BE A900        R     MOV     R1,ring_buffer+02H
00C0 900003            MOV     DPTR,#03H
00C3 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 61
00C6 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 62
00C8         ?C0003:
00C8 22                RET     
             ; FUNCTION _ringbuffer_write (END)

             ; FUNCTION _ringbuffer_read (BEGIN)
                                           ; SOURCE LINE # 74
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 7   

0000 8B00        R     MOV     ring_buffer,R3
0002 8A00        R     MOV     ring_buffer+01H,R2
0004 8900        R     MOV     ring_buffer+02H,R1
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 78
0006 900007            MOV     DPTR,#07H
0009 120000      E     LCALL   ?C?CLDOPTR
000C FF                MOV     R7,A
000D FD                MOV     R5,A
000E 7C00              MOV     R4,#00H
0010 120000      E     LCALL   ?C?PLDPTR
0013 E9                MOV     A,R1
0014 2D                ADD     A,R5
0015 F9                MOV     R1,A
0016 EC                MOV     A,R4
0017 3A                ADDC    A,R2
0018 8B00        R     MOV     next_r,R3
001A F500        R     MOV     next_r+01H,A
001C 8900        R     MOV     next_r+02H,R1
                                           ; SOURCE LINE # 81
001E AB00        R     MOV     R3,ring_buffer
0020 AA00        R     MOV     R2,ring_buffer+01H
0022 A900        R     MOV     R1,ring_buffer+02H
0024 900003            MOV     DPTR,#03H
0027 120000      E     LCALL   ?C?PLDOPTR
002A 8A83              MOV     DPH,R2
002C 8982              MOV     DPL,R1
002E D3                SETB    C
002F E500        R     MOV     A,next_r+02H
0031 9582              SUBB    A,DPL
0033 E500        R     MOV     A,next_r+01H
0035 9583              SUBB    A,DPH
0037         ?C0010:
0037 5003              JNC     $ + 5H
0039 020000      R     LJMP    ?C0005
003C AB00        R     MOV     R3,ring_buffer
003E AA00        R     MOV     R2,ring_buffer+01H
0040 A900        R     MOV     R1,ring_buffer+02H
0042 900008            MOV     DPTR,#08H
0045 120000      E     LCALL   ?C?PLDOPTR
0048 C003              PUSH    AR3
004A C002              PUSH    AR2
004C C001              PUSH    AR1
004E AB00        R     MOV     R3,ring_buffer
0050 AA00        R     MOV     R2,ring_buffer+01H
0052 A900        R     MOV     R1,ring_buffer+02H
0054 900006            MOV     DPTR,#06H
0057 120000      E     LCALL   ?C?CLDOPTR
005A D001              POP     AR1
005C D002              POP     AR2
005E D003              POP     AR3
0060 29                ADD     A,R1
0061 F9                MOV     R1,A
0062 EC                MOV     A,R4
0063 3A                ADDC    A,R2
0064 FA                MOV     R2,A
0065 E500        R     MOV     A,next_r
0067 850083      R     MOV     DPH,next_r+01H
006A 850082      R     MOV     DPL,next_r+02H
006D 6B                XRL     A,R3
006E 7008              JNZ     ?C0011
0070 E9                MOV     A,R1
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 8   

0071 6582              XRL     A,DPL
0073 7003              JNZ     ?C0011
0075 EA                MOV     A,R2
0076 6583              XRL     A,DPH
0078         ?C0011:
0078 704F              JNZ     ?C0005
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
007A AB00        R     MOV     R3,ring_buffer
007C AA00        R     MOV     R2,ring_buffer+01H
007E A900        R     MOV     R1,ring_buffer+02H
0080 FE                MOV     R6,A
0081 120000      E     LCALL   ?C?PLDPTR
0084 A800        R     MOV     R0,_data+02H
0086 AC00        R     MOV     R4,_data+01H
0088 AD00        R     MOV     R5,_data
008A 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 86
008D AB00        R     MOV     R3,ring_buffer
008F AA00        R     MOV     R2,ring_buffer+01H
0091 A900        R     MOV     R1,ring_buffer+02H
0093 900008            MOV     DPTR,#08H
0096 120000      E     LCALL   ?C?PLDOPTR
0099 C003              PUSH    AR3
009B C002              PUSH    AR2
009D C001              PUSH    AR1
009F AB00        R     MOV     R3,ring_buffer
00A1 AA00        R     MOV     R2,ring_buffer+01H
00A3 A900        R     MOV     R1,ring_buffer+02H
00A5 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 87
00A8 AB00        R     MOV     R3,ring_buffer
00AA AA00        R     MOV     R2,ring_buffer+01H
00AC A900        R     MOV     R1,ring_buffer+02H
00AE 900008            MOV     DPTR,#08H
00B1 120000      E     LCALL   ?C?PLDOPTR
00B4 C003              PUSH    AR3
00B6 C002              PUSH    AR2
00B8 C001              PUSH    AR1
00BA AB00        R     MOV     R3,ring_buffer
00BC AA00        R     MOV     R2,ring_buffer+01H
00BE A900        R     MOV     R1,ring_buffer+02H
00C0 900003            MOV     DPTR,#03H
00C3 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 88
00C6 7F03              MOV     R7,#03H
00C8 22                RET     
                                           ; SOURCE LINE # 89
00C9         ?C0005:
                                           ; SOURCE LINE # 92
00C9 AB00        R     MOV     R3,ring_buffer
00CB AA00        R     MOV     R2,ring_buffer+01H
00CD A900        R     MOV     R1,ring_buffer+02H
00CF 900003            MOV     DPTR,#03H
00D2 120000      E     LCALL   ?C?PLDOPTR
00D5 C003              PUSH    AR3
00D7 C002              PUSH    AR2
00D9 C001              PUSH    AR1
00DB AB00        R     MOV     R3,ring_buffer
00DD AA00        R     MOV     R2,ring_buffer+01H
00DF A900        R     MOV     R1,ring_buffer+02H
00E1 120000      E     LCALL   ?C?PLDPTR
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 13:29:53 PAGE 9   

00E4 D082              POP     DPL
00E6 D083              POP     DPH
00E8 D0E0              POP     ACC
00EA 6B                XRL     A,R3
00EB 7008              JNZ     ?C0012
00ED E9                MOV     A,R1
00EE 6582              XRL     A,DPL
00F0 7003              JNZ     ?C0012
00F2 EA                MOV     A,R2
00F3 6583              XRL     A,DPH
00F5         ?C0012:
00F5 7003              JNZ     ?C0007
                                           ; SOURCE LINE # 93
00F7 7F03              MOV     R7,#03H
00F9 22                RET     
                                           ; SOURCE LINE # 94
00FA         ?C0007:
                                           ; SOURCE LINE # 97
00FA AB00        R     MOV     R3,ring_buffer
00FC AA00        R     MOV     R2,ring_buffer+01H
00FE A900        R     MOV     R1,ring_buffer+02H
0100 900007            MOV     DPTR,#07H
0103 120000      E     LCALL   ?C?CLDOPTR
0106 FF                MOV     R7,A
0107 7E00              MOV     R6,#00H
0109 120000      E     LCALL   ?C?PLDPTR
010C A800        R     MOV     R0,_data+02H
010E AC00        R     MOV     R4,_data+01H
0110 AD00        R     MOV     R5,_data
0112 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 98
0115 AB00        R     MOV     R3,next_r
0117 AA00        R     MOV     R2,next_r+01H
0119 A900        R     MOV     R1,next_r+02H
011B C003              PUSH    AR3
011D C002              PUSH    AR2
011F C001              PUSH    AR1
0121 AB00        R     MOV     R3,ring_buffer
0123 AA00        R     MOV     R2,ring_buffer+01H
0125 A900        R     MOV     R1,ring_buffer+02H
0127 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 101
012A 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 102
012C         ?C0006:
012C 22                RET     
             ; FUNCTION _ringbuffer_read (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    602    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
