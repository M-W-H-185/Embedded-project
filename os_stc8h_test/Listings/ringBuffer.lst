C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE RINGBUFFER
OBJECT MODULE PLACED IN .\Objects\ringBuffer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE XmRTOS\utils\ringBuffer.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS;.\XmR
                    -TOS\utils) DEBUG OBJECTEXTEND CODE PRINT(.\Listings\ringBuffer.lst) OBJECT(.\Objects\ringBuffer.obj)

line level    source

   1          #include "ringBuffer.h"
   2          
   3          /**
   4          *       »·ÐÎÊý×é ×îºóÒ»Î»±£Áô
   5          *       ¿Õ»º³åÇø£º ÔÚ³õÊ¼»¯Ê±£¬¶ÁÖ¸ÕëºÍÐ´Ö¸Õë¶¼Ö¸ÏòÍ¬Ò»¸öÎ»ÖÃ£¬¼´»º³åÇøµÄÆðÊ¼Î»ÖÃ¡£ÕâÊ±¿ÉÒÔÍ¨¹ýÅÐ¶ÏÍ·Ö¸ÕëºÍÎ²Ö¸Õ
             -ëÊÇ·ñÏàµÈÀ´ÅÐ¶Ï»º³åÇøÊÇ·ñÎª¿Õ¡£
   6          *       Âú»º³åÇø£º ¶ÁÖ¸Õë > Ð´Ö¸ÕëµÄÊ±ºò ±íÊ¾»º³åÇøÒÑ¾­ÂúÁË¡£
   7          *       Ð´Ö¸ÕëÊÇ²»»áµ½´ïÊý×é×îºóÒ»Î»µÄ£¬ÔÚ¶ÁµÄÊ±ºònext_rÖ¸Ïò×îºóÒ»Î»µÄÊ±ºò´ú±í»º³åÇøÒÑÂú
   8          */
   9          
  10          
  11          /***********************************************************************
  12          *       º¯ÊýÃèÊö£º´´½¨Ò»¸ö»·ÐÎ»º³åÇø²Ù×÷¾ä±ú
  13          *       ´«Èë²ÎÊý£º
  14          *                               ring_buffer     : »º³åÇø²Ù×÷¾ä±úÖ¸Õë
  15          *                               buff            : »º³åÊý×é
  16          *                               buff_size       : »º³åÊý×é
  17          *                               itemSize        : »º³åÊý×éÃ¿Ò»¸öÔªËØµÄ´óÐ¡
  18          * ·µ»Ø²ÎÊý£º
  19          *                               os_uint8_t      : RINGBUFF_SUCCESS Ö»·µ»Ø³É¹¦
  20          ***********************************************************************/
  21          os_uint8_t ringbuffer_created(RingBufferHandle *ring_buffer, void *buff, os_uint8_t buff_size, os_uint8_t 
             -itemSize)
  22          {
  23   1      
  24   1              
  25   1              ring_buffer->r_                 = buff;           // Ä¬ÈÏÖ¸ÏòbuffÍ·²¿
  26   1              ring_buffer->w_                 = buff;           // Ä¬ÈÏÖ¸ÏòbuffÍ·²¿
  27   1              ring_buffer->itemSize   = itemSize;
  28   1              ring_buffer->buff_size  = buff_size;
  29   1              ring_buffer->buff               = buff;
  30   1      
  31   1              
  32   1              return RINGBUFF_SUCCESS;
  33   1      }
  34          /***********************************************************************
  35          *       º¯ÊýÃèÊö£º  »º³åÇøÐ´ Ð´ÈëÂú²»ÖØÐÂ¿ªÊ¼Ð´£¬ÐèÒªµÈ´ý¶ÁÍê
  36          *       ´«Èë²ÎÊý£º
  37          *                               ring_buffer     : »º³åÇø²Ù×÷¾ä±úÖ¸Õë
  38          *                               _data           : Ð´ÈëµÄÊý¾ÝÏî
  39          * ·µ»Ø²ÎÊý£º
  40          *                               os_uint8_t      : 
  41          *                                                               RINGBUFF_WRITE_OVERFLOW = »º³åÇøÒç³ö
  42          *                                                               RINGBUFF_SUCCESS                = Ð´Èë³É¹¦ 
  43          ***********************************************************************/
  44          os_uint8_t ringbuffer_write(RingBufferHandle *ring_buffer, void *_data)
  45          {               
  46   1              os_uint8_t *next_w = ring_buffer->w_ + ring_buffer->itemSize;  // ÏÂÒ»´ÎÐ´ÈëµÄÎ»ÖÃ
  47   1      
  48   1              
  49   1              // ÏÂÒ»´ÎÐ´ÈëµÄÎ»ÖÃµÈÓÚ ¶ÁÈ¡ µÄÎ»ÖÃ ±íÊ¾ÂúÁË
  50   1          if (next_w == ring_buffer->r_) {
  51   2                      // Òç³ö
  52   2              return RINGBUFF_WRITE_OVERFLOW; 
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 2   

  53   2      
  54   2          }
  55   1      
  56   1              // Ð´Ò»¸öÐ´ÈëÖ¸Ïò Êý×é×îºóÒ»Î»±íÊ¾Òç³ö
  57   1          if (next_w >= (os_uint8_t *)(ring_buffer->buff + ( (ring_buffer->buff_size - 1) * ring_buffer->itemSiz
             -e ) )) {
  58   2                      // Òç³ö
  59   2              return RINGBUFF_WRITE_OVERFLOW; 
  60   2          }
  61   1      
  62   1          memcpy((void *)ring_buffer->w_, _data, ring_buffer->itemSize); // Ð´ÈëÊý¾Ý
  63   1          ring_buffer->w_ = next_w; // ¸üÐÂÐ´Èë Î²Ö¸Õë
  64   1              return RINGBUFF_SUCCESS;
  65   1      }
  66          
  67          /***********************************************************************
  68          *       º¯ÊýÃèÊö£º  »º³åÇø¶Á ¶ÁºÍÐ´¶¼µ½Í·ÁË ÖØÐÂ»Øµ½Êý×é0
  69          *       ´«Èë²ÎÊý£º
  70          *                               ring_buffer     : »º³åÇø²Ù×÷¾ä±úÖ¸Õë
  71          *                               _data           : ¶ÁÈ¡µ½Êý¾ÝµÄÖ¸Õë
  72          * ·µ»Ø²ÎÊý£º
  73          *                               os_uint8_t      : 
  74          *                                                               RINGBUFF_READ_NULL              = »º³åÇøÎÞÊý¾Ý
  75          *                                                               RINGBUFF_SUCCESS                = Ð´Èë³É¹¦ 
  76          ***********************************************************************/
  77          os_uint8_t ringbuffer_read(RingBufferHandle *ring_buffer, void *_data)
  78          {
  79   1      
  80   1              // ÏÂÒ»´Î¶ÁÈ¡µÄÎ»ÖÃ
  81   1          os_uint8_t *next_r  = (os_uint8_t *)ring_buffer->r_ + ring_buffer->itemSize;  
  82   1              // ÏÂÒ»´Î¶ÁÖ¸Õë > Ð´Ö¸Õë ²¢ÇÒ  ÏÂÒ»´Î µÈÓÚ Êý×é×îÎ²²¿µÄÊ±ºò Êý×éÒç³ö
  83   1          if (
  84   1                              next_r > ring_buffer->w_ && next_r == (os_uint8_t *)( ring_buffer->buff + ( (ring_buffer->buff_size - 1
             -) * ring_buffer->itemSize ) )
  85   1                      ) 
  86   1              {
  87   2              memcpy(_data, ring_buffer->r_, ring_buffer->itemSize);
  88   2                      // ½«¶ÁÐ´Ö¸Õë Ö¸ÏòÊý¾ÝÆðÊ¼Î» Êý×é0
  89   2              ring_buffer->r_ = ring_buffer->buff; 
  90   2              ring_buffer->w_ = ring_buffer->buff; 
  91   2              return RINGBUFF_READ_NULL; // ËãÊÇÒç³öÒ²Ëã¿Õ¡£¿Õ°ÉËã
  92   2          }
  93   1              
  94   1              // µ±Ç°¶ÁÈ¡Î»ÖÃ ºÍ ÏÂÒ»´ÎÐ´ÈëÎ»ÖÃÖØºÏ ±íÊ¾¿Õ
  95   1          if (ring_buffer->r_ == ring_buffer->w_) {
  96   2              return RINGBUFF_READ_NULL; // ¿Õ
  97   2          }
  98   1              
  99   1              // ¶ÁÈ¡Êý¾Ý²¢¸üÐÂ¶ÁÖ¸Õë
 100   1          memcpy(_data, ring_buffer->r_, ring_buffer->itemSize); // ¶ÁÈ¡Êý¾Ý
 101   1          ring_buffer->r_ = next_r; // ¸üÐÂ¶ÁÖ¸Õë
 102   1      
 103   1              
 104   1              return RINGBUFF_SUCCESS;
 105   1      }
 106          
 107          #if 1==0
              void ringBufferTest(void)
              {
              
                      RingBufferHandle xdata rb_handle ;
                      os_uint8_t xdata queue_buff[6];
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 3   

                      volatile  os_uint8_t test_data = 0xff;
                      volatile  os_uint8_t w_data = 0;
                      
                      // ³õÊ¼»¯Ò»¸ö¶ÓÁÐ
                      ringbuffer_created(&rb_handle,&queue_buff,6,sizeof(os_uint8_t));
                      // Ð´Îå´Î ÊÇ³É¹¦µÄ
                      w_data++;
                      ringbuffer_write(&rb_handle,&w_data);
                      w_data++;
                      ringbuffer_write(&rb_handle,&w_data);
                      w_data++;
                      ringbuffer_write(&rb_handle,&w_data);
                      w_data++;
                      ringbuffer_write(&rb_handle,&w_data);
                      w_data++;
                      ringbuffer_write(&rb_handle,&w_data);
                      // Ð´Îå´Î ÊÇ³É¹¦µÄ
                      
                      // Ð´Îå´Îºó Ê§°Ü
                      ringbuffer_write(&rb_handle,&(os_uint8_t *)6);
                      ringbuffer_write(&rb_handle,&(os_uint8_t *)7);  
                      // Ð´Îå´Îºó Ê§°Ü
              
                      // ¶ÁÎå´Î ³É¹¦
                      ringbuffer_read(&rb_handle, &test_data);
                      ringbuffer_read(&rb_handle, &test_data);
                      ringbuffer_read(&rb_handle, &test_data);
                      ringbuffer_read(&rb_handle, &test_data);
                      ringbuffer_read(&rb_handle, &test_data);
                      ringbuffer_read(&rb_handle, &test_data);
                      // ¶ÁÎå´Î ³É¹¦
              
                      // ¶ÁÎå´Îºó µÚÒ»´Î¶Á Ê§°Ü²¢ÈÃ ¶ÁºÍÐ´Ö¸Õý»Øµ½Êý×é0
                      ringbuffer_read(&rb_handle, &test_data);
                      // ¶ÁÎå´Îºó µÚ¶þ´Î¶Á ¶ÁºÍÐ´ÖØºÏ  »º³åÇøÊý¾ÝÎª¿Õ
                      ringbuffer_read(&rb_handle, &test_data);        
              
              
                      // ÕâÁ½¾äºó »º³åÇøÊý¾ÝÎª¿Õ
                      
                      // Ð´Ò»´Î³É¹¦
                      w_data = 0x33;
                      ringbuffer_write(&rb_handle,&w_data);
                      // ¶ÁÒ»´Î³É¹¦
                      ringbuffer_read(&rb_handle, &test_data);        
                      
                      // ÕâÁ½¾äºó »º³åÇøÊý¾ÝÎª¿Õ
              }
              #endif
 162          
 163          
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _ringbuffer_created (BEGIN)
                                           ; SOURCE LINE # 21
0000 8B00        R     MOV     ring_buffer,R3
0002 8A00        R     MOV     ring_buffer+01H,R2
0004 8900        R     MOV     ring_buffer+02H,R1
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 25
0006 AB00        R     MOV     R3,buff
0008 AA00        R     MOV     R2,buff+01H
000A A900        R     MOV     R1,buff+02H
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 AB00        R     MOV     R3,ring_buffer
0014 AA00        R     MOV     R2,ring_buffer+01H
0016 A900        R     MOV     R1,ring_buffer+02H
0018 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 26
001B AB00        R     MOV     R3,buff
001D AA00        R     MOV     R2,buff+01H
001F A900        R     MOV     R1,buff+02H
0021 C003              PUSH    AR3
0023 C002              PUSH    AR2
0025 C001              PUSH    AR1
0027 AB00        R     MOV     R3,ring_buffer
0029 AA00        R     MOV     R2,ring_buffer+01H
002B A900        R     MOV     R1,ring_buffer+02H
002D 900003            MOV     DPTR,#03H
0030 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 27
0033 AB00        R     MOV     R3,ring_buffer
0035 AA00        R     MOV     R2,ring_buffer+01H
0037 A900        R     MOV     R1,ring_buffer+02H
0039 900007            MOV     DPTR,#07H
003C E500        R     MOV     A,itemSize
003E 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 28
0041 900006            MOV     DPTR,#06H
0044 E500        R     MOV     A,buff_size
0046 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 29
0049 AB00        R     MOV     R3,buff
004B AA00        R     MOV     R2,buff+01H
004D A900        R     MOV     R1,buff+02H
004F C003              PUSH    AR3
0051 C002              PUSH    AR2
0053 C001              PUSH    AR1
0055 AB00        R     MOV     R3,ring_buffer
0057 AA00        R     MOV     R2,ring_buffer+01H
0059 A900        R     MOV     R1,ring_buffer+02H
005B 900008            MOV     DPTR,#08H
005E 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 32
0061 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 33
0063 22                RET     
             ; FUNCTION _ringbuffer_created (END)

             ; FUNCTION _ringbuffer_write (BEGIN)
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 5   

                                           ; SOURCE LINE # 44
0000 8B00        R     MOV     ring_buffer,R3
0002 8A00        R     MOV     ring_buffer+01H,R2
0004 8900        R     MOV     ring_buffer+02H,R1
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0006 900003            MOV     DPTR,#03H
0009 120000      E     LCALL   ?C?PLDOPTR
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 AB00        R     MOV     R3,ring_buffer
0014 AA00        R     MOV     R2,ring_buffer+01H
0016 A900        R     MOV     R1,ring_buffer+02H
0018 900007            MOV     DPTR,#07H
001B 120000      E     LCALL   ?C?CLDOPTR
001E FD                MOV     R5,A
001F 7E00              MOV     R6,#00H
0021 D001              POP     AR1
0023 D002              POP     AR2
0025 D003              POP     AR3
0027 29                ADD     A,R1
0028 F9                MOV     R1,A
0029 EE                MOV     A,R6
002A 3A                ADDC    A,R2
002B 8B00        R     MOV     next_w,R3
002D F500        R     MOV     next_w+01H,A
002F 8900        R     MOV     next_w+02H,R1
                                           ; SOURCE LINE # 50
0031 AB00        R     MOV     R3,ring_buffer
0033 AA00        R     MOV     R2,ring_buffer+01H
0035 A900        R     MOV     R1,ring_buffer+02H
0037 120000      E     LCALL   ?C?PLDPTR
003A EB                MOV     A,R3
003B 8A83              MOV     DPH,R2
003D 8982              MOV     DPL,R1
003F 6500        R     XRL     A,next_w
0041 700A              JNZ     ?C0008
0043 E500        R     MOV     A,next_w+02H
0045 6582              XRL     A,DPL
0047 7004              JNZ     ?C0008
0049 E500        R     MOV     A,next_w+01H
004B 6583              XRL     A,DPH
004D         ?C0008:
004D 7003              JNZ     ?C0002
                                           ; SOURCE LINE # 52
004F 7F02              MOV     R7,#02H
0051 22                RET     
                                           ; SOURCE LINE # 54
0052         ?C0002:
                                           ; SOURCE LINE # 57
0052 AB00        R     MOV     R3,ring_buffer
0054 AA00        R     MOV     R2,ring_buffer+01H
0056 A900        R     MOV     R1,ring_buffer+02H
0058 900006            MOV     DPTR,#06H
005B 120000      E     LCALL   ?C?CLDOPTR
005E 24FF              ADD     A,#0FFH
0060 FF                MOV     R7,A
0061 E4                CLR     A
0062 34FF              ADDC    A,#0FFH
0064 FE                MOV     R6,A
0065 7C00              MOV     R4,#00H
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 6   

0067 120000      E     LCALL   ?C?IMUL
006A 900008            MOV     DPTR,#08H
006D 120000      E     LCALL   ?C?PLDOPTR
0070 E9                MOV     A,R1
0071 2F                ADD     A,R7
0072 F9                MOV     R1,A
0073 EA                MOV     A,R2
0074 3E                ADDC    A,R6
0075 FA                MOV     R2,A
0076 8A83              MOV     DPH,R2
0078 8982              MOV     DPL,R1
007A C3                CLR     C
007B E500        R     MOV     A,next_w+02H
007D 9582              SUBB    A,DPL
007F E500        R     MOV     A,next_w+01H
0081 9583              SUBB    A,DPH
0083         ?C0009:
0083 4003              JC      ?C0004
                                           ; SOURCE LINE # 59
0085 7F02              MOV     R7,#02H
0087 22                RET     
                                           ; SOURCE LINE # 60
0088         ?C0004:
                                           ; SOURCE LINE # 62
0088 AB00        R     MOV     R3,ring_buffer
008A AA00        R     MOV     R2,ring_buffer+01H
008C A900        R     MOV     R1,ring_buffer+02H
008E 900007            MOV     DPTR,#07H
0091 120000      E     LCALL   ?C?CLDOPTR
0094 FF                MOV     R7,A
0095 7E00              MOV     R6,#00H
0097 900003            MOV     DPTR,#03H
009A 120000      E     LCALL   ?C?PLDOPTR
009D A801              MOV     R0,AR1
009F AC02              MOV     R4,AR2
00A1 AD03              MOV     R5,AR3
00A3 AB00        R     MOV     R3,_data
00A5 AA00        R     MOV     R2,_data+01H
00A7 A900        R     MOV     R1,_data+02H
00A9 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 63
00AC AB00        R     MOV     R3,next_w
00AE AA00        R     MOV     R2,next_w+01H
00B0 A900        R     MOV     R1,next_w+02H
00B2 C003              PUSH    AR3
00B4 C002              PUSH    AR2
00B6 C001              PUSH    AR1
00B8 AB00        R     MOV     R3,ring_buffer
00BA AA00        R     MOV     R2,ring_buffer+01H
00BC A900        R     MOV     R1,ring_buffer+02H
00BE 900003            MOV     DPTR,#03H
00C1 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 64
00C4 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 65
00C6         ?C0003:
00C6 22                RET     
             ; FUNCTION _ringbuffer_write (END)

             ; FUNCTION _ringbuffer_read (BEGIN)
                                           ; SOURCE LINE # 77
0000 8B00        R     MOV     ring_buffer,R3
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 7   

0002 8A00        R     MOV     ring_buffer+01H,R2
0004 8900        R     MOV     ring_buffer+02H,R1
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 81
0006 900007            MOV     DPTR,#07H
0009 120000      E     LCALL   ?C?CLDOPTR
000C FD                MOV     R5,A
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 120000      E     LCALL   ?C?PLDPTR
0013 E9                MOV     A,R1
0014 2F                ADD     A,R7
0015 F9                MOV     R1,A
0016 EE                MOV     A,R6
0017 3A                ADDC    A,R2
0018 8B00        R     MOV     next_r,R3
001A F500        R     MOV     next_r+01H,A
001C 8900        R     MOV     next_r+02H,R1
                                           ; SOURCE LINE # 84
001E AB00        R     MOV     R3,ring_buffer
0020 AA00        R     MOV     R2,ring_buffer+01H
0022 A900        R     MOV     R1,ring_buffer+02H
0024 900003            MOV     DPTR,#03H
0027 120000      E     LCALL   ?C?PLDOPTR
002A 8A83              MOV     DPH,R2
002C 8982              MOV     DPL,R1
002E D3                SETB    C
002F E500        R     MOV     A,next_r+02H
0031 9582              SUBB    A,DPL
0033 E500        R     MOV     A,next_r+01H
0035 9583              SUBB    A,DPH
0037         ?C0010:
0037 5003              JNC     $ + 5H
0039 020000      R     LJMP    ?C0005
003C AB00        R     MOV     R3,ring_buffer
003E AA00        R     MOV     R2,ring_buffer+01H
0040 A900        R     MOV     R1,ring_buffer+02H
0042 900006            MOV     DPTR,#06H
0045 120000      E     LCALL   ?C?CLDOPTR
0048 24FF              ADD     A,#0FFH
004A FF                MOV     R7,A
004B EE                MOV     A,R6
004C 34FF              ADDC    A,#0FFH
004E FE                MOV     R6,A
004F 7C00              MOV     R4,#00H
0051 120000      E     LCALL   ?C?IMUL
0054 900008            MOV     DPTR,#08H
0057 120000      E     LCALL   ?C?PLDOPTR
005A E9                MOV     A,R1
005B 2F                ADD     A,R7
005C F9                MOV     R1,A
005D EA                MOV     A,R2
005E 3E                ADDC    A,R6
005F FA                MOV     R2,A
0060 E500        R     MOV     A,next_r
0062 850083      R     MOV     DPH,next_r+01H
0065 850082      R     MOV     DPL,next_r+02H
0068 6B                XRL     A,R3
0069 7008              JNZ     ?C0011
006B E9                MOV     A,R1
006C 6582              XRL     A,DPL
006E 7003              JNZ     ?C0011
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 8   

0070 EA                MOV     A,R2
0071 6583              XRL     A,DPH
0073         ?C0011:
0073 7057              JNZ     ?C0005
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
0075 AB00        R     MOV     R3,ring_buffer
0077 AA00        R     MOV     R2,ring_buffer+01H
0079 A900        R     MOV     R1,ring_buffer+02H
007B 900007            MOV     DPTR,#07H
007E 120000      E     LCALL   ?C?CLDOPTR
0081 FF                MOV     R7,A
0082 7E00              MOV     R6,#00H
0084 120000      E     LCALL   ?C?PLDPTR
0087 A800        R     MOV     R0,_data+02H
0089 AC00        R     MOV     R4,_data+01H
008B AD00        R     MOV     R5,_data
008D 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 89
0090 AB00        R     MOV     R3,ring_buffer
0092 AA00        R     MOV     R2,ring_buffer+01H
0094 A900        R     MOV     R1,ring_buffer+02H
0096 900008            MOV     DPTR,#08H
0099 120000      E     LCALL   ?C?PLDOPTR
009C C003              PUSH    AR3
009E C002              PUSH    AR2
00A0 C001              PUSH    AR1
00A2 AB00        R     MOV     R3,ring_buffer
00A4 AA00        R     MOV     R2,ring_buffer+01H
00A6 A900        R     MOV     R1,ring_buffer+02H
00A8 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 90
00AB AB00        R     MOV     R3,ring_buffer
00AD AA00        R     MOV     R2,ring_buffer+01H
00AF A900        R     MOV     R1,ring_buffer+02H
00B1 900008            MOV     DPTR,#08H
00B4 120000      E     LCALL   ?C?PLDOPTR
00B7 C003              PUSH    AR3
00B9 C002              PUSH    AR2
00BB C001              PUSH    AR1
00BD AB00        R     MOV     R3,ring_buffer
00BF AA00        R     MOV     R2,ring_buffer+01H
00C1 A900        R     MOV     R1,ring_buffer+02H
00C3 900003            MOV     DPTR,#03H
00C6 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 91
00C9 7F03              MOV     R7,#03H
00CB 22                RET     
                                           ; SOURCE LINE # 92
00CC         ?C0005:
                                           ; SOURCE LINE # 95
00CC AB00        R     MOV     R3,ring_buffer
00CE AA00        R     MOV     R2,ring_buffer+01H
00D0 A900        R     MOV     R1,ring_buffer+02H
00D2 900003            MOV     DPTR,#03H
00D5 120000      E     LCALL   ?C?PLDOPTR
00D8 C003              PUSH    AR3
00DA C002              PUSH    AR2
00DC C001              PUSH    AR1
00DE AB00        R     MOV     R3,ring_buffer
00E0 AA00        R     MOV     R2,ring_buffer+01H
00E2 A900        R     MOV     R1,ring_buffer+02H
C51 COMPILER V9.60.7.0   RINGBUFFER                                                        01/02/2024 16:55:54 PAGE 9   

00E4 120000      E     LCALL   ?C?PLDPTR
00E7 D082              POP     DPL
00E9 D083              POP     DPH
00EB D0E0              POP     ACC
00ED 6B                XRL     A,R3
00EE 7008              JNZ     ?C0012
00F0 E9                MOV     A,R1
00F1 6582              XRL     A,DPL
00F3 7003              JNZ     ?C0012
00F5 EA                MOV     A,R2
00F6 6583              XRL     A,DPH
00F8         ?C0012:
00F8 7003              JNZ     ?C0007
                                           ; SOURCE LINE # 96
00FA 7F03              MOV     R7,#03H
00FC 22                RET     
                                           ; SOURCE LINE # 97
00FD         ?C0007:
                                           ; SOURCE LINE # 100
00FD AB00        R     MOV     R3,ring_buffer
00FF AA00        R     MOV     R2,ring_buffer+01H
0101 A900        R     MOV     R1,ring_buffer+02H
0103 900007            MOV     DPTR,#07H
0106 120000      E     LCALL   ?C?CLDOPTR
0109 FF                MOV     R7,A
010A 7E00              MOV     R6,#00H
010C 120000      E     LCALL   ?C?PLDPTR
010F A800        R     MOV     R0,_data+02H
0111 AC00        R     MOV     R4,_data+01H
0113 AD00        R     MOV     R5,_data
0115 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 101
0118 AB00        R     MOV     R3,next_r
011A AA00        R     MOV     R2,next_r+01H
011C A900        R     MOV     R1,next_r+02H
011E C003              PUSH    AR3
0120 C002              PUSH    AR2
0122 C001              PUSH    AR1
0124 AB00        R     MOV     R3,ring_buffer
0126 AA00        R     MOV     R2,ring_buffer+01H
0128 A900        R     MOV     R1,ring_buffer+02H
012A 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 104
012D 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 105
012F         ?C0006:
012F 22                RET     
             ; FUNCTION _ringbuffer_read (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    603    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
