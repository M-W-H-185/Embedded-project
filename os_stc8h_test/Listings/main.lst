C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2024 16:55:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS;.\XmRTOS\utils) DEBUG OB
                    -JECTEXTEND CODE PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2          标题：LED红绿灯系统
   3          主频：35MHz
   4          用于：51单片机学习机-学电 
   5          资料：https://rationmcu.com
   6          */
   7          
   8          #include "stc8g.h"
   9          #include "intrins.h"
  10          #include "stdio.h"
  11          #include "os_task.h"
  12          #include "os_queue.h"
  13          /* 发光二极管定义 */
  14          
  15          sbit LED_R = P0^5;    // 红色LED
  16          sbit LED_Y = P0^6;    // 黄色LED
  17          sbit LED_G = P0^7;    // 绿色LED
  18          
  19          /* 按键引脚定义 */ 
  20          sbit K1 = P3^7;     // 按键K1
  21          sbit K2 = P3^6;     // 按键K2
  22          sbit K3 = P3^5;     // 按键K3
  23          
  24          
  25          // 任务堆栈区
  26          os_uint8_t xdata task_stack1[MAX_TASK_DEP];                     /*任务1堆栈.*/
  27          os_uint8_t xdata task_stack2[MAX_TASK_DEP];                     /*任务2堆栈.*/
  28          os_uint8_t xdata task_stack3[MAX_TASK_DEP];                     /*任务2堆栈.*/
  29          // 任务堆栈区
  30          
  31          
  32          
  33          void task1()
  34          {
  35   1              while(1)
  36   1              {
  37   2      
  38   2                      
  39   2                      // LED_R = 1;
  40   2                      os_delay(100);
  41   2                      
  42   2      
  43   2              }
  44   1      }
  45          
  46          void task2()
  47          {
  48   1      
  49   1              while(1)
  50   1              {
  51   2                      LED_Y = 1;
  52   2                      os_delay(1000);
  53   2                      os_delay(1000);
  54   2                      
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2024 16:55:54 PAGE 2   

  55   2                      LED_Y = 0;
  56   2                      os_delay(1000);
  57   2                      os_delay(1000);
  58   2      
  59   2              }
  60   1      }
  61          
  62          typedef struct test_ty{
  63                  os_uint8_t      k1;
  64                  os_uint16_t k2;
  65                  os_uint32_t k3;
  66          };
  67          
  68          QueueHandle xdata queue_1;
  69          struct test_ty xdata queue_buff[5];
  70          void task3()
  71          {
  72   1              os_uint8_t ret = 0;
  73   1              
  74   1      
  75   1                      // 创建队列
  76   1              os_queueCreate(&queue_1, &queue_buff, 5, sizeof(struct test_ty));
  77   1              
  78   1              while(1)
  79   1              {
  80   2                      struct test_ty test;
  81   2                      test.k1 = 0;
  82   2                      test.k2 = 0;
  83   2                      test.k3 = 0;
  84   2                      if(K3 == 0)
  85   2                      {       
  86   3                              os_delay(15);
  87   3                              if(K3 == 0)
  88   3                              {       
  89   4                                      test.k3 = 1;
  90   4                                      
  91   4                                      
  92   4                                      ret = os_queueSend(&queue_1,&test,10000);
  93   4                                      if(ret = RINGBUFF_SUCCESS)
*** WARNING C276 IN LINE 93 OF main.c: constant in condition expression
  94   4                                      {
  95   5                                              LED_G = !LED_G; 
  96   5                                      }
  97   4                                      while(!K3);
  98   4                              }       
  99   3                      }
 100   2                      LED_R = 1;
 101   2                      os_delay(100);
 102   2      
 103   2                      LED_R = 0;
 104   2                      os_delay(100);
 105   2      //              os_taskSwtich();
 106   2                      
 107   2              }
 108   1      }
 109          
 110          
 111          
 112          void Timer0_Init(void)          //1毫秒@11.0592MHz
 113          {
 114   1              AUXR |= 0x80;                   //定时器时钟1T模式
 115   1              TMOD &= 0xF0;                   //设置定时器模式
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2024 16:55:54 PAGE 3   

 116   1              TL0 = 0xCD;                             //设置定时初始值
 117   1              TH0 = 0xD4;                             //设置定时初始值
 118   1              TF0 = 0;                                //清除TF0标志
 119   1              TR0 = 1;                                //定时器0开始计时
 120   1              ET0 = 1;                                //使能定时器0中断
 121   1      }
 122          
 123          unsigned int cut = 0;
 124          // 函数冲重入，由汇编代码调用
 125          void time0_handle(void) large reentrant
 126          //void time0_handle(void)interrupt 1
 127          {
 128   1      //      cut++;
 129   1      
 130   1      //      if(cut == 500)
 131   1      //      {
 132   1      //              cut = 0;
 133   1      //              LED_G = !LED_G;
 134   1      //      }
 135   1              time_handleHook();
 136   1      
 137   1      }
 138          
 139          
 140          
 141          /* 主函数 */
 142          void main()
 143          {
 144   1              EA = 0;
 145   1              P0M0 = 0x00;   //设置P0.0~P0.7为双向口模式
 146   1              P0M1 = 0x00;
 147   1              
 148   1              // 将 P3.5、P3.6、P3.7 端口初始化为 准双向模式
 149   1              P3M0 = 0x00;// 0000 0000
 150   1              P3M1 &= 0x1F;// 0001 1111
 151   1              
 152   1              
 153   1              Timer0_Init();
 154   1              os_init();
 155   1              P_SW2 |= (1<<7);
 156   1              
 157   1              os_task_create(task1, &task_stack1, 1);//将task1函数装入1号槽
 158   1              os_task_create(task2, &task_stack2, 2);//将task2函数装入2号槽
 159   1              os_task_create(task3, &task_stack3, 3);//将task3函数装入3号槽
 160   1              
 161   1              os_start();
 162   1      
 163   1      
 164   1              while(1)
 165   1              {
 166   2      
 167   2              }
 168   1              
 169   1      
 170   1      }
 171          
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2024 16:55:54 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION task1 (BEGIN)
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
0000         ?C0001:
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 40
0000 7F64              MOV     R7,#064H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 43
000B 80F3              SJMP    ?C0001
             ; FUNCTION task1 (END)

             ; FUNCTION task2 (BEGIN)
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0000         ?C0004:
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0000 D286              SETB    LED_Y
                                           ; SOURCE LINE # 52
0002 7FE8              MOV     R7,#0E8H
0004 7E03              MOV     R6,#03H
0006 7D00              MOV     R5,#00H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 53
000D 7FE8              MOV     R7,#0E8H
000F 7E03              MOV     R6,#03H
0011 7D00              MOV     R5,#00H
0013 7C00              MOV     R4,#00H
0015 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 55
0018 C286              CLR     LED_Y
                                           ; SOURCE LINE # 56
001A 7FE8              MOV     R7,#0E8H
001C 7E03              MOV     R6,#03H
001E 7D00              MOV     R5,#00H
0020 7C00              MOV     R4,#00H
0022 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 57
0025 7FE8              MOV     R7,#0E8H
0027 7E03              MOV     R6,#03H
0029 7D00              MOV     R5,#00H
002B 7C00              MOV     R4,#00H
002D 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 59
0030 80CE              SJMP    ?C0004
             ; FUNCTION task2 (END)

             ; FUNCTION task3 (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0000 E4                CLR     A
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2024 16:55:54 PAGE 5   

0001 F500        R     MOV     ret,A
                                           ; SOURCE LINE # 76
0003 750001      E     MOV     ?_os_queueCreate?BYTE+03H,#01H
0006 750000      R     MOV     ?_os_queueCreate?BYTE+04H,#HIGH queue_buff
0009 750000      R     MOV     ?_os_queueCreate?BYTE+05H,#LOW queue_buff
000C 750005      E     MOV     ?_os_queueCreate?BYTE+06H,#05H
000F 750007      E     MOV     ?_os_queueCreate?BYTE+07H,#07H
0012 7B01              MOV     R3,#01H
0014 7A00        R     MOV     R2,#HIGH queue_1
0016 7900        R     MOV     R1,#LOW queue_1
0018 120000      E     LCALL   _os_queueCreate
001B         ?C0007:
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
001B E4                CLR     A
001C F500        R     MOV     test,A
                                           ; SOURCE LINE # 82
001E F500        R     MOV     test+01H,A
0020 F500        R     MOV     test+02H,A
                                           ; SOURCE LINE # 83
0022 F500        R     MOV     test+06H,A
0024 F500        R     MOV     test+05H,A
0026 F500        R     MOV     test+04H,A
0028 F500        R     MOV     test+03H,A
                                           ; SOURCE LINE # 84
002A 20B53A            JB      K3,?C0009
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
002D 7F0F              MOV     R7,#0FH
002F FE                MOV     R6,A
0030 FD                MOV     R5,A
0031 FC                MOV     R4,A
0032 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 87
0035 20B52F            JB      K3,?C0009
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
0038 E4                CLR     A
0039 750001      R     MOV     test+06H,#01H
003C F500        R     MOV     test+05H,A
003E F500        R     MOV     test+04H,A
0040 F500        R     MOV     test+03H,A
                                           ; SOURCE LINE # 92
0042 F500        E     MOV     ?_os_queueSend?BYTE+03H,A
0044 750000      R     MOV     ?_os_queueSend?BYTE+04H,#HIGH test
0047 750000      R     MOV     ?_os_queueSend?BYTE+05H,#LOW test
004A 750010      E     MOV     ?_os_queueSend?BYTE+09H,#010H
004D 750027      E     MOV     ?_os_queueSend?BYTE+08H,#027H
0050 F500        E     MOV     ?_os_queueSend?BYTE+07H,A
0052 F500        E     MOV     ?_os_queueSend?BYTE+06H,A
0054 7B01              MOV     R3,#01H
0056 7A00        R     MOV     R2,#HIGH queue_1
0058 7900        R     MOV     R1,#LOW queue_1
005A 120000      E     LCALL   _os_queueSend
005D 8F00        R     MOV     ret,R7
                                           ; SOURCE LINE # 93
005F 750001      R     MOV     ret,#01H
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
0062 B287              CPL     LED_G
                                           ; SOURCE LINE # 96
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2024 16:55:54 PAGE 6   

0064         ?C0012:
                                           ; SOURCE LINE # 97
0064 30B5FD            JNB     K3,?C0012
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0067         ?C0009:
                                           ; SOURCE LINE # 100
0067 D285              SETB    LED_R
                                           ; SOURCE LINE # 101
0069 7F64              MOV     R7,#064H
006B 7E00              MOV     R6,#00H
006D 7D00              MOV     R5,#00H
006F 7C00              MOV     R4,#00H
0071 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 103
0074 C285              CLR     LED_R
                                           ; SOURCE LINE # 104
0076 7F64              MOV     R7,#064H
0078 7E00              MOV     R6,#00H
007A 7D00              MOV     R5,#00H
007C 7C00              MOV     R4,#00H
007E 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 107
0081 8098              SJMP    ?C0007
             ; FUNCTION task3 (END)

             ; FUNCTION Timer0_Init (BEGIN)
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
0000 438E80            ORL     AUXR,#080H
                                           ; SOURCE LINE # 115
0003 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 116
0006 758ACD            MOV     TL0,#0CDH
                                           ; SOURCE LINE # 117
0009 758CD4            MOV     TH0,#0D4H
                                           ; SOURCE LINE # 118
000C C28D              CLR     TF0
                                           ; SOURCE LINE # 119
000E D28C              SETB    TR0
                                           ; SOURCE LINE # 120
0010 D2A9              SETB    ET0
                                           ; SOURCE LINE # 121
0012 22                RET     
             ; FUNCTION Timer0_Init (END)

             ; FUNCTION _?time0_handle (BEGIN)
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 135
0000 020000      E     LJMP    time_handleHook
             ; FUNCTION _?time0_handle (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 145
0002 E4                CLR     A
0003 F594              MOV     P0M0,A
                                           ; SOURCE LINE # 146
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2024 16:55:54 PAGE 7   

0005 F593              MOV     P0M1,A
                                           ; SOURCE LINE # 149
0007 F5B2              MOV     P3M0,A
                                           ; SOURCE LINE # 150
0009 53B11F            ANL     P3M1,#01FH
                                           ; SOURCE LINE # 153
000C 120000      R     LCALL   Timer0_Init
                                           ; SOURCE LINE # 154
000F 120000      E     LCALL   os_init
                                           ; SOURCE LINE # 155
0012 43BA80            ORL     P_SW2,#080H
                                           ; SOURCE LINE # 157
0015 750001      E     MOV     ?_os_task_create?BYTE+03H,#01H
0018 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_stack1
001B 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_stack1
001E 750000      E     MOV     ?_os_task_create?BYTE+06H,#00H
0021 750001      E     MOV     ?_os_task_create?BYTE+07H,#01H
0024 7BFF              MOV     R3,#0FFH
0026 7A00        R     MOV     R2,#HIGH task1
0028 7900        R     MOV     R1,#LOW task1
002A 120000      E     LCALL   _os_task_create
                                           ; SOURCE LINE # 158
002D 750001      E     MOV     ?_os_task_create?BYTE+03H,#01H
0030 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_stack2
0033 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_stack2
0036 750000      E     MOV     ?_os_task_create?BYTE+06H,#00H
0039 750002      E     MOV     ?_os_task_create?BYTE+07H,#02H
003C 7BFF              MOV     R3,#0FFH
003E 7A00        R     MOV     R2,#HIGH task2
0040 7900        R     MOV     R1,#LOW task2
0042 120000      E     LCALL   _os_task_create
                                           ; SOURCE LINE # 159
0045 750001      E     MOV     ?_os_task_create?BYTE+03H,#01H
0048 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_stack3
004B 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_stack3
004E 750000      E     MOV     ?_os_task_create?BYTE+06H,#00H
0051 750003      E     MOV     ?_os_task_create?BYTE+07H,#03H
0054 7BFF              MOV     R3,#0FFH
0056 7A00        R     MOV     R2,#HIGH task3
0058 7900        R     MOV     R1,#LOW task3
005A 120000      E     LCALL   _os_task_create
                                           ; SOURCE LINE # 161
005D 120000      E     LCALL   os_start
0060         ?C0017:
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 167
0060 80FE              SJMP    ?C0017
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    314    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    118    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
