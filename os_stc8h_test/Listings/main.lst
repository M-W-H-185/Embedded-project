C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJECTEXTEN
                    -D CODE PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

*** WARNING C500 IN LINE 1 OF main.c: LICENSE ERROR (R207(3): REGISTRY READ ERROR)

   1          /*
   2          标题：LED红绿灯系统
   3          主频：35MHz
   4          用于：51单片机学习机-学电 
   5          资料：https://rationmcu.com
   6          */
   7          
   8          #include "stc8g.h"
   9          #include "intrins.h"
  10          #include "stdio.h"
  11          
  12          
  13          /* 发光二极管定义 */
  14          sbit LED_R = P0^5;    // 红色LED
  15          sbit LED_Y = P0^6;    // 黄色LED
  16          sbit LED_G = P0^7;    // 绿色LED
  17          
  18          
  19          typedef     unsigned char    os_uint8_t;        //  8 bits 
  20          
  21          typedef     unsigned int     os_uint16_t;       // 16 bits 
  22          
  23          typedef     unsigned long    os_uint32_t;       // 32 bits 
  24          enum OS_TASK_STATUS_TYPE
  25          {
  26                  OS_READY      = 1,      // 就绪态
  27                  OS_RUNING     = 2,      // 运行态
  28                  OS_BLOCKED    = 3,      // 阻塞态
  29                  OS_SUSPENDED  = 4       // 停止态
  30          
  31          };
  32          
  33          // 任务控制块
  34          typedef struct os_tcb_t
  35          {
  36                  os_uint8_t                      sp;                                     // sp 堆栈指针存储
  37                  os_uint32_t             delay_tick;                     // 延时滴答数
  38                  os_uint8_t                      os_status_type;         // 任务状态
  39          };
  40          
  41           
  42          #define MAX_TASKS 5       /*任务槽个数.必须和实际任务数一至*/
  43          #define MAX_TASK_DEP 20   /*最大栈深.最低不得少于2个,保守值为12*/
  44          unsigned int task_id;    /*当前活动任务号*/
  45          unsigned int max_task = 0;
  46           
  47          
  48           
  49          extern void test(void);
  50           
  51          
  52          // 任务控制列表
  53          struct os_tcb_t idata tcb_list[MAX_TASKS];
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 2   

  54          // 任务堆栈区
  55          os_uint8_t idata task_idle_stack[MAX_TASK_DEP];         /*空闲任务堆栈.*/
  56          os_uint8_t idata task_stack1[MAX_TASK_DEP];                     /*任务1堆栈.*/
  57          os_uint8_t idata task_stack2[MAX_TASK_DEP];                     /*任务2堆栈.*/
  58          // 任务堆栈区
  59          
  60          // 任务切换函数
  61          void OSCtxSw()
  62          {
  63   1              os_uint8_t  ost_i = 0;
  64   1      
  65   1              tcb_list[task_id].sp = SP;
  66   1              // 找出就绪态的一个id
  67   1              for(ost_i = 0; ost_i < max_task; ost_i++)
  68   1              {
  69   2                      if(tcb_list[ost_i].os_status_type == OS_READY)
  70   2                      {
  71   3                              task_id = ost_i;
  72   3                              continue;
  73   3      
  74   3                      }
  75   2              }
  76   1              
  77   1              
  78   1          if(task_id == max_task)
  79   1              {
  80   2                      task_id = 0;
  81   2              }
  82   1      
  83   1      
  84   1      }
  85           
  86          void os_task_create(void(*task)(void) ,os_uint8_t *tstack,int tid)
  87          {
  88   1      
  89   1              tstack[0] = (unsigned int)task & 0xff;
  90   1              tstack[1] = (unsigned int)task >> 8;
  91   1      
  92   1              tcb_list[tid].sp                                = tstack+1;
*** WARNING C260 IN LINE 92 OF main.c: '=': pointer truncation
  93   1              tcb_list[tid].os_status_type    = OS_READY;
  94   1      
  95   1              max_task++;
  96   1      }
  97          void os_idle_task(void);
  98          
  99          void os_start()
 100          {
 101   1              // 装载空闲任务
 102   1              os_task_create(os_idle_task, &task_idle_stack, 0);//将task1函数装入0号槽
 103   1      
 104   1              task_id = 0;
 105   1              SP = tcb_list[task_id].sp;  
 106   1              return;
 107   1      }
 108          
 109          // 任务延时函数
 110          void os_delay(os_uint32_t tasks)
 111          {       
 112   1              
 113   1              // 设置延时滴答数
 114   1              tcb_list[task_id].delay_tick     =      tasks;
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 3   

 115   1              // 将任务设置为阻塞态
 116   1              tcb_list[task_id].os_status_type =      OS_BLOCKED;
 117   1              // 只要任务延时了，就马上切换出去
 118   1              OSCtxSw();
 119   1              
 120   1      }
 121          os_uint8_t idle_cut = 0;
 122          // 空闲函数
 123          void os_idle_task(void)
 124          {
 125   1              while(1)
 126   1              {
 127   2                      idle_cut = 1 + 1;
 128   2              }
 129   1      }
 130          
 131          void task1()
 132          {
 133   1              while(1)
 134   1              {
 135   2                      LED_R = 1;
 136   2                      os_delay(100);
 137   2      
 138   2                      LED_R = 0;
 139   2                      os_delay(100);
 140   2                      
 141   2                      LED_R = 1;
 142   2                      os_delay(100);
 143   2      
 144   2              }
 145   1      }
 146          
 147          void task2()
 148          {
 149   1      
 150   1              while(1)
 151   1              {
 152   2                      LED_Y = 1;
 153   2                      os_delay(1000);
 154   2                      
 155   2                      LED_Y = 0;
 156   2                      os_delay(1000);
 157   2              }
 158   1      }
 159          
 160          
 161          unsigned int cut = 0;
 162          
 163          void time0_handle(void)large reentrant
 164          //void time0_handle(void)interrupt 1
 165          {
 166   1              os_uint8_t ti = 0;
 167   1              cut++;
 168   1      
 169   1              if(cut == 500)
 170   1              {
 171   2                      cut = 0;
 172   2                      LED_G = !LED_G;
 173   2              }
 174   1              // 在这里处理遍历延时
 175   1      //      for(ti = 0; ti < max_task; ti++)
 176   1      //      {
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 4   

 177   1      //              if(tcb_list[ti].os_status_type != OS_BLOCKED)
 178   1      //              {
 179   1      //                      continue;
 180   1      //              }
 181   1      //              // 设置延时滴答数
 182   1      //              if((tcb_list[ti].delay_tick - 1) == 0)
 183   1      //              {
 184   1      //                      tcb_list[ti].delay_tick = 0;
 185   1      //                      // 将任务设置为阻塞态
 186   1      //                      tcb_list[ti].os_status_type = OS_READY;
 187   1      //                      continue;
 188   1      //              }
 189   1      //              tcb_list[ti].delay_tick--;
 190   1      //      }
 191   1      
 192   1              ti = 0;
 193   1              
 194   1      }
 195          
 196          void Timer0_Init(void)          //1毫秒@11.0592MHz
 197          {
 198   1              AUXR |= 0x80;                   //定时器时钟1T模式
 199   1              TMOD &= 0xF0;                   //设置定时器模式
 200   1              TL0 = 0xCD;                             //设置定时初始值
 201   1              TH0 = 0xD4;                             //设置定时初始值
 202   1              TF0 = 0;                                //清除TF0标志
 203   1              TR0 = 1;                                //定时器0开始计时
 204   1              ET0 = 1;                                //使能定时器0中断
 205   1      }
 206          
 207          /* 主函数 */
 208          void main()
 209          {
 210   1              P0M0 = 0x00;   //设置P0.0~P0.7为双向口模式
 211   1              P0M1 = 0x00;
 212   1              Timer0_Init();
 213   1              EA = 1;
 214   1              P_SW2 |= (1<<7);
 215   1              
 216   1              
 217   1              os_task_create(task1, &task_stack1, 1);//将task1函数装入0号槽
 218   1              os_task_create(task2, &task_stack2, 2);//将task2函数装入1号槽
 219   1              os_start();
 220   1      
 221   1      
 222   1              while(1)
 223   1              {
 224   2      
 225   2              }
 226   1              
 227   1      
 228   1      }
 229          
 230          
 231          
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION OSCtxSw (BEGIN)
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
;---- Variable 'ost_i' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 65
0002 900000      R     MOV     DPTR,#task_id
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 75F006            MOV     B,#06H
000A A4                MUL     AB
000B 2400        R     ADD     A,#LOW tcb_list
000D F8                MOV     R0,A
000E A681              MOV     @R0,SP
                                           ; SOURCE LINE # 67
0010         ?C0001:
0010 EF                MOV     A,R7
0011 FD                MOV     R5,A
0012 D3                SETB    C
0013 900000      R     MOV     DPTR,#max_task+01H
0016 E0                MOVX    A,@DPTR
0017 9D                SUBB    A,R5
0018 900000      R     MOV     DPTR,#max_task
001B E0                MOVX    A,@DPTR
001C 9400              SUBB    A,#00H
001E 4017              JC      ?C0002
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
0020 EF                MOV     A,R7
0021 75F006            MOV     B,#06H
0024 A4                MUL     AB
0025 2400        R     ADD     A,#LOW tcb_list+05H
0027 F8                MOV     R0,A
0028 E6                MOV     A,@R0
0029 B40108            CJNE    A,#01H,?C0003
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
002C 900000      R     MOV     DPTR,#task_id
002F E4                CLR     A
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 ED                MOV     A,R5
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0034         ?C0003:
0034 0F                INC     R7
0035 80D9              SJMP    ?C0001
0037         ?C0002:
                                           ; SOURCE LINE # 78
0037 900000      R     MOV     DPTR,#max_task
003A E0                MOVX    A,@DPTR
003B FE                MOV     R6,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 6   

003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 B5060C            CJNE    A,AR6,?C0006
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 B50707            CJNE    A,AR7,?C0006
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0049 E4                CLR     A
004A 900000      R     MOV     DPTR,#task_id
004D F0                MOVX    @DPTR,A
004E A3                INC     DPTR
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 84
0050         ?C0006:
0050 22                RET     
             ; FUNCTION OSCtxSw (END)

             ; FUNCTION _os_task_create (BEGIN)
                                           ; SOURCE LINE # 86
0000 900000      R     MOV     DPTR,#task
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 89
000B 900000      R     MOV     DPTR,#task
000E A3                INC     DPTR
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FB                MOV     R3,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FA                MOV     R2,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A F9                MOV     R1,A
001B EF                MOV     A,R7
001C 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 90
001F 900000      R     MOV     DPTR,#task
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FA                MOV     R2,A
0025 A3                INC     DPTR
0026 EA                MOV     A,R2
0027 FF                MOV     R7,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FB                MOV     R3,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FA                MOV     R2,A
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 7   

002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 F9                MOV     R1,A
0031 900001            MOV     DPTR,#01H
0034 EF                MOV     A,R7
0035 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 92
0038 E9                MOV     A,R1
0039 2401              ADD     A,#01H
003B F9                MOV     R1,A
003C 900000      R     MOV     DPTR,#tid
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 75F006            MOV     B,#06H
0045 A4                MUL     AB
0046 2400        R     ADD     A,#LOW tcb_list
0048 F8                MOV     R0,A
0049 A601              MOV     @R0,AR1
                                           ; SOURCE LINE # 93
004B EE                MOV     A,R6
004C 75F006            MOV     B,#06H
004F A4                MUL     AB
0050 2400        R     ADD     A,#LOW tcb_list+05H
0052 F8                MOV     R0,A
0053 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 95
0055 900000      R     MOV     DPTR,#max_task+01H
0058 E0                MOVX    A,@DPTR
0059 04                INC     A
005A F0                MOVX    @DPTR,A
005B 7006              JNZ     ?C0026
005D 900000      R     MOV     DPTR,#max_task
0060 E0                MOVX    A,@DPTR
0061 04                INC     A
0062 F0                MOVX    @DPTR,A
0063         ?C0026:
                                           ; SOURCE LINE # 96
0063 22                RET     
             ; FUNCTION _os_task_create (END)

             ; FUNCTION os_start (BEGIN)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 102
0000 900000      R     MOV     DPTR,#?_os_task_create?BYTE+03H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 7400        R     MOV     A,#HIGH task_idle_stack
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A 7400        R     MOV     A,#LOW task_idle_stack
000C F0                MOVX    @DPTR,A
000D E4                CLR     A
000E A3                INC     DPTR
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 F0                MOVX    @DPTR,A
0012 7BFF              MOV     R3,#0FFH
0014 7A00        R     MOV     R2,#HIGH os_idle_task
0016 7900        R     MOV     R1,#LOW os_idle_task
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 8   

0018 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 104
001B E4                CLR     A
001C 900000      R     MOV     DPTR,#task_id
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
0022 900000      R     MOV     DPTR,#task_id
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 75F006            MOV     B,#06H
002A A4                MUL     AB
002B 2400        R     ADD     A,#LOW tcb_list
002D F8                MOV     R0,A
002E E6                MOV     A,@R0
002F F581              MOV     SP,A
                                           ; SOURCE LINE # 107
0031 22                RET     
             ; FUNCTION os_start (END)

             ; FUNCTION L?0029 (BEGIN)
0000 D285              SETB    LED_R
0002         L?0030:
0002 7F64              MOV     R7,#064H
0004 7E00              MOV     R6,#00H
0006         L?0031:
0006 7D00              MOV     R5,#00H
0008 7C00              MOV     R4,#00H
             ; FUNCTION _os_delay (BEGIN)
                                           ; SOURCE LINE # 110
;---- Variable 'tasks' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 114
000A 900000      R     MOV     DPTR,#task_id
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FB                MOV     R3,A
0010 75F006            MOV     B,#06H
0013 A4                MUL     AB
0014 2400        R     ADD     A,#LOW tcb_list+01H
0016 F8                MOV     R0,A
0017 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 116
001A EB                MOV     A,R3
001B 75F006            MOV     B,#06H
001E A4                MUL     AB
001F 2400        R     ADD     A,#LOW tcb_list+05H
0021 F8                MOV     R0,A
0022 7603              MOV     @R0,#03H
                                           ; SOURCE LINE # 118
0024 020000      R     LJMP    OSCtxSw
             ; FUNCTION _os_delay (END)

             ; FUNCTION os_idle_task (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
0000         ?C0010:
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
0000 900000      R     MOV     DPTR,#idle_cut
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 9   

0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0006 80F8              SJMP    ?C0010
             ; FUNCTION os_idle_task (END)

             ; FUNCTION task1 (BEGIN)
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0000         ?C0013:
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
0000 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 138
0003 C285              CLR     LED_R
                                           ; SOURCE LINE # 139
0005 120000      R     LCALL   L?0030
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0008 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 144
000B 80F3              SJMP    ?C0013
             ; FUNCTION task1 (END)

             ; FUNCTION task2 (BEGIN)
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000         ?C0016:
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
0000 D286              SETB    LED_Y
                                           ; SOURCE LINE # 153
0002 7FE8              MOV     R7,#0E8H
0004 7E03              MOV     R6,#03H
0006 120000      R     LCALL   L?0031
                                           ; SOURCE LINE # 155
0009 C286              CLR     LED_Y
                                           ; SOURCE LINE # 156
000B 7FE8              MOV     R7,#0E8H
000D 7E03              MOV     R6,#03H
000F 120000      R     LCALL   L?0031
                                           ; SOURCE LINE # 157
0012 80EC              SJMP    ?C0016
             ; FUNCTION task2 (END)

             ; FUNCTION _?time0_handle (BEGIN)
                                           ; SOURCE LINE # 163
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 166
0006 850083      E     MOV     DPH,?C_XBP
0009 850082      E     MOV     DPL,?C_XBP+01H
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
000E 900000      R     MOV     DPTR,#cut+01H
0011 E0                MOVX    A,@DPTR
0012 04                INC     A
0013 F0                MOVX    @DPTR,A
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 10  

0014 7006              JNZ     ?C0027
0016 900000      R     MOV     DPTR,#cut
0019 E0                MOVX    A,@DPTR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
001C         ?C0027:
                                           ; SOURCE LINE # 169
001C 900000      R     MOV     DPTR,#cut
001F E0                MOVX    A,@DPTR
0020 B4010E            CJNE    A,#01H,?C0019
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 B4F409            CJNE    A,#0F4H,?C0019
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0028 E4                CLR     A
0029 900000      R     MOV     DPTR,#cut
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
002F B287              CPL     LED_G
                                           ; SOURCE LINE # 173
0031         ?C0019:
                                           ; SOURCE LINE # 192
0031 850083      E     MOV     DPH,?C_XBP
0034 850082      E     MOV     DPL,?C_XBP+01H
0037 E4                CLR     A
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
0039 900001            MOV     DPTR,#01H
003C 020000      E     LJMP    ?C?ADDXBP
             ; FUNCTION _?time0_handle (END)

             ; FUNCTION Timer0_Init (BEGIN)
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0000 438E80            ORL     AUXR,#080H
                                           ; SOURCE LINE # 199
0003 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 200
0006 758ACD            MOV     TL0,#0CDH
                                           ; SOURCE LINE # 201
0009 758CD4            MOV     TH0,#0D4H
                                           ; SOURCE LINE # 202
000C C28D              CLR     TF0
                                           ; SOURCE LINE # 203
000E D28C              SETB    TR0
                                           ; SOURCE LINE # 204
0010 D2A9              SETB    ET0
                                           ; SOURCE LINE # 205
0012 22                RET     
             ; FUNCTION Timer0_Init (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
0000 E4                CLR     A
0001 F594              MOV     P0M0,A
                                           ; SOURCE LINE # 211
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 11  

0003 F593              MOV     P0M1,A
                                           ; SOURCE LINE # 212
0005 120000      R     LCALL   Timer0_Init
                                           ; SOURCE LINE # 213
0008 D2AF              SETB    EA
                                           ; SOURCE LINE # 214
000A 43BA80            ORL     P_SW2,#080H
                                           ; SOURCE LINE # 217
000D 900000      R     MOV     DPTR,#?_os_task_create?BYTE+03H
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 7400        R     MOV     A,#HIGH task_stack1
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 7400        R     MOV     A,#LOW task_stack1
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D 04                INC     A
001E F0                MOVX    @DPTR,A
001F 7BFF              MOV     R3,#0FFH
0021 7A00        R     MOV     R2,#HIGH task1
0023 7900        R     MOV     R1,#LOW task1
0025 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 218
0028 900000      R     MOV     DPTR,#?_os_task_create?BYTE+03H
002B E4                CLR     A
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E 7400        R     MOV     A,#HIGH task_stack2
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 7400        R     MOV     A,#LOW task_stack2
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 E4                CLR     A
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 7402              MOV     A,#02H
003B F0                MOVX    @DPTR,A
003C 7BFF              MOV     R3,#0FFH
003E 7A00        R     MOV     R2,#HIGH task2
0040 7900        R     MOV     R1,#LOW task2
0042 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 219
0045 120000      R     LCALL   os_start
0048         ?C0022:
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 225
0048 80FE              SJMP    ?C0022
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    467    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7       8
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              12/25/2023 17:26:50 PAGE 12  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =     90    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
