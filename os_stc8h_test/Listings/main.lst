C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJECTEXTEN
                    -D CODE PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

*** WARNING C500 IN LINE 1 OF main.c: LICENSE ERROR (R207(3): REGISTRY READ ERROR)

   1          /*
   2          标题：LED红绿灯系统
   3          主频：35MHz
   4          用于：51单片机学习机-学电 
   5          资料：https://rationmcu.com
   6          */
   7          
   8          #include "stc8g.h"
   9          #include "intrins.h"
  10          #include "stdio.h"
  11          
  12          
  13          /* 发光二极管定义 */
  14          sbit LED_R = P0^5;    // 红色LED
  15          sbit LED_Y = P0^6;    // 黄色LED
  16          sbit LED_G = P0^7;    // 绿色LED
  17          void Delay500ms(void)   //@11.0592MHz
  18          {
  19   1              unsigned char data i, j, k;
  20   1      
  21   1              _nop_();
  22   1              _nop_();
  23   1              i = 22;
  24   1              j = 3;
  25   1              k = 227;
  26   1              do
  27   1              {
  28   2                      do
  29   2                      {
  30   3                              while (--k);
  31   3                      } while (--j);
  32   2              } while (--i);
  33   1      }
  34          
  35          
  36          
  37          typedef     unsigned char    os_uint8_t;        //  8 bits 
  38          
  39          typedef     unsigned int     os_uint16_t;       // 16 bits 
  40          
  41          typedef     unsigned long    os_uint32_t;       // 32 bits 
  42          enum OS_TASK_STATUS_TYPE
  43          {
  44                  OS_READY      = 1,      // 就绪态
  45                  OS_RUNING     = 2,      // 运行态
  46                  OS_BLOCKED    = 3,      // 阻塞态
  47                  OS_SUSPENDED  = 4       // 停止态
  48          
  49          };
  50          
  51          // 任务控制块
  52          typedef struct os_tcb_t
  53          {
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 2   

  54              os_uint8_t  sp;              // sp 堆栈指针存储
  55              os_uint32_t delay_tick;      // 延时滴答数
  56              os_uint8_t  os_status_type;  // 任务状态
  57          } os_tcb_t;
  58          // 任务控制块的结构体大小
  59          const os_uint8_t data OS_TCB_SIZE = sizeof(struct os_tcb_t);    // 1 + 4 + 1 = 6个字节
  60           
  61          #define MAX_TASKS 5       /*任务槽个数.必须和实际任务数一至*/
  62          #define MAX_TASK_DEP 20   /*最大栈深.最低不得少于2个,保守值为12*/
  63          os_uint8_t data task_id = 0;    /*当前活动任务号*/
  64          os_uint8_t max_task = 0;
  65          
  66          
  67           
  68          extern void test(void);
  69          // 任务主动放弃cpu资源
  70          extern void OSCtxSw(void);
  71          
  72          
  73          // 任务控制列表
  74          struct os_tcb_t idata tcb_list[MAX_TASKS];
  75          // 任务堆栈区
  76          os_uint8_t idata task_idle_stack[MAX_TASK_DEP];         /*空闲任务堆栈.*/
  77          os_uint8_t idata task_stack1[MAX_TASK_DEP];                     /*任务1堆栈.*/
  78          os_uint8_t idata task_stack2[MAX_TASK_DEP];                     /*任务2堆栈.*/
  79          // 任务堆栈区
  80          
  81          
  82          
  83          /*************************************************************************      
  84          *                                       获取轮询任务id 无优先级
  85          *************************************************************************/
  86          void OSGetPollTask(void)        
  87          {
  88   1              os_uint8_t  ost_i = 0;
  89   1      
  90   1              // 找出就绪态的一个id
  91   1              task_id ++;
  92   1              if(task_id > max_task)
  93   1              {
  94   2                      task_id = 0;
  95   2              }
  96   1              // task_id++ 的任务不是就绪态 进入循环找一个就绪态的出来
  97   1              if(tcb_list[task_id].os_status_type != OS_READY)
  98   1              {
  99   2                      for(ost_i = 0; ost_i < MAX_TASKS; ost_i++)
 100   2                      {
 101   3                              if(tcb_list[ost_i].os_status_type == OS_READY)
 102   3                              {
 103   4                                      task_id = ost_i;
 104   4                                      
 105   4                              }
 106   3              
 107   3                      }       
 108   2              }
 109   1      
 110   1              
 111   1      }
 112          
 113          
 114           
 115          void os_task_create(void(*task)(void) ,os_uint8_t *tstack,int tid)
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 3   

 116          {
 117   1      
 118   1              tstack[0] = (unsigned int)task & 0xff;
 119   1              tstack[1] = (unsigned int)task >> 8;
 120   1      
 121   1              tcb_list[tid].sp                                = tstack+1;
*** WARNING C260 IN LINE 121 OF main.c: '=': pointer truncation
 122   1              tcb_list[tid].os_status_type    = OS_READY;
 123   1      
 124   1              max_task++;
 125   1      }
 126          void os_idle_task(void);
 127          
 128          void os_start()
 129          {
 130   1              // 装载空闲任务
 131   1              os_task_create(os_idle_task, &task_idle_stack, MAX_TASKS - 1);//将task1函数装入 号槽
 132   1      
 133   1              task_id = MAX_TASKS - 1;
 134   1              SP = tcb_list[task_id].sp;  
 135   1              return;
 136   1      }
 137          
 138          // 任务延时函数
 139          void os_delay(os_uint32_t tasks)
 140          {       
 141   1              if(tasks > 0 && tcb_list[task_id].os_status_type != OS_BLOCKED)
 142   1              {
 143   2                      // 设置延时滴答数
 144   2                      tcb_list[task_id].delay_tick     =      tasks;
 145   2                      // 将任务设置为阻塞态
 146   2                      tcb_list[task_id].os_status_type =      OS_BLOCKED;
 147   2                      
 148   2                      return;
 149   2              }
 150   1      
 151   1              
 152   1      }
 153          os_uint8_t idle_cut = 0;
 154          // 空闲函数
 155          void os_idle_task(void)
 156          {
 157   1      
 158   1              while(1)
 159   1              {
 160   2      //              idle_cut = 1 + 1;
 161   2      //              LED_R = 0;
 162   2      //              Delay500ms();
 163   2      
 164   2      //              LED_R = 1;
 165   2      //              Delay500ms();
 166   2      
 167   2              }
 168   1      }
 169          
 170          void task1()
 171          {
 172   1              while(1)
 173   1              {
 174   2                      LED_R = 1;
 175   2      
 176   2                      os_delay(500);
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 4   

 177   2      
 178   2                      LED_R = 0;
 179   2                      os_delay(500);
 180   2                      
 181   2                      LED_R = 1;
 182   2                      os_delay(500);
 183   2      
 184   2              }
 185   1      }
 186          
 187          void task2()
 188          {
 189   1      
 190   1              while(1)
 191   1              {
 192   2                      LED_Y = 1;
 193   2                      os_delay(500);
 194   2                      
 195   2                      LED_Y = 0;
 196   2                      os_delay(500);
 197   2              }
 198   1      }
 199          
 200          
 201          unsigned int cut = 0;
 202          
 203          void time0_handle(void)large reentrant
 204          //void time0_handle(void)interrupt 1
 205          {
 206   1              os_uint8_t ti = 0;
 207   1              cut++;
 208   1      
 209   1              if(cut == 500)
 210   1              {
 211   2                      cut = 0;
 212   2                      LED_G = !LED_G;
 213   2              }
 214   1              // 在这里处理遍历延时
 215   1              for(ti = 0; ti < max_task; ti++)
 216   1              {
 217   2                      if(tcb_list[ti].os_status_type != OS_BLOCKED)
 218   2                      {
 219   3                              continue;
 220   3                      }
 221   2                      // 设置延时滴答数
 222   2                      if((tcb_list[ti].delay_tick - 1) == 0)
 223   2                      {
 224   3                              tcb_list[ti].delay_tick = 0;
 225   3                              // 将任务设置为阻塞态
 226   3                              tcb_list[ti].os_status_type = OS_READY;
 227   3                              continue;
 228   3                      }
 229   2                      tcb_list[ti].delay_tick--;
 230   2              }
 231   1      
 232   1              
 233   1              OSGetPollTask();        // 找一个就绪的任务出来
 234   1              // 汇编处理任务切换....
 235   1      }
 236          
 237          void Timer0_Init(void)          //1毫秒@11.0592MHz
 238          {
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 5   

 239   1              AUXR |= 0x80;                   //定时器时钟1T模式
 240   1              TMOD &= 0xF0;                   //设置定时器模式
 241   1              TL0 = 0xCD;                             //设置定时初始值
 242   1              TH0 = 0xD4;                             //设置定时初始值
 243   1              TF0 = 0;                                //清除TF0标志
 244   1              TR0 = 1;                                //定时器0开始计时
 245   1              ET0 = 1;                                //使能定时器0中断
 246   1      }
 247                  volatile  os_uint8_t aaaa = 0;
 248          
 249          /* 主函数 */
 250          void main()
 251          {
 252   1      
 253   1              P0M0 = 0x00;   //设置P0.0~P0.7为双向口模式
 254   1              P0M1 = 0x00;
 255   1              Timer0_Init();
 256   1              EA = 1;
 257   1              //      P_SW2 |= (1<<7);
 258   1              tcb_list[0].sp = 0x01;
 259   1      
 260   1              test();
 261   1      
 262   1      
 263   1              
 264   1              os_task_create(task1, &task_stack1, 0);//将task1函数装入0号槽
 265   1              os_task_create(task2, &task_stack2, 1);//将task2函数装入1号槽
 266   1              
 267   1      
 268   1              
 269   1              os_start();
 270   1      
 271   1      
 272   1              while(1)
 273   1              {
 274   2      
 275   2              }
 276   1              
 277   1      
 278   1      }
 279          
 280          
 281          
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Delay500ms (BEGIN)
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 18
                                           ; SOURCE LINE # 21
0000 00                NOP     
                                           ; SOURCE LINE # 22
0001 00                NOP     
                                           ; SOURCE LINE # 23
0002 750016      R     MOV     i,#016H
                                           ; SOURCE LINE # 24
0005 750003      R     MOV     j,#03H
                                           ; SOURCE LINE # 25
0008 7500E3      R     MOV     k,#0E3H
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 29
000B         ?C0007:
                                           ; SOURCE LINE # 30
000B D500FD      R     DJNZ    k,?C0007
                                           ; SOURCE LINE # 31
000E D500FA      R     DJNZ    j,?C0007
                                           ; SOURCE LINE # 32
0011 D500F7      R     DJNZ    i,?C0007
                                           ; SOURCE LINE # 33
0014 22                RET     
             ; FUNCTION Delay500ms (END)

             ; FUNCTION OSGetPollTask (BEGIN)
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
;---- Variable 'ost_i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 91
0000 0500        R     INC     task_id
                                           ; SOURCE LINE # 92
0002 900000      R     MOV     DPTR,#max_task
0005 E0                MOVX    A,@DPTR
0006 FE                MOV     R6,A
0007 E500        R     MOV     A,task_id
0009 D3                SETB    C
000A 9E                SUBB    A,R6
000B 4003              JC      ?C0010
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
000D E4                CLR     A
000E F500        R     MOV     task_id,A
                                           ; SOURCE LINE # 95
0010         ?C0010:
                                           ; SOURCE LINE # 97
0010 E500        R     MOV     A,task_id
0012 75F006            MOV     B,#06H
0015 A4                MUL     AB
0016 2400        R     ADD     A,#LOW tcb_list+05H
0018 F8                MOV     R0,A
0019 E6                MOV     A,@R0
001A 6401              XRL     A,#01H
001C 6015              JZ      ?C0016
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
001E E4                CLR     A
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 7   

001F FF                MOV     R7,A
0020         ?C0012:
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
0020 EF                MOV     A,R7
0021 75F006            MOV     B,#06H
0024 A4                MUL     AB
0025 2400        R     ADD     A,#LOW tcb_list+05H
0027 F8                MOV     R0,A
0028 E6                MOV     A,@R0
0029 B40102            CJNE    A,#01H,?C0014
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
002C 8F00        R     MOV     task_id,R7
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
002E         ?C0014:
002E 0F                INC     R7
002F EF                MOV     A,R7
0030 B405ED            CJNE    A,#05H,?C0012
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 111
0033         ?C0016:
0033 22                RET     
             ; FUNCTION OSGetPollTask (END)

             ; FUNCTION _os_task_create (BEGIN)
                                           ; SOURCE LINE # 115
0000 900000      R     MOV     DPTR,#task
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 118
000B 900000      R     MOV     DPTR,#task
000E A3                INC     DPTR
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FB                MOV     R3,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FA                MOV     R2,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A F9                MOV     R1,A
001B EF                MOV     A,R7
001C 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 119
001F 900000      R     MOV     DPTR,#task
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FA                MOV     R2,A
0025 A3                INC     DPTR
0026 EA                MOV     A,R2
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 8   

0027 FF                MOV     R7,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FB                MOV     R3,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FA                MOV     R2,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 F9                MOV     R1,A
0031 900001            MOV     DPTR,#01H
0034 EF                MOV     A,R7
0035 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 121
0038 E9                MOV     A,R1
0039 2401              ADD     A,#01H
003B F9                MOV     R1,A
003C 900000      R     MOV     DPTR,#tid
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 75F006            MOV     B,#06H
0045 A4                MUL     AB
0046 2400        R     ADD     A,#LOW tcb_list
0048 F8                MOV     R0,A
0049 A601              MOV     @R0,AR1
                                           ; SOURCE LINE # 122
004B EE                MOV     A,R6
004C 75F006            MOV     B,#06H
004F A4                MUL     AB
0050 2400        R     ADD     A,#LOW tcb_list+05H
0052 F8                MOV     R0,A
0053 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 124
0055 900000      R     MOV     DPTR,#max_task
0058 E0                MOVX    A,@DPTR
0059 04                INC     A
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
005B 22                RET     
             ; FUNCTION _os_task_create (END)

             ; FUNCTION os_start (BEGIN)
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 131
0000 900000      R     MOV     DPTR,#?_os_task_create?BYTE+03H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 7400        R     MOV     A,#HIGH task_idle_stack
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A 7400        R     MOV     A,#LOW task_idle_stack
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 7404              MOV     A,#04H
0013 F0                MOVX    @DPTR,A
0014 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 9   

0016 7A00        R     MOV     R2,#HIGH os_idle_task
0018 7900        R     MOV     R1,#LOW os_idle_task
001A 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 133
001D 750004      R     MOV     task_id,#04H
                                           ; SOURCE LINE # 134
0020 E500        R     MOV     A,task_id
0022 75F006            MOV     B,#06H
0025 A4                MUL     AB
0026 2400        R     ADD     A,#LOW tcb_list
0028 F8                MOV     R0,A
0029 E6                MOV     A,@R0
002A F581              MOV     SP,A
                                           ; SOURCE LINE # 136
002C 22                RET     
             ; FUNCTION os_start (END)

             ; FUNCTION L?0043 (BEGIN)
0000 D285              SETB    LED_R
0002         L?0044:
0002 7FF4              MOV     R7,#0F4H
0004 7E01              MOV     R6,#01H
0006 7D00              MOV     R5,#00H
0008 7C00              MOV     R4,#00H
             ; FUNCTION _os_delay (BEGIN)
                                           ; SOURCE LINE # 139
000A 900000      R     MOV     DPTR,#tasks
000D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 FE                MOV     R6,A
0013 FD                MOV     R5,A
0014 FC                MOV     R4,A
0015 900000      R     MOV     DPTR,#tasks
0018 E0                MOVX    A,@DPTR
0019 F8                MOV     R0,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C F9                MOV     R1,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FA                MOV     R2,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 D3                SETB    C
0024 120000      E     LCALL   ?C?ULCMP
0027 4033              JC      ?C0020
0029 E500        R     MOV     A,task_id
002B 75F006            MOV     B,#06H
002E A4                MUL     AB
002F 2400        R     ADD     A,#LOW tcb_list+05H
0031 F8                MOV     R0,A
0032 E6                MOV     A,@R0
0033 6403              XRL     A,#03H
0035 6025              JZ      ?C0020
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 144
0037 900000      R     MOV     DPTR,#tasks
003A E0                MOVX    A,@DPTR
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 10  

003B FC                MOV     R4,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FD                MOV     R5,A
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 E500        R     MOV     A,task_id
0047 75F006            MOV     B,#06H
004A A4                MUL     AB
004B 2400        R     ADD     A,#LOW tcb_list+01H
004D F8                MOV     R0,A
004E 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 146
0051 E500        R     MOV     A,task_id
0053 75F006            MOV     B,#06H
0056 A4                MUL     AB
0057 2400        R     ADD     A,#LOW tcb_list+05H
0059 F8                MOV     R0,A
005A 7603              MOV     @R0,#03H
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 152
005C         ?C0020:
005C 22                RET     
             ; FUNCTION _os_delay (END)

             ; FUNCTION os_idle_task (BEGIN)
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0000         ?C0021:
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 167
0000 80FE              SJMP    ?C0021
             ; FUNCTION os_idle_task (END)

             ; FUNCTION task1 (BEGIN)
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0000         ?C0024:
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 176
0000 120000      R     LCALL   L?0043
                                           ; SOURCE LINE # 178
0003 C285              CLR     LED_R
                                           ; SOURCE LINE # 179
0005 120000      R     LCALL   L?0044
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
0008 120000      R     LCALL   L?0043
                                           ; SOURCE LINE # 184
000B 80F3              SJMP    ?C0024
             ; FUNCTION task1 (END)

             ; FUNCTION task2 (BEGIN)
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 11  

0000         ?C0027:
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
0000 D286              SETB    LED_Y
                                           ; SOURCE LINE # 193
0002 120000      R     LCALL   L?0044
                                           ; SOURCE LINE # 195
0005 C286              CLR     LED_Y
                                           ; SOURCE LINE # 196
0007 120000      R     LCALL   L?0044
                                           ; SOURCE LINE # 197
000A 80F4              SJMP    ?C0027
             ; FUNCTION task2 (END)

             ; FUNCTION _?time0_handle (BEGIN)
                                           ; SOURCE LINE # 203
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 206
0006 850083      E     MOV     DPH,?C_XBP
0009 850082      E     MOV     DPL,?C_XBP+01H
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
000E 900000      R     MOV     DPTR,#cut+01H
0011 E0                MOVX    A,@DPTR
0012 04                INC     A
0013 F0                MOVX    @DPTR,A
0014 7006              JNZ     ?C0041
0016 900000      R     MOV     DPTR,#cut
0019 E0                MOVX    A,@DPTR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
001C         ?C0041:
                                           ; SOURCE LINE # 209
001C 900000      R     MOV     DPTR,#cut
001F E0                MOVX    A,@DPTR
0020 B4010E            CJNE    A,#01H,?C0030
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 B4F409            CJNE    A,#0F4H,?C0030
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0028 E4                CLR     A
0029 900000      R     MOV     DPTR,#cut
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
002F B287              CPL     LED_G
                                           ; SOURCE LINE # 213
0031         ?C0030:
                                           ; SOURCE LINE # 215
0031 850083      E     MOV     DPH,?C_XBP
0034 850082      E     MOV     DPL,?C_XBP+01H
0037 E4                CLR     A
0038 F0                MOVX    @DPTR,A
0039         ?C0031:
0039 900000      R     MOV     DPTR,#max_task
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 12  

003E 850083      E     MOV     DPH,?C_XBP
0041 850082      E     MOV     DPL,?C_XBP+01H
0044 E0                MOVX    A,@DPTR
0045 FE                MOV     R6,A
0046 C3                CLR     C
0047 9F                SUBB    A,R7
0048 4003              JC      $ + 5H
004A 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
004D EE                MOV     A,R6
004E 75F006            MOV     B,#06H
0051 A4                MUL     AB
0052 2400        R     ADD     A,#LOW tcb_list+05H
0054 F8                MOV     R0,A
0055 E6                MOV     A,@R0
0056 6403              XRL     A,#03H
0058 7075              JNZ     ?C0033
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 222
005A E0                MOVX    A,@DPTR
005B 75F006            MOV     B,#06H
005E A4                MUL     AB
005F 2400        R     ADD     A,#LOW tcb_list+01H
0061 F8                MOV     R0,A
0062 120000      E     LCALL   ?C?LLDIDATA
0065 EF                MOV     A,R7
0066 24FF              ADD     A,#0FFH
0068 FF                MOV     R7,A
0069 EE                MOV     A,R6
006A 34FF              ADDC    A,#0FFH
006C FE                MOV     R6,A
006D ED                MOV     A,R5
006E 34FF              ADDC    A,#0FFH
0070 FD                MOV     R5,A
0071 EC                MOV     A,R4
0072 34FF              ADDC    A,#0FFH
0074 FC                MOV     R4,A
0075 E4                CLR     A
0076 FB                MOV     R3,A
0077 FA                MOV     R2,A
0078 F9                MOV     R1,A
0079 F8                MOV     R0,A
007A C3                CLR     C
007B 120000      E     LCALL   ?C?ULCMP
007E 7022              JNZ     ?C0035
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0080 850083      E     MOV     DPH,?C_XBP
0083 850082      E     MOV     DPL,?C_XBP+01H
0086 E0                MOVX    A,@DPTR
0087 FB                MOV     R3,A
0088 75F006            MOV     B,#06H
008B A4                MUL     AB
008C 2400        R     ADD     A,#LOW tcb_list+01H
008E F8                MOV     R0,A
008F 120000      E     LCALL   ?C?LSTKIDATA
0092 00                DB      00H
0093 00                DB      00H
0094 00                DB      00H
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 13  

0095 00                DB      00H
                                           ; SOURCE LINE # 226
0096 EB                MOV     A,R3
0097 75F006            MOV     B,#06H
009A A4                MUL     AB
009B 2400        R     ADD     A,#LOW tcb_list+05H
009D F8                MOV     R0,A
009E 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 227
00A0 802D              SJMP    ?C0033
                                           ; SOURCE LINE # 228
00A2         ?C0035:
                                           ; SOURCE LINE # 229
00A2 850083      E     MOV     DPH,?C_XBP
00A5 850082      E     MOV     DPL,?C_XBP+01H
00A8 E0                MOVX    A,@DPTR
00A9 FB                MOV     R3,A
00AA 75F006            MOV     B,#06H
00AD A4                MUL     AB
00AE 2400        R     ADD     A,#LOW tcb_list+01H
00B0 F8                MOV     R0,A
00B1 120000      E     LCALL   ?C?LLDIDATA
00B4 EF                MOV     A,R7
00B5 24FF              ADD     A,#0FFH
00B7 FF                MOV     R7,A
00B8 EE                MOV     A,R6
00B9 34FF              ADDC    A,#0FFH
00BB FE                MOV     R6,A
00BC ED                MOV     A,R5
00BD 34FF              ADDC    A,#0FFH
00BF FD                MOV     R5,A
00C0 EC                MOV     A,R4
00C1 34FF              ADDC    A,#0FFH
00C3 FC                MOV     R4,A
00C4 EB                MOV     A,R3
00C5 75F006            MOV     B,#06H
00C8 A4                MUL     AB
00C9 2400        R     ADD     A,#LOW tcb_list+01H
00CB F8                MOV     R0,A
00CC 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 230
00CF         ?C0033:
00CF 850083      E     MOV     DPH,?C_XBP
00D2 850082      E     MOV     DPL,?C_XBP+01H
00D5 E0                MOVX    A,@DPTR
00D6 04                INC     A
00D7 F0                MOVX    @DPTR,A
00D8 020000      R     LJMP    ?C0031
00DB         ?C0032:
                                           ; SOURCE LINE # 233
00DB 120000      R     LCALL   OSGetPollTask
                                           ; SOURCE LINE # 235
00DE 900001            MOV     DPTR,#01H
00E1 020000      E     LJMP    ?C?ADDXBP
             ; FUNCTION _?time0_handle (END)

             ; FUNCTION Timer0_Init (BEGIN)
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0000 438E80            ORL     AUXR,#080H
                                           ; SOURCE LINE # 240
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 14  

0003 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 241
0006 758ACD            MOV     TL0,#0CDH
                                           ; SOURCE LINE # 242
0009 758CD4            MOV     TH0,#0D4H
                                           ; SOURCE LINE # 243
000C C28D              CLR     TF0
                                           ; SOURCE LINE # 244
000E D28C              SETB    TR0
                                           ; SOURCE LINE # 245
0010 D2A9              SETB    ET0
                                           ; SOURCE LINE # 246
0012 22                RET     
             ; FUNCTION Timer0_Init (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 253
0000 E4                CLR     A
0001 F594              MOV     P0M0,A
                                           ; SOURCE LINE # 254
0003 F593              MOV     P0M1,A
                                           ; SOURCE LINE # 255
0005 120000      R     LCALL   Timer0_Init
                                           ; SOURCE LINE # 256
0008 D2AF              SETB    EA
                                           ; SOURCE LINE # 258
000A 7800        R     MOV     R0,#LOW tcb_list
000C 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 260
000E 120000      E     LCALL   test
                                           ; SOURCE LINE # 264
0011 900000      R     MOV     DPTR,#?_os_task_create?BYTE+03H
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 7400        R     MOV     A,#HIGH task_stack1
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B 7400        R     MOV     A,#LOW task_stack1
001D F0                MOVX    @DPTR,A
001E E4                CLR     A
001F A3                INC     DPTR
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
0023 7BFF              MOV     R3,#0FFH
0025 7A00        R     MOV     R2,#HIGH task1
0027 7900        R     MOV     R1,#LOW task1
0029 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 265
002C 900000      R     MOV     DPTR,#?_os_task_create?BYTE+03H
002F E4                CLR     A
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 7400        R     MOV     A,#HIGH task_stack2
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 7400        R     MOV     A,#LOW task_stack2
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
C51 COMPILER V9.60.7.0   MAIN                                                              12/26/2023 17:25:07 PAGE 15  

003A E4                CLR     A
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D 04                INC     A
003E F0                MOVX    @DPTR,A
003F 7BFF              MOV     R3,#0FFH
0041 7A00        R     MOV     R2,#HIGH task2
0043 7900        R     MOV     R1,#LOW task2
0045 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 269
0048 120000      R     LCALL   os_start
004B         ?C0038:
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 275
004B 80FE              SJMP    ?C0038
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    654    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       3
   IDATA SIZE       =     90    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
