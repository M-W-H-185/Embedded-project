C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 11:20:45 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJECTEXTEND CODE
                    - PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2          标题：LED红绿灯系统
   3          主频：35MHz
   4          用于：51单片机学习机-学电 
   5          资料：https://rationmcu.com
   6          */
   7          
   8          #include "stc8g.h"
   9          #include "intrins.h"
  10          #include "stdio.h"
  11          #include "os_task.h"
  12          #include "os_queue.h"
  13          /* 发光二极管定义 */
  14          
  15          sbit LED_R = P0^5;    // 红色LED
  16          sbit LED_Y = P0^6;    // 黄色LED
  17          sbit LED_G = P0^7;    // 绿色LED
  18          
  19          
  20          
  21          
  22          // 任务堆栈区
  23          os_uint8_t xdata task_stack1[MAX_TASK_DEP];                     /*任务1堆栈.*/
  24          os_uint8_t xdata task_stack2[MAX_TASK_DEP];                     /*任务2堆栈.*/
  25          // 任务堆栈区
  26          
  27          
  28          
  29          void task1()
  30          {
  31   1              while(1)
  32   1              {
  33   2                      LED_R = 1;
  34   2                      os_delay(100);
  35   2      
  36   2                      LED_R = 0;
  37   2                      os_delay(100);
  38   2                      
  39   2                      LED_R = 1;
  40   2                      os_delay(100);
  41   2      
  42   2              }
  43   1      }
  44          
  45          void task2()
  46          {
  47   1      
  48   1              while(1)
  49   1              {
  50   2                      LED_Y = 1;
  51   2                      os_delay(1000);
  52   2                      os_delay(1000);
  53   2                      
  54   2                      LED_Y = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 11:20:45 PAGE 2   

  55   2                      os_delay(1000);
  56   2                      os_delay(1000);
  57   2      
  58   2              }
  59   1      }
  60          
  61          
  62          
  63          void Timer0_Init(void)          //1毫秒@11.0592MHz
  64          {
  65   1              AUXR |= 0x80;                   //定时器时钟1T模式
  66   1              TMOD &= 0xF0;                   //设置定时器模式
  67   1              TL0 = 0xCD;                             //设置定时初始值
  68   1              TH0 = 0xD4;                             //设置定时初始值
  69   1              TF0 = 0;                                //清除TF0标志
  70   1              TR0 = 1;                                //定时器0开始计时
  71   1              ET0 = 1;                                //使能定时器0中断
  72   1      }
  73          
  74          unsigned int cut = 0;
  75          
  76          // 函数冲重入，由汇编代码调用
  77          void time0_handle(void)large reentrant
  78          //void time0_handle(void)interrupt 1
  79          {
  80   1              cut++;
  81   1      
  82   1              if(cut == 500)
  83   1              {
  84   2                      cut = 0;
  85   2                      LED_G = !LED_G;
  86   2              }
  87   1              time_handleHook();
  88   1      
  89   1      }
  90          
  91          
  92          QueueHandle xdata queue_1 ;
  93          
  94          
  95          /* 主函数 */
  96          void main()
  97          {
  98   1              volatile  os_uint8_t test_data = 0xff;
  99   1              
 100   1              // 初始化一个队列
 101   1              queue_created(&queue_1);
 102   1              // 写五次 是成功的
 103   1              queue_write(&queue_1,1);
 104   1              queue_write(&queue_1,2);
 105   1              queue_write(&queue_1,3);
 106   1              queue_write(&queue_1,4);
 107   1              queue_write(&queue_1,5);
 108   1              // 写五次 是成功的
 109   1              
 110   1              // 写五次后 失败
 111   1              queue_write(&queue_1,6);
 112   1              queue_write(&queue_1,7);        
 113   1              // 写五次后 失败
 114   1      
 115   1              // 读五次 成功
 116   1              queue_read(&queue_1, &test_data);
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 11:20:45 PAGE 3   

 117   1              queue_read(&queue_1, &test_data);
 118   1              queue_read(&queue_1, &test_data);
 119   1              queue_read(&queue_1, &test_data);
 120   1              queue_read(&queue_1, &test_data);
 121   1              queue_read(&queue_1, &test_data);
 122   1              // 读五次 成功
 123   1      
 124   1              // 读五次后 第一次读 失败并让 读和写指正回到数组0
 125   1              queue_read(&queue_1, &test_data);
 126   1              // 读五次后 第二次读 读和写重合  缓冲区数据为空
 127   1              queue_read(&queue_1, &test_data);       
 128   1      
 129   1      
 130   1              // 这两句后 缓冲区数据为空
 131   1              
 132   1              // 写一次成功
 133   1              queue_write(&queue_1,0x33);
 134   1              // 读一次成功
 135   1              queue_read(&queue_1, &test_data);       
 136   1              
 137   1              // 这两句后 缓冲区数据为空
 138   1      
 139   1              P0M0 = 0x00;   //设置P0.0~P0.7为双向口模式
 140   1              P0M1 = 0x00;
 141   1              Timer0_Init();
 142   1              EA = 1;
 143   1              P_SW2 |= (1<<7);
 144   1              
 145   1              os_task_create(task1, &task_stack1, 1);//将task1函数装入0号槽
 146   1              os_task_create(task2, &task_stack2, 2);//将task2函数装入1号槽
 147   1              os_start();
 148   1      
 149   1      
 150   1              while(1)
 151   1              {
 152   2      
 153   2              }
 154   1              
 155   1      
 156   1      }
 157          
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 11:20:45 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION task1 (BEGIN)
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
0000         ?C0001:
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
0000 D285              SETB    LED_R
                                           ; SOURCE LINE # 34
0002 7F64              MOV     R7,#064H
0004 7E00              MOV     R6,#00H
0006 7D00              MOV     R5,#00H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 36
000D C285              CLR     LED_R
                                           ; SOURCE LINE # 37
000F 7F64              MOV     R7,#064H
0011 7E00              MOV     R6,#00H
0013 7D00              MOV     R5,#00H
0015 7C00              MOV     R4,#00H
0017 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 39
001A D285              SETB    LED_R
                                           ; SOURCE LINE # 40
001C 7F64              MOV     R7,#064H
001E 7E00              MOV     R6,#00H
0020 7D00              MOV     R5,#00H
0022 7C00              MOV     R4,#00H
0024 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 42
0027 80D7              SJMP    ?C0001
             ; FUNCTION task1 (END)

             ; FUNCTION task2 (BEGIN)
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0000         ?C0004:
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
0000 D286              SETB    LED_Y
                                           ; SOURCE LINE # 51
0002 7FE8              MOV     R7,#0E8H
0004 7E03              MOV     R6,#03H
0006 7D00              MOV     R5,#00H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 52
000D 7FE8              MOV     R7,#0E8H
000F 7E03              MOV     R6,#03H
0011 7D00              MOV     R5,#00H
0013 7C00              MOV     R4,#00H
0015 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 54
0018 C286              CLR     LED_Y
                                           ; SOURCE LINE # 55
001A 7FE8              MOV     R7,#0E8H
001C 7E03              MOV     R6,#03H
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 11:20:45 PAGE 5   

001E 7D00              MOV     R5,#00H
0020 7C00              MOV     R4,#00H
0022 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 56
0025 7FE8              MOV     R7,#0E8H
0027 7E03              MOV     R6,#03H
0029 7D00              MOV     R5,#00H
002B 7C00              MOV     R4,#00H
002D 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 58
0030 80CE              SJMP    ?C0004
             ; FUNCTION task2 (END)

             ; FUNCTION Timer0_Init (BEGIN)
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0000 438E80            ORL     AUXR,#080H
                                           ; SOURCE LINE # 66
0003 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 67
0006 758ACD            MOV     TL0,#0CDH
                                           ; SOURCE LINE # 68
0009 758CD4            MOV     TH0,#0D4H
                                           ; SOURCE LINE # 69
000C C28D              CLR     TF0
                                           ; SOURCE LINE # 70
000E D28C              SETB    TR0
                                           ; SOURCE LINE # 71
0010 D2A9              SETB    ET0
                                           ; SOURCE LINE # 72
0012 22                RET     
             ; FUNCTION Timer0_Init (END)

             ; FUNCTION _?time0_handle (BEGIN)
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 80
0000 0500        R     INC     cut+01H
0002 E500        R     MOV     A,cut+01H
0004 7002              JNZ     ?C0013
0006 0500        R     INC     cut
0008         ?C0013:
                                           ; SOURCE LINE # 82
0008 B4F40C            CJNE    A,#0F4H,?C0008
000B E500        R     MOV     A,cut
000D B40107            CJNE    A,#01H,?C0008
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0010 E4                CLR     A
0011 F500        R     MOV     cut,A
0013 F500        R     MOV     cut+01H,A
                                           ; SOURCE LINE # 85
0015 B287              CPL     LED_G
                                           ; SOURCE LINE # 86
0017         ?C0008:
                                           ; SOURCE LINE # 87
0017 020000      E     LJMP    time_handleHook
             ; FUNCTION _?time0_handle (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 11:20:45 PAGE 6   

                                           ; SOURCE LINE # 98
0000 7500FF      R     MOV     test_data,#0FFH
                                           ; SOURCE LINE # 101
0003 7B01              MOV     R3,#01H
0005 7A00        R     MOV     R2,#HIGH queue_1
0007 7900        R     MOV     R1,#LOW queue_1
0009 120000      E     LCALL   _queue_created
                                           ; SOURCE LINE # 103
000C 7B01              MOV     R3,#01H
000E 7A00        R     MOV     R2,#HIGH queue_1
0010 7900        R     MOV     R1,#LOW queue_1
0012 7D01              MOV     R5,#01H
0014 120000      E     LCALL   _queue_write
                                           ; SOURCE LINE # 104
0017 7B01              MOV     R3,#01H
0019 7A00        R     MOV     R2,#HIGH queue_1
001B 7900        R     MOV     R1,#LOW queue_1
001D 7D02              MOV     R5,#02H
001F 120000      E     LCALL   _queue_write
                                           ; SOURCE LINE # 105
0022 7B01              MOV     R3,#01H
0024 7A00        R     MOV     R2,#HIGH queue_1
0026 7900        R     MOV     R1,#LOW queue_1
0028 7D03              MOV     R5,#03H
002A 120000      E     LCALL   _queue_write
                                           ; SOURCE LINE # 106
002D 7B01              MOV     R3,#01H
002F 7A00        R     MOV     R2,#HIGH queue_1
0031 7900        R     MOV     R1,#LOW queue_1
0033 7D04              MOV     R5,#04H
0035 120000      E     LCALL   _queue_write
                                           ; SOURCE LINE # 107
0038 7B01              MOV     R3,#01H
003A 7A00        R     MOV     R2,#HIGH queue_1
003C 7900        R     MOV     R1,#LOW queue_1
003E 7D05              MOV     R5,#05H
0040 120000      E     LCALL   _queue_write
                                           ; SOURCE LINE # 111
0043 7B01              MOV     R3,#01H
0045 7A00        R     MOV     R2,#HIGH queue_1
0047 7900        R     MOV     R1,#LOW queue_1
0049 7D06              MOV     R5,#06H
004B 120000      E     LCALL   _queue_write
                                           ; SOURCE LINE # 112
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH queue_1
0052 7900        R     MOV     R1,#LOW queue_1
0054 7D07              MOV     R5,#07H
0056 120000      E     LCALL   _queue_write
                                           ; SOURCE LINE # 116
0059 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
005C 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
005F 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
0062 7B01              MOV     R3,#01H
0064 7A00        R     MOV     R2,#HIGH queue_1
0066 7900        R     MOV     R1,#LOW queue_1
0068 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 117
006B 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
006E 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
0071 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
0074 7B01              MOV     R3,#01H
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 11:20:45 PAGE 7   

0076 7A00        R     MOV     R2,#HIGH queue_1
0078 7900        R     MOV     R1,#LOW queue_1
007A 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 118
007D 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
0080 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
0083 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
0086 7B01              MOV     R3,#01H
0088 7A00        R     MOV     R2,#HIGH queue_1
008A 7900        R     MOV     R1,#LOW queue_1
008C 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 119
008F 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
0092 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
0095 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
0098 7B01              MOV     R3,#01H
009A 7A00        R     MOV     R2,#HIGH queue_1
009C 7900        R     MOV     R1,#LOW queue_1
009E 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 120
00A1 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
00A4 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
00A7 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
00AA 7B01              MOV     R3,#01H
00AC 7A00        R     MOV     R2,#HIGH queue_1
00AE 7900        R     MOV     R1,#LOW queue_1
00B0 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 121
00B3 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
00B6 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
00B9 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
00BC 7B01              MOV     R3,#01H
00BE 7A00        R     MOV     R2,#HIGH queue_1
00C0 7900        R     MOV     R1,#LOW queue_1
00C2 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 125
00C5 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
00C8 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
00CB 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
00CE 7B01              MOV     R3,#01H
00D0 7A00        R     MOV     R2,#HIGH queue_1
00D2 7900        R     MOV     R1,#LOW queue_1
00D4 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 127
00D7 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
00DA 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
00DD 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
00E0 7B01              MOV     R3,#01H
00E2 7A00        R     MOV     R2,#HIGH queue_1
00E4 7900        R     MOV     R1,#LOW queue_1
00E6 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 133
00E9 7B01              MOV     R3,#01H
00EB 7A00        R     MOV     R2,#HIGH queue_1
00ED 7900        R     MOV     R1,#LOW queue_1
00EF 7D33              MOV     R5,#033H
00F1 120000      E     LCALL   _queue_write
                                           ; SOURCE LINE # 135
00F4 750000      E     MOV     ?_queue_read?BYTE+03H,#00H
00F7 750000      R     MOV     ?_queue_read?BYTE+04H,#HIGH test_data
00FA 750000      R     MOV     ?_queue_read?BYTE+05H,#LOW test_data
00FD 7B01              MOV     R3,#01H
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 11:20:45 PAGE 8   

00FF 7A00        R     MOV     R2,#HIGH queue_1
0101 7900        R     MOV     R1,#LOW queue_1
0103 120000      E     LCALL   _queue_read
                                           ; SOURCE LINE # 139
0106 E4                CLR     A
0107 F594              MOV     P0M0,A
                                           ; SOURCE LINE # 140
0109 F593              MOV     P0M1,A
                                           ; SOURCE LINE # 141
010B 120000      R     LCALL   Timer0_Init
                                           ; SOURCE LINE # 142
010E D2AF              SETB    EA
                                           ; SOURCE LINE # 143
0110 43BA80            ORL     P_SW2,#080H
                                           ; SOURCE LINE # 145
0113 750001      E     MOV     ?_os_task_create?BYTE+03H,#01H
0116 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_stack1
0119 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_stack1
011C F500        E     MOV     ?_os_task_create?BYTE+06H,A
011E 750001      E     MOV     ?_os_task_create?BYTE+07H,#01H
0121 7BFF              MOV     R3,#0FFH
0123 7A00        R     MOV     R2,#HIGH task1
0125 7900        R     MOV     R1,#LOW task1
0127 120000      E     LCALL   _os_task_create
                                           ; SOURCE LINE # 146
012A 750001      E     MOV     ?_os_task_create?BYTE+03H,#01H
012D 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_stack2
0130 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_stack2
0133 750000      E     MOV     ?_os_task_create?BYTE+06H,#00H
0136 750002      E     MOV     ?_os_task_create?BYTE+07H,#02H
0139 7BFF              MOV     R3,#0FFH
013B 7A00        R     MOV     R2,#HIGH task2
013D 7900        R     MOV     R1,#LOW task2
013F 120000      E     LCALL   _os_task_create
                                           ; SOURCE LINE # 147
0142 120000      E     LCALL   os_start
0145         ?C0010:
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 153
0145 80FE              SJMP    ?C0010
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    463    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     54    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
