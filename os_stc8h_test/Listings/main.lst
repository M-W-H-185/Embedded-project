C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5_c51\C51\BIN\C51.EXE main.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG 
                    -OBJECTEXTEND CODE PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2          标题：LED红绿灯系统
   3          主频：35MHz
   4          用于：51单片机学习机-学电 
   5          资料：https://rationmcu.com
   6          */
   7          
   8          #include "stc8g.h"
   9          #include "intrins.h"
  10          #include "stdio.h"
  11          
  12          #include "os_typedef.h"
  13          
  14          /* 发光二极管定义 */
  15          sbit LED_R = P0^5;    // 红色LED
  16          sbit LED_Y = P0^6;    // 黄色LED
  17          sbit LED_G = P0^7;    // 绿色LED
  18          
  19          /* 固定延时1毫秒 @35MHz*/
  20          void Delay1ms()   //@35MHz 
  21          {
  22   1        unsigned char i, j;
  23   1      
  24   1        _nop_();
  25   1        _nop_();
  26   1        i = 46;
  27   1        j = 113;
  28   1        do
  29   1        {
  30   2          while (--j);
  31   2        } while (--i);
  32   1      }
  33          
  34          /* n毫秒延时函数 参数给几 就延时几毫秒 */
  35          void delay_ms(unsigned int ms) 
  36          {
  37   1        while(ms--)
  38   1        {
  39   2          Delay1ms();
  40   2        }
  41   1      }
  42          
  43           
  44          #define MAX_TASKS 2       /*任务槽个数.必须和实际任务数一至*/
  45          #define MAX_TASK_DEP 20   /*最大栈深.最低不得少于2个,保守值为12*/
  46          unsigned char idata task_stack[MAX_TASKS][MAX_TASK_DEP];/*任务堆栈.*/
  47          unsigned int task_id;    /*当前活动任务号*/
  48          unsigned int max_task = 0;
  49           
  50          unsigned char idata task_sp[MAX_TASKS];
  51           
  52          void task_switch()
  53          {
  54   1          EA = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 2   

  55   1        
  56   1          task_sp[task_id] = SP;
  57   1          task_id++;
  58   1          if(task_id == max_task)
  59   1          {
  60   2            task_id = 0;
  61   2          }
  62   1          SP = (unsigned int)task_sp[task_id];
  63   1      
  64   1          EA = 1;
  65   1      }
  66           
  67          void task_load(unsigned int fn, int tid)
  68          {
  69   1          task_sp[tid] = (unsigned char)task_stack[tid]+1;
  70   1          task_stack[tid][0] = (unsigned int)fn & 0xff;
  71   1          task_stack[tid][1] = (unsigned int)fn >> 8;
  72   1          ++max_task;
  73   1      }
  74          
  75          void task1()
  76          {
  77   1          while(1)
  78   1          {
  79   2            LED_R = !LED_R;
  80   2      
  81   2            delay_ms(1000);
  82   2      
  83   2            task_switch();
  84   2          }
  85   1      }
  86          
  87          void task2()
  88          {
  89   1          while(1)
  90   1          {
  91   2            LED_Y = !LED_Y;
  92   2      
  93   2            delay_ms(1000);
  94   2      
  95   2            task_switch();
  96   2          }
  97   1      }
  98           
  99          void switch_to(unsigned int tid)
 100          {
 101   1          task_id = tid;
 102   1          SP = (unsigned int)task_sp[tid];
 103   1          return;
 104   1      }
 105          
 106          unsigned int cut = 0;
 107          
 108          void Timer0_Isr(void) interrupt 1
 109          {
 110   1        cut++;
 111   1            printf("Timer0_Isr=%d\n",cut);
 112   1      
 113   1        if(cut == 500)
 114   1        {
 115   2          cut = 0;
 116   2          LED_G = !LED_G;
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 3   

 117   2      
 118   2        }
 119   1      
 120   1        
 121   1      }
 122          // 串口初始化函数 可以使用printf
 123          void Uart1Init(void)  //115200bps@35MHz
 124          {
 125   1        SCON = 0x50;    //8位数据,可变波特率
 126   1        AUXR |= 0x01;   //串口1选择定时器2为波特率发生器
 127   1        AUXR |= 0x04;   //定时器时钟1T模式
 128   1        T2L = 0xE8;     //设置定时初始值
 129   1        T2H = 0xFF;     //设置定时初始值
 130   1        AUXR |= 0x10;   //定时器2开始计时
 131   1       TI = 1; // 加这句话可以使用printf
 132   1      }
 133          void Timer0_Init(void)    //1毫秒@11.0592MHz
 134          {
 135   1        AUXR |= 0x80;     //定时器时钟1T模式
 136   1        TMOD &= 0xF0;     //设置定时器模式
 137   1        TL0 = 0xCD;       //设置定时初始值
 138   1        TH0 = 0xD4;       //设置定时初始值
 139   1        TF0 = 0;        //清除TF0标志
 140   1        TR0 = 1;        //定时器0开始计时
 141   1        ET0 = 1;        //使能定时器0中断
 142   1      }
 143          
 144          
 145          /* 主函数 */
 146          void main()
 147          {
 148   1        P0M0 = 0x00;   //设置P0.0~P0.7为双向口模式
 149   1        P0M1 = 0x00;
 150   1        LED_Y = 0;
 151   1        Timer0_Init();
 152   1        Uart1Init();
 153   1        EA = 0;
 154   1      
 155   1        task_load(task1, 0);//将task1函数装入0号槽
 156   1        task_load(task2, 1);//将task2函数装入1号槽
 157   1        EA = 1;
 158   1      
 159   1        switch_to(0);
 160   1        
 161   1        while(1)
 162   1        {
 163   2      
 164   2        }
 165   1        
 166   1      
 167   1      }
 168          
 169          
 170          
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Delay1ms (BEGIN)
                                           ; SOURCE LINE # 20
                                           ; SOURCE LINE # 21
                                           ; SOURCE LINE # 24
0000 00                NOP     
                                           ; SOURCE LINE # 25
0001 00                NOP     
                                           ; SOURCE LINE # 26
;---- Variable 'i' assigned to Register 'R7' ----
0002 7F2E              MOV     R7,#02EH
                                           ; SOURCE LINE # 27
;---- Variable 'j' assigned to Register 'R6' ----
0004 7E71              MOV     R6,#071H
                                           ; SOURCE LINE # 29
0006         ?C0004:
                                           ; SOURCE LINE # 30
0006 DEFE              DJNZ    R6,?C0004
                                           ; SOURCE LINE # 31
0008 DFFC              DJNZ    R7,?C0004
                                           ; SOURCE LINE # 32
000A 22                RET     
             ; FUNCTION Delay1ms (END)

             ; FUNCTION _delay_ms (BEGIN)
                                           ; SOURCE LINE # 35
;---- Variable 'ms' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 36
0004         ?C0007:
                                           ; SOURCE LINE # 37
0004 ED                MOV     A,R5
0005 1D                DEC     R5
0006 AE04              MOV     R6,AR4
0008 7001              JNZ     ?C0027
000A 1C                DEC     R4
000B         ?C0027:
000B 4E                ORL     A,R6
000C 6005              JZ      ?C0009
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
000E 120000      R     LCALL   Delay1ms
                                           ; SOURCE LINE # 40
0011 80F1              SJMP    ?C0007
                                           ; SOURCE LINE # 41
0013         ?C0009:
0013 22                RET     
             ; FUNCTION _delay_ms (END)

             ; FUNCTION L?0033 (BEGIN)
0000 7FE8              MOV     R7,#0E8H
0002 7E03              MOV     R6,#03H
0004 120000      R     LCALL   _delay_ms
             ; FUNCTION task_switch (BEGIN)
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0007 C2AF              CLR     EA
                                           ; SOURCE LINE # 56
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 5   

0009 7400        R     MOV     A,#LOW task_sp
000B 2500        R     ADD     A,task_id+01H
000D F8                MOV     R0,A
000E A681              MOV     @R0,SP
                                           ; SOURCE LINE # 57
0010 0500        R     INC     task_id+01H
0012 E500        R     MOV     A,task_id+01H
0014 7002              JNZ     ?C0028
0016 0500        R     INC     task_id
0018         ?C0028:
                                           ; SOURCE LINE # 58
0018 B5000A      R     CJNE    A,max_task+01H,?C0010
001B E500        R     MOV     A,task_id
001D B50005      R     CJNE    A,max_task,?C0010
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
0020 E4                CLR     A
0021 F500        R     MOV     task_id,A
0023 F500        R     MOV     task_id+01H,A
                                           ; SOURCE LINE # 61
0025         ?C0010:
                                           ; SOURCE LINE # 62
0025 7400        R     MOV     A,#LOW task_sp
0027 2500        R     ADD     A,task_id+01H
0029 F8                MOV     R0,A
002A E6                MOV     A,@R0
002B F581              MOV     SP,A
                                           ; SOURCE LINE # 64
002D D2AF              SETB    EA
                                           ; SOURCE LINE # 65
002F 22                RET     
             ; FUNCTION task_switch (END)

             ; FUNCTION _task_load (BEGIN)
                                           ; SOURCE LINE # 67
;---- Variable 'tid' assigned to Register 'R4/R5' ----
;---- Variable 'fn' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
0000 ED                MOV     A,R5
0001 75F014            MOV     B,#014H
0004 A4                MUL     AB
0005 2400        R     ADD     A,#LOW task_stack
0007 04                INC     A
0008 FB                MOV     R3,A
0009 7400        R     MOV     A,#LOW task_sp
000B 2D                ADD     A,R5
000C F8                MOV     R0,A
000D A603              MOV     @R0,AR3
                                           ; SOURCE LINE # 70
000F AB07              MOV     R3,AR7
0011 ED                MOV     A,R5
0012 75F014            MOV     B,#014H
0015 A4                MUL     AB
0016 2400        R     ADD     A,#LOW task_stack
0018 F8                MOV     R0,A
0019 A603              MOV     @R0,AR3
                                           ; SOURCE LINE # 71
001B AF06              MOV     R7,AR6
001D ED                MOV     A,R5
001E 75F014            MOV     B,#014H
0021 A4                MUL     AB
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 6   

0022 2400        R     ADD     A,#LOW task_stack+01H
0024 F8                MOV     R0,A
0025 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 72
0027 0500        R     INC     max_task+01H
0029 E500        R     MOV     A,max_task+01H
002B 7002              JNZ     ?C0030
002D 0500        R     INC     max_task
002F         ?C0030:
                                           ; SOURCE LINE # 73
002F 22                RET     
             ; FUNCTION _task_load (END)

             ; FUNCTION task1 (BEGIN)
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0000         ?C0013:
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
0000 B285              CPL     LED_R
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 83
0002 120000      R     LCALL   L?0033
                                           ; SOURCE LINE # 84
0005 80F9              SJMP    ?C0013
             ; FUNCTION task1 (END)

             ; FUNCTION task2 (BEGIN)
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000         ?C0016:
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0000 B286              CPL     LED_Y
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 95
0002 120000      R     LCALL   L?0033
                                           ; SOURCE LINE # 96
0005 80F9              SJMP    ?C0016
             ; FUNCTION task2 (END)

             ; FUNCTION _switch_to (BEGIN)
                                           ; SOURCE LINE # 99
;---- Variable 'tid' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
0000 8E00        R     MOV     task_id,R6
0002 8F00        R     MOV     task_id+01H,R7
                                           ; SOURCE LINE # 102
0004 7400        R     MOV     A,#LOW task_sp
0006 2F                ADD     A,R7
0007 F8                MOV     R0,A
0008 E6                MOV     A,@R0
0009 F581              MOV     SP,A
                                           ; SOURCE LINE # 104
000B 22                RET     
             ; FUNCTION _switch_to (END)

             ; FUNCTION Timer0_Isr (BEGIN)
0000 C0E0              PUSH    ACC
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 7   

0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 110
001D 0500        R     INC     cut+01H
001F E500        R     MOV     A,cut+01H
0021 7002              JNZ     ?C0031
0023 0500        R     INC     cut
0025         ?C0031:
                                           ; SOURCE LINE # 111
0025 7BFF              MOV     R3,#0FFH
0027 7A00        R     MOV     R2,#HIGH ?SC_0
0029 7900        R     MOV     R1,#LOW ?SC_0
002B 850000      E     MOV     ?_printf?BYTE+03H,cut
002E F500        E     MOV     ?_printf?BYTE+04H,A
0030 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 113
0033 E500        R     MOV     A,cut+01H
0035 B4F40D            CJNE    A,#0F4H,?C0021
0038 E500        R     MOV     A,cut
003A B40108            CJNE    A,#01H,?C0021
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
003D 750000      R     MOV     cut,#00H
0040 750000      R     MOV     cut+01H,#00H
                                           ; SOURCE LINE # 116
0043 B287              CPL     LED_G
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 121
0045         ?C0021:
0045 D007              POP     AR7
0047 D006              POP     AR6
0049 D005              POP     AR5
004B D004              POP     AR4
004D D003              POP     AR3
004F D002              POP     AR2
0051 D001              POP     AR1
0053 D000              POP     AR0
0055 D0D0              POP     PSW
0057 D082              POP     DPL
0059 D083              POP     DPH
005B D0F0              POP     B
005D D0E0              POP     ACC
005F 32                RETI    
             ; FUNCTION Timer0_Isr (END)

             ; FUNCTION Uart1Init (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0000 759850            MOV     SCON,#050H
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 8   

                                           ; SOURCE LINE # 126
0003 438E01            ORL     AUXR,#01H
                                           ; SOURCE LINE # 127
0006 438E04            ORL     AUXR,#04H
                                           ; SOURCE LINE # 128
0009 75D7E8            MOV     T2L,#0E8H
                                           ; SOURCE LINE # 129
000C 75D6FF            MOV     T2H,#0FFH
                                           ; SOURCE LINE # 130
000F 438E10            ORL     AUXR,#010H
                                           ; SOURCE LINE # 131
0012 D299              SETB    TI
                                           ; SOURCE LINE # 132
0014 22                RET     
             ; FUNCTION Uart1Init (END)

             ; FUNCTION Timer0_Init (BEGIN)
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
0000 438E80            ORL     AUXR,#080H
                                           ; SOURCE LINE # 136
0003 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 137
0006 758ACD            MOV     TL0,#0CDH
                                           ; SOURCE LINE # 138
0009 758CD4            MOV     TH0,#0D4H
                                           ; SOURCE LINE # 139
000C C28D              CLR     TF0
                                           ; SOURCE LINE # 140
000E D28C              SETB    TR0
                                           ; SOURCE LINE # 141
0010 D2A9              SETB    ET0
                                           ; SOURCE LINE # 142
0012 22                RET     
             ; FUNCTION Timer0_Init (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000 E4                CLR     A
0001 F594              MOV     P0M0,A
                                           ; SOURCE LINE # 149
0003 F593              MOV     P0M1,A
                                           ; SOURCE LINE # 150
0005 C286              CLR     LED_Y
                                           ; SOURCE LINE # 151
0007 120000      R     LCALL   Timer0_Init
                                           ; SOURCE LINE # 152
000A 120000      R     LCALL   Uart1Init
                                           ; SOURCE LINE # 153
000D C2AF              CLR     EA
                                           ; SOURCE LINE # 155
000F 7E00        R     MOV     R6,#HIGH task1
0011 7F00        R     MOV     R7,#LOW task1
0013 FD                MOV     R5,A
0014 FC                MOV     R4,A
0015 120000      R     LCALL   _task_load
                                           ; SOURCE LINE # 156
0018 7E00        R     MOV     R6,#HIGH task2
001A 7F00        R     MOV     R7,#LOW task2
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 17:29:46 PAGE 9   

001C 0D                INC     R5
001D 120000      R     LCALL   _task_load
                                           ; SOURCE LINE # 157
0020 D2AF              SETB    EA
                                           ; SOURCE LINE # 159
0022 E4                CLR     A
0023 FF                MOV     R7,A
0024 FE                MOV     R6,A
0025 120000      R     LCALL   _switch_to
0028         ?C0024:
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 164
0028 80FE              SJMP    ?C0024
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    331    ----
   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =     42    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
