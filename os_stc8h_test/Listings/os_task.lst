C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE OS_TASK
OBJECT MODULE PLACED IN .\Objects\os_task.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE XmRTOS\os_task.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJECTE
                    -XTEND CODE PRINT(.\Listings\os_task.lst) OBJECT(.\Objects\os_task.obj)

line level    source

   1          #include "os_task.h"
   2          // 任务创建、切换、延时文件
   3          
   4          os_uint8_t data task_id = 0;    /*当前活动任务号*/
   5          os_uint8_t max_task = 0;
   6          
   7          /* 任务控制列表 */
   8          struct os_tcb_t xdata tcb_list[MAX_TASKS];
   9          /* 
  10                  公共堆栈
  11                  1、中断压栈会将数据压到这里面，切换任务前需要拷贝到 私有任务堆栈 内
  12                  2、出栈前先将SP指向需要切换的任务控制块的sp内，然后在将 私有任务堆栈 拷贝到公共堆栈中
  13          */
  14          static os_uint8_t idata public_stack[MAX_TASK_DEP];
  15          
  16          /*空闲任务堆栈.*/
  17          os_uint8_t xdata task_idle_stack[MAX_TASK_DEP];         
  18          void os_idle_task(void);
  19          
  20          
  21          /***********************************************************************
  22          *       函数描述：任务调度函数
  23          *       传入参数：
  24          *                               
  25          * 返回参数：
  26          *                               void: 无返回值
  27          ***********************************************************************/
  28          void os_switch(void)
  29          {
  30   1              // 上面中断已经入栈了
  31   1              os_uint8_t  ost_i = 0;
  32   1      
  33   1              // 已经入栈到了公共堆栈内了
  34   1              // 将公共堆栈拷贝到任务堆栈内
  35   1              memcpy(tcb_list[task_id].stack, public_stack,MAX_TASK_DEP);
  36   1              
  37   1              
  38   1              tcb_list[task_id].sp = SP;
  39   1              // 找出就绪态的一个id
  40   1              for(ost_i = 0; ost_i < max_task; ost_i++)
  41   1              {
  42   2                      if(tcb_list[ost_i].os_status_type == OS_READY)
  43   2                      {
  44   3                              task_id = ost_i;
  45   3                              continue;
  46   3      
  47   3                      }
  48   2              }
  49   1              if(task_id == max_task)
  50   1              {
  51   2                      task_id = 0;
  52   2              }
  53   1              // 先将下一个id的sp指向到SP
  54   1              SP = tcb_list[task_id].sp;
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 2   

  55   1      
  56   1              // 将任务堆栈拷贝到公共堆栈里面
  57   1              memcpy(public_stack,tcb_list[task_id].stack,MAX_TASK_DEP);
  58   1              
  59   1      
  60   1              
  61   1              // 下面中断汇编已经出栈
  62   1      }
  63          
  64          /***********************************************************************
  65          *       函数描述：创建一个任务
  66          *       传入参数：
  67          *                               task：          任务函数指针，指向任务的入口函数。
  68          *                               t_stack:        指向任务函数堆栈指针
  69          *                               tid:                    任务槽位置
  70          * 返回参数：
  71          *                               void: 无返回值
  72          ***********************************************************************/
  73          void os_task_create(void(*task)(void), os_uint8_t *t_stack, int tid)
  74          {
  75   1              if((max_task+1) >= MAX_TASKS)
  76   1              {
  77   2                      return;
  78   2              }
  79   1              t_stack[0] = (unsigned int)task & 0xff;         // DPL
  80   1              t_stack[1] = (unsigned int)task >> 8;           // DPH
  81   1      
  82   1              tcb_list[tid].sp                                = (public_stack+1);     // 全部指向这个公共的堆栈
  83   1              tcb_list[tid].os_status_type    = OS_READY;
  84   1      
  85   1              tcb_list[tid].stack = t_stack;
  86   1              
  87   1              
  88   1              max_task++;
  89   1      }
  90          /***********************************************************************
  91          *       函数描述：启动rtos，开始任务调度
  92          *       传入参数：
  93          *                               
  94          * 返回参数：
  95          *                               void: 无返回值
  96          ***********************************************************************/
  97          void os_start(void)
  98          {
  99   1              EA = 0;//关中断
 100   1              // 装载空闲任务
 101   1              os_task_create(os_idle_task, &task_idle_stack, 0);//将task1函数装入0号槽
 102   1              
 103   1              // 空闲任务先运行
 104   1              task_id = 0;
 105   1              // 将任务堆栈拷贝到公共堆栈里面
 106   1              memcpy(public_stack,tcb_list[task_id].stack,MAX_TASK_DEP);
 107   1              
 108   1              SP = tcb_list[task_id].sp;
 109   1              
 110   1      
 111   1              EA = 1;//开中断
 112   1              return;
 113   1      }
 114          
 115          /***********************************************************************
 116          *       函数描述：任务延时函数，调用后马上进行一次任务调度
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 3   

 117          *       传入参数：
 118          *                               tasks：需要延时的滴答数。 滴答一次1ms 
 119          * 返回参数：
 120          *                               void: 无返回值
 121          ***********************************************************************/
 122          void os_delay(os_uint32_t tasks)
 123          {       
 124   1              tasks = tasks;
 125   1              // 设置延时滴答数
 126   1              tcb_list[task_id].delay_tick     =      tasks;
 127   1              // 将任务设置为阻塞态
 128   1              tcb_list[task_id].os_status_type =      OS_BLOCKED;
 129   1              // 只要任务延时了，就马上任务调度
 130   1              os_switch();
 131   1      
 132   1      }
 133          
 134          /***********************************************************************
 135          *       函数描述：空闲任务函数
 136          *       传入参数：
 137          *                               
 138          * 返回参数：
 139          *                               void: 无返回值
 140          ***********************************************************************/
 141          void os_idle_task(void)
 142          {
 143   1              while(1);
 144   1      }
 145          
 146          /***********************************************************************
 147          *       函数描述：系统滴答函数，放入定时器中断中执行。 每次执行代表滴答一次1ms
 148          *       传入参数：
 149          *                               
 150          * 返回参数：
 151          *                               void: 无返回值
 152          ***********************************************************************/
 153          void time_handleHook(void)
 154          {
 155   1              os_uint8_t ti = 0;
 156   1      
 157   1              // 在这里处理遍历延时
 158   1              for(ti = 0; ti<max_task; ti++)
 159   1              {
 160   2                      if(tcb_list[ti].os_status_type != OS_BLOCKED)
 161   2                      {
 162   3                              continue;
 163   3                      }
 164   2                      // 设置延时滴答数
 165   2                      if((tcb_list[ti].delay_tick - 1) == 0)
 166   2                      {
 167   3                              tcb_list[ti].delay_tick = 0;
 168   3                              // 将任务设置为阻塞态
 169   3                              tcb_list[ti].os_status_type = OS_READY;
 170   3                              continue;
 171   3                      }
 172   2                      tcb_list[ti].delay_tick--;
 173   2              }
 174   1              os_switch();
 175   1      }
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION os_switch (BEGIN)
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 31
;---- Variable 'ost_i' assigned to Register 'R7' ----
0000 E4                CLR     A
                                           ; SOURCE LINE # 35
0001 E500        R     MOV     A,task_id
0003 75F00A            MOV     B,#0AH
0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW tcb_list+07H
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH tcb_list+07H
000E F583              MOV     DPH,A
0010 E0                MOVX    A,@DPTR
0011 FB                MOV     R3,A
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FA                MOV     R2,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 F8                MOV     R0,A
0018 AC02              MOV     R4,AR2
001A AD03              MOV     R5,AR3
001C 7B00              MOV     R3,#00H
001E 7A00        R     MOV     R2,#HIGH public_stack
0020 7900        R     MOV     R1,#LOW public_stack
0022 7E00              MOV     R6,#00H
0024 7F14              MOV     R7,#014H
0026 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 38
0029 AF81              MOV     R7,SP
002B E500        R     MOV     A,task_id
002D 75F00A            MOV     B,#0AH
0030 A4                MUL     AB
0031 2400        R     ADD     A,#LOW tcb_list
0033 F582              MOV     DPL,A
0035 E4                CLR     A
0036 3400        R     ADDC    A,#HIGH tcb_list
0038 F583              MOV     DPH,A
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 40
003F E4                CLR     A
0040 FF                MOV     R7,A
0041         ?C0001:
0041 EF                MOV     A,R7
0042 C3                CLR     C
0043 9500        R     SUBB    A,max_task
0045 5017              JNC     ?C0002
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
0047 EF                MOV     A,R7
0048 75F00A            MOV     B,#0AH
004B A4                MUL     AB
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 5   

004C 2400        R     ADD     A,#LOW tcb_list+06H
004E F582              MOV     DPL,A
0050 E4                CLR     A
0051 3400        R     ADDC    A,#HIGH tcb_list+06H
0053 F583              MOV     DPH,A
0055 E0                MOVX    A,@DPTR
0056 B40102            CJNE    A,#01H,?C0003
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
0059 8F00        R     MOV     task_id,R7
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
005B         ?C0003:
005B 0F                INC     R7
005C 80E3              SJMP    ?C0001
005E         ?C0002:
                                           ; SOURCE LINE # 49
005E E500        R     MOV     A,task_id
0060 B50003      R     CJNE    A,max_task,?C0005
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0063 E4                CLR     A
0064 F500        R     MOV     task_id,A
                                           ; SOURCE LINE # 52
0066         ?C0005:
                                           ; SOURCE LINE # 54
0066 E500        R     MOV     A,task_id
0068 75F00A            MOV     B,#0AH
006B A4                MUL     AB
006C 2400        R     ADD     A,#LOW tcb_list
006E F582              MOV     DPL,A
0070 E4                CLR     A
0071 3400        R     ADDC    A,#HIGH tcb_list
0073 F583              MOV     DPH,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 F581              MOV     SP,A
                                           ; SOURCE LINE # 57
0079 E500        R     MOV     A,task_id
007B 75F00A            MOV     B,#0AH
007E A4                MUL     AB
007F 2400        R     ADD     A,#LOW tcb_list+07H
0081 F582              MOV     DPL,A
0083 E4                CLR     A
0084 3400        R     ADDC    A,#HIGH tcb_list+07H
0086 F583              MOV     DPH,A
0088 E0                MOVX    A,@DPTR
0089 FB                MOV     R3,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C FA                MOV     R2,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F F9                MOV     R1,A
0090 7800        R     MOV     R0,#LOW public_stack
0092 7C00        R     MOV     R4,#HIGH public_stack
0094 7D00              MOV     R5,#00H
0096 7E00              MOV     R6,#00H
0098 7F14              MOV     R7,#014H
009A 020000      E     LJMP    ?C?COPY
             ; FUNCTION os_switch (END)
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 6   


             ; FUNCTION _os_task_create (BEGIN)
                                           ; SOURCE LINE # 73
0000 8B00        R     MOV     task,R3
0002 8A00        R     MOV     task+01H,R2
0004 8900        R     MOV     task+02H,R1
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0006 E500        R     MOV     A,max_task
0008 2401              ADD     A,#01H
000A FF                MOV     R7,A
000B E4                CLR     A
000C 33                RLC     A
000D FE                MOV     R6,A
000E C3                CLR     C
000F EF                MOV     A,R7
0010 9405              SUBB    A,#05H
0012 EE                MOV     A,R6
0013 6480              XRL     A,#080H
0015 9480              SUBB    A,#080H
0017 5070              JNC     ?C0008
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
0019 AF01              MOV     R7,AR1
001B EF                MOV     A,R7
001C AB00        R     MOV     R3,t_stack
001E AA00        R     MOV     R2,t_stack+01H
0020 A900        R     MOV     R1,t_stack+02H
0022 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 80
0025 E500        R     MOV     A,task+01H
0027 AB00        R     MOV     R3,t_stack
0029 AA00        R     MOV     R2,t_stack+01H
002B A900        R     MOV     R1,t_stack+02H
002D 900001            MOV     DPTR,#01H
0030 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 82
0033 900000      R     MOV     DPTR,#tcb_list
0036 75F00A            MOV     B,#0AH
0039 E500        R     MOV     A,tid+01H
003B 120000      E     LCALL   ?C?OFFXADD
003E E500        R     MOV     A,tid
0040 75F00A            MOV     B,#0AH
0043 A4                MUL     AB
0044 2583              ADD     A,DPH
0046 F583              MOV     DPH,A
0048 7400        R     MOV     A,#HIGH public_stack+01H
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C 7400        R     MOV     A,#LOW public_stack+01H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
004F 900000      R     MOV     DPTR,#tcb_list+06H
0052 75F00A            MOV     B,#0AH
0055 E500        R     MOV     A,tid+01H
0057 120000      E     LCALL   ?C?OFFXADD
005A E500        R     MOV     A,tid
005C 75F00A            MOV     B,#0AH
005F A4                MUL     AB
0060 2583              ADD     A,DPH
0062 F583              MOV     DPH,A
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 7   

0064 7401              MOV     A,#01H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
0067 900000      R     MOV     DPTR,#tcb_list+07H
006A 75F00A            MOV     B,#0AH
006D E500        R     MOV     A,tid+01H
006F 120000      E     LCALL   ?C?OFFXADD
0072 E500        R     MOV     A,tid
0074 75F00A            MOV     B,#0AH
0077 A4                MUL     AB
0078 2583              ADD     A,DPH
007A F583              MOV     DPH,A
007C E500        R     MOV     A,t_stack
007E F0                MOVX    @DPTR,A
007F A3                INC     DPTR
0080 E500        R     MOV     A,t_stack+01H
0082 F0                MOVX    @DPTR,A
0083 A3                INC     DPTR
0084 E500        R     MOV     A,t_stack+02H
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
0087 0500        R     INC     max_task
                                           ; SOURCE LINE # 89
0089         ?C0008:
0089 22                RET     
             ; FUNCTION _os_task_create (END)

             ; FUNCTION os_start (BEGIN)
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 101
0002 750001      R     MOV     ?_os_task_create?BYTE+03H,#01H
0005 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_idle_stack
0008 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_idle_stack
000B E4                CLR     A
000C F500        R     MOV     ?_os_task_create?BYTE+06H,A
000E F500        R     MOV     ?_os_task_create?BYTE+07H,A
0010 7BFF              MOV     R3,#0FFH
0012 7A00        R     MOV     R2,#HIGH os_idle_task
0014 7900        R     MOV     R1,#LOW os_idle_task
0016 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 104
0019 E4                CLR     A
001A F500        R     MOV     task_id,A
                                           ; SOURCE LINE # 106
001C E500        R     MOV     A,task_id
001E 75F00A            MOV     B,#0AH
0021 A4                MUL     AB
0022 2400        R     ADD     A,#LOW tcb_list+07H
0024 F582              MOV     DPL,A
0026 E4                CLR     A
0027 3400        R     ADDC    A,#HIGH tcb_list+07H
0029 F583              MOV     DPH,A
002B E0                MOVX    A,@DPTR
002C FB                MOV     R3,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FA                MOV     R2,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 8   

0032 F9                MOV     R1,A
0033 7800        R     MOV     R0,#LOW public_stack
0035 7C00        R     MOV     R4,#HIGH public_stack
0037 7D00              MOV     R5,#00H
0039 7E00              MOV     R6,#00H
003B 7F14              MOV     R7,#014H
003D 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 108
0040 E500        R     MOV     A,task_id
0042 75F00A            MOV     B,#0AH
0045 A4                MUL     AB
0046 2400        R     ADD     A,#LOW tcb_list
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        R     ADDC    A,#HIGH tcb_list
004D F583              MOV     DPH,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 F581              MOV     SP,A
                                           ; SOURCE LINE # 111
0053 D2AF              SETB    EA
                                           ; SOURCE LINE # 113
0055 22                RET     
             ; FUNCTION os_start (END)

             ; FUNCTION _os_delay (BEGIN)
                                           ; SOURCE LINE # 122
;---- Variable 'tasks' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
0000 E500        R     MOV     A,task_id
0002 75F00A            MOV     B,#0AH
0005 A4                MUL     AB
0006 2400        R     ADD     A,#LOW tcb_list+02H
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH tcb_list+02H
000D F583              MOV     DPH,A
000F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 128
0012 E500        R     MOV     A,task_id
0014 75F00A            MOV     B,#0AH
0017 A4                MUL     AB
0018 2400        R     ADD     A,#LOW tcb_list+06H
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH tcb_list+06H
001F F583              MOV     DPH,A
0021 7403              MOV     A,#03H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
0024 020000      R     LJMP    os_switch
             ; FUNCTION _os_delay (END)

             ; FUNCTION os_idle_task (BEGIN)
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0000         ?C0011:
                                           ; SOURCE LINE # 143
0000 80FE              SJMP    ?C0011
             ; FUNCTION os_idle_task (END)
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 9   


             ; FUNCTION time_handleHook (BEGIN)
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0000 E4                CLR     A
0001 F500        R     MOV     ti,A
                                           ; SOURCE LINE # 158
0003 F500        R     MOV     ti,A
0005         ?C0014:
0005 E500        R     MOV     A,ti
0007 C3                CLR     C
0008 9500        R     SUBB    A,max_task
000A 4003              JC      $ + 5H
000C 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
000F E500        R     MOV     A,ti
0011 75F00A            MOV     B,#0AH
0014 A4                MUL     AB
0015 2400        R     ADD     A,#LOW tcb_list+06H
0017 F582              MOV     DPL,A
0019 E4                CLR     A
001A 3400        R     ADDC    A,#HIGH tcb_list+06H
001C F583              MOV     DPH,A
001E E0                MOVX    A,@DPTR
001F 6403              XRL     A,#03H
0021 6003              JZ      $ + 5H
0023 020000      R     LJMP    ?C0016
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 165
0026 E500        R     MOV     A,ti
0028 75F00A            MOV     B,#0AH
002B A4                MUL     AB
002C 2400        R     ADD     A,#LOW tcb_list+02H
002E F582              MOV     DPL,A
0030 E4                CLR     A
0031 3400        R     ADDC    A,#HIGH tcb_list+02H
0033 F583              MOV     DPH,A
0035 E0                MOVX    A,@DPTR
0036 FC                MOV     R4,A
0037 A3                INC     DPTR
0038 E0                MOVX    A,@DPTR
0039 FD                MOV     R5,A
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C FE                MOV     R6,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F 24FF              ADD     A,#0FFH
0041 FF                MOV     R7,A
0042 EE                MOV     A,R6
0043 34FF              ADDC    A,#0FFH
0045 FE                MOV     R6,A
0046 ED                MOV     A,R5
0047 34FF              ADDC    A,#0FFH
0049 FD                MOV     R5,A
004A EC                MOV     A,R4
004B 34FF              ADDC    A,#0FFH
004D FC                MOV     R4,A
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 10  

004E E4                CLR     A
004F FB                MOV     R3,A
0050 FA                MOV     R2,A
0051 F9                MOV     R1,A
0052 F8                MOV     R0,A
0053 C3                CLR     C
0054 120000      E     LCALL   ?C?ULCMP
0057 702A              JNZ     ?C0018
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0059 E500        R     MOV     A,ti
005B 75F00A            MOV     B,#0AH
005E A4                MUL     AB
005F 2400        R     ADD     A,#LOW tcb_list+02H
0061 F582              MOV     DPL,A
0063 E4                CLR     A
0064 3400        R     ADDC    A,#HIGH tcb_list+02H
0066 F583              MOV     DPH,A
0068 120000      E     LCALL   ?C?LSTKXDATA
006B 00                DB      00H
006C 00                DB      00H
006D 00                DB      00H
006E 00                DB      00H
                                           ; SOURCE LINE # 169
006F E500        R     MOV     A,ti
0071 75F00A            MOV     B,#0AH
0074 A4                MUL     AB
0075 2400        R     ADD     A,#LOW tcb_list+06H
0077 F582              MOV     DPL,A
0079 E4                CLR     A
007A 3400        R     ADDC    A,#HIGH tcb_list+06H
007C F583              MOV     DPH,A
007E 7401              MOV     A,#01H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
0081 803A              SJMP    ?C0016
                                           ; SOURCE LINE # 171
0083         ?C0018:
                                           ; SOURCE LINE # 172
0083 E500        R     MOV     A,ti
0085 75F00A            MOV     B,#0AH
0088 A4                MUL     AB
0089 2400        R     ADD     A,#LOW tcb_list+02H
008B F582              MOV     DPL,A
008D E4                CLR     A
008E 3400        R     ADDC    A,#HIGH tcb_list+02H
0090 F583              MOV     DPH,A
0092 E0                MOVX    A,@DPTR
0093 FC                MOV     R4,A
0094 A3                INC     DPTR
0095 E0                MOVX    A,@DPTR
0096 FD                MOV     R5,A
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 FE                MOV     R6,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C 24FF              ADD     A,#0FFH
009E FF                MOV     R7,A
009F EE                MOV     A,R6
00A0 34FF              ADDC    A,#0FFH
00A2 FE                MOV     R6,A
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/30/2023 11:11:47 PAGE 11  

00A3 ED                MOV     A,R5
00A4 34FF              ADDC    A,#0FFH
00A6 FD                MOV     R5,A
00A7 EC                MOV     A,R4
00A8 34FF              ADDC    A,#0FFH
00AA FC                MOV     R4,A
00AB E500        R     MOV     A,ti
00AD 75F00A            MOV     B,#0AH
00B0 A4                MUL     AB
00B1 2400        R     ADD     A,#LOW tcb_list+02H
00B3 F582              MOV     DPL,A
00B5 E4                CLR     A
00B6 3400        R     ADDC    A,#HIGH tcb_list+02H
00B8 F583              MOV     DPH,A
00BA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 173
00BD         ?C0016:
00BD 0500        R     INC     ti
00BF 020000      R     LJMP    ?C0014
00C2         ?C0015:
                                           ; SOURCE LINE # 174
00C2 020000      R     LJMP    os_switch
             ; FUNCTION time_handleHook (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    619    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     70    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       9
   IDATA SIZE       =     20    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
