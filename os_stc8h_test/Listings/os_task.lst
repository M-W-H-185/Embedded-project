C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE OS_TASK
OBJECT MODULE PLACED IN .\Objects\os_task.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE XmRTOS\os_task.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS;.\XmRTOS\utils
                    -) DEBUG OBJECTEXTEND CODE PRINT(.\Listings\os_task.lst) OBJECT(.\Objects\os_task.obj)

line level    source

   1          #include "os_task.h"
   2          // 任务创建、切换、延时文件
   3          
   4          os_uint8_t data task_id = 0;    /*当前活动任务号*/
   5          os_uint8_t max_task = 0;
   6          
   7          /* 任务控制列表 */
   8          struct os_tcb_t xdata tcb_list[MAX_TASKS];
   9          /* 
  10                  公共堆栈
  11                  1、中断压栈会将数据压到这里面，切换任务前需要拷贝到 私有任务堆栈 内
  12                  2、出栈前先将SP指向需要切换的任务控制块的sp内，然后在将 私有任务堆栈 拷贝到公共堆栈中
  13          */
  14          static os_uint8_t idata public_stack[MAX_TASK_DEP];
  15          
  16          /*空闲任务堆栈.*/
  17          os_uint8_t xdata task_idle_stack[MAX_TASK_DEP];         
  18          void os_idle_task(void);
  19          
  20          void os_getTaskIdHighPriority(void)
  21          {
  22   1              os_uint8_t  ost_i = 0;
  23   1              // 找出就绪态的一个id
  24   1              for(ost_i = 0; ost_i < MAX_TASKS; ost_i++)
  25   1              {
  26   2                      
  27   2                      if(ost_i == task_id)
  28   2                      {
  29   3                              continue;
  30   3                      }
  31   2                      if( tcb_list[ost_i].os_status_type == OS_READY ) 
  32   2                      {
  33   3                              task_id = ost_i;
  34   3                              break;
  35   3                      }
  36   2              }
  37   1      }
  38          /***********************************************************************
  39          *       函数描述：任务调度函数
  40          *       传入参数：
  41          *                               
  42          * 返回参数：
  43          *                               void: 无返回值
  44          ***********************************************************************/
  45          void os_taskSwtich(void)
  46          {
  47   1              // 上面中断已经入栈了
  48   1      
  49   1      
  50   1              // 已经入栈到了公共堆栈内了
  51   1              // 将公共堆栈拷贝到任务堆栈内
  52   1              memcpy(tcb_list[task_id].stack, public_stack,MAX_TASK_DEP);
  53   1              
  54   1              
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 2   

  55   1              tcb_list[task_id].sp = SP;
  56   1      
  57   1              os_getTaskIdHighPriority();
  58   1              
  59   1              // 先将下一个id的sp指向到SP
  60   1              SP = tcb_list[task_id].sp;
  61   1      
  62   1              // 将任务堆栈拷贝到公共堆栈里面
  63   1              memcpy(public_stack,tcb_list[task_id].stack,MAX_TASK_DEP);
  64   1              
  65   1      
  66   1              
  67   1              // 下面中断汇编已经出栈
  68   1      }
  69          
  70          
  71          
  72          /***********************************************************************
  73          *       函数描述：创建一个任务
  74          *       传入参数：
  75          *                               task：          任务函数指针，指向任务的入口函数。
  76          *                               t_stack:        指向任务函数堆栈指针
  77          *                               tid:            任务槽位置 按照顺序 
  78          * 返回参数：
  79          *                               void: 无返回值
  80          ***********************************************************************/
  81          void os_task_create(void(*task)(void), os_uint8_t *t_stack, int tid)
  82          {
  83   1              if((max_task+1) >= MAX_TASKS - 1)
  84   1              {
  85   2                      return;
  86   2              }
  87   1              t_stack[0] = (unsigned int)task & 0xff;         // DPL
  88   1              t_stack[1] = (unsigned int)task >> 8;           // DPH
  89   1      
  90   1              tcb_list[tid].sp                                = (public_stack+1);     // 全部指向这个公共的堆栈
  91   1              tcb_list[tid].os_status_type    = OS_READY;
  92   1      
  93   1              tcb_list[tid].stack = t_stack;
  94   1              
  95   1              
  96   1              max_task++;
  97   1      }
  98          /***********************************************************************
  99          *       函数描述：启动rtos，开始任务调度
 100          *       传入参数：
 101          *                               
 102          * 返回参数：
 103          *                               void: 无返回值
 104          ***********************************************************************/
 105          void os_start(void)
 106          {
 107   1              EA = 0;//关中断
 108   1              // 装载空闲任务
 109   1              os_task_create(os_idle_task, &task_idle_stack, MAX_TASKS-1);//将task1函数装入MAX_TASKS-1号槽
 110   1              
 111   1              // 空闲任务先运行
 112   1              task_id = MAX_TASKS-1;
 113   1              // 将任务堆栈拷贝到公共堆栈里面
 114   1              memcpy(public_stack,tcb_list[task_id].stack,MAX_TASK_DEP);
 115   1              
 116   1              SP = tcb_list[task_id].sp;
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 3   

 117   1              
 118   1      
 119   1              EA = 1;//开中断
 120   1              return;
 121   1      }
 122          void os_init(void)
 123          {
 124   1              
 125   1              memset(tcb_list, 0, (MAX_TASKS * sizeof(struct os_tcb_t) )  ); // 写入0
 126   1      }
 127          
 128          /***********************************************************************
 129          *       函数描述：任务延时函数，调用后马上进行一次任务调度
 130          *       传入参数：
 131          *                               tasks：需要延时的滴答数。 滴答一次1ms 
 132          * 返回参数：
 133          *                               void: 无返回值
 134          ***********************************************************************/
 135          void os_delay(os_uint32_t tasks)
 136          {       
 137   1              tasks = tasks;
 138   1              // 设置延时滴答数
 139   1              tcb_list[task_id].delay_tick     =      tasks;
 140   1              // 将任务设置为阻塞态
 141   1              tcb_list[task_id].os_status_type =      OS_BLOCKED;
 142   1              // 只要任务延时了，就马上任务调度
 143   1              os_taskSwtich();
 144   1      
 145   1      }
 146          
 147          /***********************************************************************
 148          *       函数描述：空闲任务函数
 149          *       传入参数：
 150          *                               
 151          * 返回参数：
 152          *                               void: 无返回值
 153          ***********************************************************************/
 154          void os_idle_task(void)
 155          {
 156   1              while(1)
 157   1              {
 158   2                      
 159   2              }
 160   1      }
 161          
 162          /***********************************************************************
 163          *       函数描述：系统滴答函数，放入定时器中断中执行。 每次执行代表滴答一次1ms
 164          *       传入参数：
 165          *                               
 166          * 返回参数：
 167          *                               void: 无返回值
 168          ***********************************************************************/
 169          void time_handleHook(void)
 170          {
 171   1              os_uint8_t ti = 0;
 172   1      
 173   1              // 在这里处理遍历延时
 174   1              for(ti = 0; ti<MAX_TASKS; ti++)
 175   1              {
 176   2                      if(tcb_list[ti].os_status_type != OS_BLOCKED)
 177   2                      {
 178   3                              continue;
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 4   

 179   3                      }
 180   2                      // 设置延时滴答数
 181   2                      if((tcb_list[ti].delay_tick - 1) == 0)
 182   2                      {
 183   3                              tcb_list[ti].delay_tick = 0;
 184   3                              // 将任务设置为阻塞态
 185   3                              tcb_list[ti].os_status_type = OS_READY;
 186   3                              continue;
 187   3                      }
 188   2                      tcb_list[ti].delay_tick--;
 189   2              }
 190   1              os_taskSwtich();
 191   1      }
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION os_getTaskIdHighPriority (BEGIN)
                                           ; SOURCE LINE # 20
                                           ; SOURCE LINE # 21
                                           ; SOURCE LINE # 22
;---- Variable 'ost_i' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 24
0002         ?C0001:
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 27
0002 EF                MOV     A,R7
0003 6500        R     XRL     A,task_id
0005 6015              JZ      ?C0003
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
0007 EF                MOV     A,R7
0008 75F00A            MOV     B,#0AH
000B A4                MUL     AB
000C 2400        R     ADD     A,#LOW tcb_list+06H
000E F582              MOV     DPL,A
0010 E4                CLR     A
0011 3400        R     ADDC    A,#HIGH tcb_list+06H
0013 F583              MOV     DPH,A
0015 E0                MOVX    A,@DPTR
0016 B40103            CJNE    A,#01H,?C0003
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
0019 8F00        R     MOV     task_id,R7
                                           ; SOURCE LINE # 34
001B 22                RET     
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
001C         ?C0003:
001C 0F                INC     R7
001D BF06E2            CJNE    R7,#06H,?C0001
                                           ; SOURCE LINE # 37
0020         ?C0006:
0020 22                RET     
             ; FUNCTION os_getTaskIdHighPriority (END)

             ; FUNCTION os_taskSwtich (BEGIN)
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 52
0000 E500        R     MOV     A,task_id
0002 75F00A            MOV     B,#0AH
0005 A4                MUL     AB
0006 2400        R     ADD     A,#LOW tcb_list+07H
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH tcb_list+07H
000D F583              MOV     DPH,A
000F E0                MOVX    A,@DPTR
0010 FB                MOV     R3,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 6   

0013 FA                MOV     R2,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 F8                MOV     R0,A
0017 AC02              MOV     R4,AR2
0019 AD03              MOV     R5,AR3
001B 7B00              MOV     R3,#00H
001D 7A00        R     MOV     R2,#HIGH public_stack
001F 7900        R     MOV     R1,#LOW public_stack
0021 7E00              MOV     R6,#00H
0023 7F14              MOV     R7,#014H
0025 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 55
0028 AF81              MOV     R7,SP
002A E500        R     MOV     A,task_id
002C 75F00A            MOV     B,#0AH
002F A4                MUL     AB
0030 2400        R     ADD     A,#LOW tcb_list
0032 F582              MOV     DPL,A
0034 E4                CLR     A
0035 3400        R     ADDC    A,#HIGH tcb_list
0037 F583              MOV     DPH,A
0039 E4                CLR     A
003A F0                MOVX    @DPTR,A
003B A3                INC     DPTR
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
003E 120000      R     LCALL   os_getTaskIdHighPriority
                                           ; SOURCE LINE # 60
0041 E500        R     MOV     A,task_id
0043 75F00A            MOV     B,#0AH
0046 A4                MUL     AB
0047 2400        R     ADD     A,#LOW tcb_list
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        R     ADDC    A,#HIGH tcb_list
004E F583              MOV     DPH,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 F581              MOV     SP,A
                                           ; SOURCE LINE # 63
0054 E500        R     MOV     A,task_id
0056 75F00A            MOV     B,#0AH
0059 A4                MUL     AB
005A 2400        R     ADD     A,#LOW tcb_list+07H
005C F582              MOV     DPL,A
005E E4                CLR     A
005F 3400        R     ADDC    A,#HIGH tcb_list+07H
0061 F583              MOV     DPH,A
0063 E0                MOVX    A,@DPTR
0064 FB                MOV     R3,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 FA                MOV     R2,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F9                MOV     R1,A
006B 7800        R     MOV     R0,#LOW public_stack
006D 7C00        R     MOV     R4,#HIGH public_stack
006F 7D00              MOV     R5,#00H
0071 7E00              MOV     R6,#00H
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 7   

0073 7F14              MOV     R7,#014H
0075 020000      E     LJMP    ?C?COPY
             ; FUNCTION os_taskSwtich (END)

             ; FUNCTION _os_task_create (BEGIN)
                                           ; SOURCE LINE # 81
0000 8B00        R     MOV     task,R3
0002 8A00        R     MOV     task+01H,R2
0004 8900        R     MOV     task+02H,R1
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
0006 E500        R     MOV     A,max_task
0008 2401              ADD     A,#01H
000A FF                MOV     R7,A
000B E4                CLR     A
000C 33                RLC     A
000D FE                MOV     R6,A
000E C3                CLR     C
000F EF                MOV     A,R7
0010 9405              SUBB    A,#05H
0012 EE                MOV     A,R6
0013 6480              XRL     A,#080H
0015 9480              SUBB    A,#080H
0017 5070              JNC     ?C0009
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
0019 AF01              MOV     R7,AR1
001B EF                MOV     A,R7
001C AB00        R     MOV     R3,t_stack
001E AA00        R     MOV     R2,t_stack+01H
0020 A900        R     MOV     R1,t_stack+02H
0022 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 88
0025 E500        R     MOV     A,task+01H
0027 AB00        R     MOV     R3,t_stack
0029 AA00        R     MOV     R2,t_stack+01H
002B A900        R     MOV     R1,t_stack+02H
002D 900001            MOV     DPTR,#01H
0030 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 90
0033 900000      R     MOV     DPTR,#tcb_list
0036 75F00A            MOV     B,#0AH
0039 E500        R     MOV     A,tid+01H
003B 120000      E     LCALL   ?C?OFFXADD
003E E500        R     MOV     A,tid
0040 75F00A            MOV     B,#0AH
0043 A4                MUL     AB
0044 2583              ADD     A,DPH
0046 F583              MOV     DPH,A
0048 7400        R     MOV     A,#HIGH public_stack+01H
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C 7400        R     MOV     A,#LOW public_stack+01H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
004F 900000      R     MOV     DPTR,#tcb_list+06H
0052 75F00A            MOV     B,#0AH
0055 E500        R     MOV     A,tid+01H
0057 120000      E     LCALL   ?C?OFFXADD
005A E500        R     MOV     A,tid
005C 75F00A            MOV     B,#0AH
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 8   

005F A4                MUL     AB
0060 2583              ADD     A,DPH
0062 F583              MOV     DPH,A
0064 7401              MOV     A,#01H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0067 900000      R     MOV     DPTR,#tcb_list+07H
006A 75F00A            MOV     B,#0AH
006D E500        R     MOV     A,tid+01H
006F 120000      E     LCALL   ?C?OFFXADD
0072 E500        R     MOV     A,tid
0074 75F00A            MOV     B,#0AH
0077 A4                MUL     AB
0078 2583              ADD     A,DPH
007A F583              MOV     DPH,A
007C E500        R     MOV     A,t_stack
007E F0                MOVX    @DPTR,A
007F A3                INC     DPTR
0080 E500        R     MOV     A,t_stack+01H
0082 F0                MOVX    @DPTR,A
0083 A3                INC     DPTR
0084 E500        R     MOV     A,t_stack+02H
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0087 0500        R     INC     max_task
                                           ; SOURCE LINE # 97
0089         ?C0009:
0089 22                RET     
             ; FUNCTION _os_task_create (END)

             ; FUNCTION os_start (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 109
0002 750001      R     MOV     ?_os_task_create?BYTE+03H,#01H
0005 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_idle_stack
0008 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_idle_stack
000B 750000      R     MOV     ?_os_task_create?BYTE+06H,#00H
000E 750005      R     MOV     ?_os_task_create?BYTE+07H,#05H
0011 7BFF              MOV     R3,#0FFH
0013 7A00        R     MOV     R2,#HIGH os_idle_task
0015 7900        R     MOV     R1,#LOW os_idle_task
0017 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 112
001A 750005      R     MOV     task_id,#05H
                                           ; SOURCE LINE # 114
001D E500        R     MOV     A,task_id
001F 75F00A            MOV     B,#0AH
0022 A4                MUL     AB
0023 2400        R     ADD     A,#LOW tcb_list+07H
0025 F582              MOV     DPL,A
0027 E4                CLR     A
0028 3400        R     ADDC    A,#HIGH tcb_list+07H
002A F583              MOV     DPH,A
002C E0                MOVX    A,@DPTR
002D FB                MOV     R3,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FA                MOV     R2,A
0031 A3                INC     DPTR
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 9   

0032 E0                MOVX    A,@DPTR
0033 F9                MOV     R1,A
0034 7800        R     MOV     R0,#LOW public_stack
0036 7C00        R     MOV     R4,#HIGH public_stack
0038 7D00              MOV     R5,#00H
003A 7E00              MOV     R6,#00H
003C 7F14              MOV     R7,#014H
003E 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 116
0041 E500        R     MOV     A,task_id
0043 75F00A            MOV     B,#0AH
0046 A4                MUL     AB
0047 2400        R     ADD     A,#LOW tcb_list
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        R     ADDC    A,#HIGH tcb_list
004E F583              MOV     DPH,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 F581              MOV     SP,A
                                           ; SOURCE LINE # 119
0054 D2AF              SETB    EA
                                           ; SOURCE LINE # 121
0056 22                RET     
             ; FUNCTION os_start (END)

             ; FUNCTION os_init (BEGIN)
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 125
0000 7E00              MOV     R6,#00H
0002 7F3C              MOV     R7,#03CH
0004 7D00              MOV     R5,#00H
0006 7B01              MOV     R3,#01H
0008 7A00        R     MOV     R2,#HIGH tcb_list
000A 7900        R     MOV     R1,#LOW tcb_list
000C 020000      E     LJMP    ?C?MEMSET
             ; FUNCTION os_init (END)

             ; FUNCTION _os_delay (BEGIN)
                                           ; SOURCE LINE # 135
;---- Variable 'tasks' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 139
0000 E500        R     MOV     A,task_id
0002 75F00A            MOV     B,#0AH
0005 A4                MUL     AB
0006 2400        R     ADD     A,#LOW tcb_list+02H
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH tcb_list+02H
000D F583              MOV     DPH,A
000F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 141
0012 E500        R     MOV     A,task_id
0014 75F00A            MOV     B,#0AH
0017 A4                MUL     AB
0018 2400        R     ADD     A,#LOW tcb_list+06H
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH tcb_list+06H
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 10  

001F F583              MOV     DPH,A
0021 7403              MOV     A,#03H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0024 020000      R     LJMP    os_taskSwtich
             ; FUNCTION _os_delay (END)

             ; FUNCTION os_idle_task (BEGIN)
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0000         ?C0013:
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 159
0000 80FE              SJMP    ?C0013
             ; FUNCTION os_idle_task (END)

             ; FUNCTION time_handleHook (BEGIN)
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0000 E4                CLR     A
0001 F500        R     MOV     ti,A
                                           ; SOURCE LINE # 174
0003 F500        R     MOV     ti,A
0005         ?C0016:
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0005 E500        R     MOV     A,ti
0007 75F00A            MOV     B,#0AH
000A A4                MUL     AB
000B 2400        R     ADD     A,#LOW tcb_list+06H
000D F582              MOV     DPL,A
000F E4                CLR     A
0010 3400        R     ADDC    A,#HIGH tcb_list+06H
0012 F583              MOV     DPH,A
0014 E0                MOVX    A,@DPTR
0015 6403              XRL     A,#03H
0017 6003              JZ      $ + 5H
0019 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 181
001C E500        R     MOV     A,ti
001E 75F00A            MOV     B,#0AH
0021 A4                MUL     AB
0022 2400        R     ADD     A,#LOW tcb_list+02H
0024 F582              MOV     DPL,A
0026 E4                CLR     A
0027 3400        R     ADDC    A,#HIGH tcb_list+02H
0029 F583              MOV     DPH,A
002B E0                MOVX    A,@DPTR
002C FC                MOV     R4,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 11  

0035 24FF              ADD     A,#0FFH
0037 FF                MOV     R7,A
0038 EE                MOV     A,R6
0039 34FF              ADDC    A,#0FFH
003B FE                MOV     R6,A
003C ED                MOV     A,R5
003D 34FF              ADDC    A,#0FFH
003F FD                MOV     R5,A
0040 EC                MOV     A,R4
0041 34FF              ADDC    A,#0FFH
0043 FC                MOV     R4,A
0044 E4                CLR     A
0045 FB                MOV     R3,A
0046 FA                MOV     R2,A
0047 F9                MOV     R1,A
0048 F8                MOV     R0,A
0049 C3                CLR     C
004A 120000      E     LCALL   ?C?ULCMP
004D 702A              JNZ     ?C0020
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
004F E500        R     MOV     A,ti
0051 75F00A            MOV     B,#0AH
0054 A4                MUL     AB
0055 2400        R     ADD     A,#LOW tcb_list+02H
0057 F582              MOV     DPL,A
0059 E4                CLR     A
005A 3400        R     ADDC    A,#HIGH tcb_list+02H
005C F583              MOV     DPH,A
005E 120000      E     LCALL   ?C?LSTKXDATA
0061 00                DB      00H
0062 00                DB      00H
0063 00                DB      00H
0064 00                DB      00H
                                           ; SOURCE LINE # 185
0065 E500        R     MOV     A,ti
0067 75F00A            MOV     B,#0AH
006A A4                MUL     AB
006B 2400        R     ADD     A,#LOW tcb_list+06H
006D F582              MOV     DPL,A
006F E4                CLR     A
0070 3400        R     ADDC    A,#HIGH tcb_list+06H
0072 F583              MOV     DPH,A
0074 7401              MOV     A,#01H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0077 803A              SJMP    ?C0018
                                           ; SOURCE LINE # 187
0079         ?C0020:
                                           ; SOURCE LINE # 188
0079 E500        R     MOV     A,ti
007B 75F00A            MOV     B,#0AH
007E A4                MUL     AB
007F 2400        R     ADD     A,#LOW tcb_list+02H
0081 F582              MOV     DPL,A
0083 E4                CLR     A
0084 3400        R     ADDC    A,#HIGH tcb_list+02H
0086 F583              MOV     DPH,A
0088 E0                MOVX    A,@DPTR
0089 FC                MOV     R4,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
C51 COMPILER V9.60.7.0   OS_TASK                                                           01/02/2024 16:55:54 PAGE 12  

008C FD                MOV     R5,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F FE                MOV     R6,A
0090 A3                INC     DPTR
0091 E0                MOVX    A,@DPTR
0092 24FF              ADD     A,#0FFH
0094 FF                MOV     R7,A
0095 EE                MOV     A,R6
0096 34FF              ADDC    A,#0FFH
0098 FE                MOV     R6,A
0099 ED                MOV     A,R5
009A 34FF              ADDC    A,#0FFH
009C FD                MOV     R5,A
009D EC                MOV     A,R4
009E 34FF              ADDC    A,#0FFH
00A0 FC                MOV     R4,A
00A1 E500        R     MOV     A,ti
00A3 75F00A            MOV     B,#0AH
00A6 A4                MUL     AB
00A7 2400        R     ADD     A,#LOW tcb_list+02H
00A9 F582              MOV     DPL,A
00AB E4                CLR     A
00AC 3400        R     ADDC    A,#HIGH tcb_list+02H
00AE F583              MOV     DPH,A
00B0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 189
00B3         ?C0018:
00B3 0500        R     INC     ti
00B5 E500        R     MOV     A,ti
00B7 6406              XRL     A,#06H
00B9 6003              JZ      $ + 5H
00BB 020000      R     LJMP    ?C0016
00BE         ?C0017:
                                           ; SOURCE LINE # 190
00BE 020000      R     LJMP    os_taskSwtich
             ; FUNCTION time_handleHook (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    627    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     80    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       9
   IDATA SIZE       =     20    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
