C51 COMPILER V9.60.7.0   OS_TASK                                                           12/28/2023 15:49:27 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE OS_TASK
OBJECT MODULE PLACED IN .\Objects\os_task.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE XmRTOS\os_task.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJECTE
                    -XTEND CODE PRINT(.\Listings\os_task.lst) OBJECT(.\Objects\os_task.obj)

line level    source

   1          #include "os_task.h"
   2          
   3          #include "stc8g.h"
   4          #include "intrins.h"
   5          #include "stdio.h"
   6          
   7          enum OS_TASK_STATUS_TYPE
   8          {
   9                  OS_READY      = 1,      // ¾ÍĞ÷Ì¬
  10                  OS_RUNING     = 2,      // ÔËĞĞÌ¬
  11                  OS_BLOCKED    = 3,      // ×èÈûÌ¬
  12                  OS_SUSPENDED  = 4       // Í£Ö¹Ì¬
  13          
  14          };
  15          
  16          // ÈÎÎñ¿ØÖÆ¿é
  17          typedef struct os_tcb_t
  18          {
  19                  os_uint8_t                      sp;                                     // sp ¶ÑÕ»Ö¸Õë´æ´¢
  20                  os_uint32_t             delay_tick;                     // ÑÓÊ±µÎ´ğÊı
  21                  os_uint8_t                      os_status_type;         // ÈÎÎñ×´Ì¬
  22                  os_uint8_t                      *stack;                         // ÈÎÎñ¶ÑÕ»
  23          
  24          };
  25          
  26          os_uint8_t data task_id = 0;    /*µ±Ç°»î¶¯ÈÎÎñºÅ*/
  27          os_uint8_t max_task = 0;
  28          
  29          /* ÈÎÎñ¿ØÖÆÁĞ±í */
  30          struct os_tcb_t idata tcb_list[MAX_TASKS];
  31          /*¿ÕÏĞÈÎÎñ¶ÑÕ».*/
  32          os_uint8_t idata task_idle_stack[MAX_TASK_DEP];         
  33          
  34          
  35          // ÈÎÎñÇĞ»»º¯Êı
  36          void os_switch()
  37          {
  38   1              // ÉÏÃæÖĞ¶ÏÒÑ¾­ÈëÕ»ÁË
  39   1              os_uint8_t  ost_i = 0;
  40   1      
  41   1              
  42   1              
  43   1              tcb_list[task_id].sp = SP;
  44   1              // ÕÒ³ö¾ÍĞ÷Ì¬µÄÒ»¸öid
  45   1              for(ost_i = 0; ost_i < max_task; ost_i++)
  46   1              {
  47   2                      if(tcb_list[ost_i].os_status_type == OS_READY)
  48   2                      {
  49   3                              task_id = ost_i;
  50   3                              continue;
  51   3      
  52   3                      }
  53   2              }
  54   1              if(task_id == max_task)
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/28/2023 15:49:27 PAGE 2   

  55   1              {
  56   2                      task_id = 0;
  57   2              }
  58   1          SP = tcb_list[task_id].sp;
  59   1      
  60   1              
  61   1              // ÏÂÃæÖĞ¶Ï»ã±àÒÑ¾­³öÕ»
  62   1      }
  63           
  64          void os_task_create(void(*task)(void) ,os_uint8_t *tstack,int tid)
  65          {
  66   1      
  67   1              tstack[0] = (unsigned int)task & 0xff;          // DPL
  68   1              tstack[1] = (unsigned int)task >> 8;            // DPH
  69   1      
  70   1              tcb_list[tid].sp                                = tstack + 1;   // ÕâÀï¼Ó4Êµ¼ÊÉÏ¾ÍÊÇÈ¡ÁË½«taskck[4]µÄµØÖ·±£´æÁË¡£spÖ¸ÏòËü¾ÍÏàµ±ÓÚÖ¸ÏòÁ
             -ËÈÎÎñº¯Êı
*** WARNING C260 IN LINE 70 OF XmRTOS\os_task.c: '=': pointer truncation
  71   1              tcb_list[tid].os_status_type    = OS_READY;
  72   1              tcb_list[tid].stack                     = tstack ;
  73   1              
  74   1              
  75   1              
  76   1              
  77   1              
  78   1              
  79   1              max_task++;
  80   1      }
  81          void os_idle_task(void);
  82          
  83          void os_start()
  84          {
  85   1              EA = 0;//¹ØÖĞ¶Ï
  86   1              // ×°ÔØ¿ÕÏĞÈÎÎñ
  87   1              os_task_create(os_idle_task, &task_idle_stack, 0);//½«task1º¯Êı×°Èë0ºÅ²Û
  88   1              
  89   1              // ¿ÕÏĞÈÎÎñÏÈÔËĞĞ
  90   1              task_id = 0;
  91   1              SP = tcb_list[task_id].sp;
  92   1              
  93   1      
  94   1              EA = 1;//¿ªÖĞ¶Ï
  95   1              return;
  96   1      }
  97          
  98          
  99          // ÈÎÎñÑÓÊ±º¯Êı
 100          void os_delay(os_uint32_t tasks)
 101          {       
 102   1              tasks = tasks;
 103   1              // ÉèÖÃÑÓÊ±µÎ´ğÊı
 104   1              tcb_list[task_id].delay_tick     =      tasks;
 105   1              // ½«ÈÎÎñÉèÖÃÎª×èÈûÌ¬
 106   1              tcb_list[task_id].os_status_type =      OS_BLOCKED;
 107   1              // Ö»ÒªÈÎÎñÑÓÊ±ÁË£¬¾ÍÂíÉÏÇĞ»»³öÈ¥
 108   1              os_switch();
 109   1      
 110   1      }
 111          // ¿ÕÏĞº¯Êı
 112          void os_idle_task(void)
 113          {
 114   1              while(1);
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/28/2023 15:49:27 PAGE 3   

 115   1      }
 116          void time_handleHook(void)
 117          {
 118   1              os_uint8_t ti = 0;
 119   1      
 120   1              // ÔÚÕâÀï´¦Àí±éÀúÑÓÊ±
 121   1              for(ti = 0; ti<max_task; ti++)
 122   1              {
 123   2                      if(tcb_list[ti].os_status_type != OS_BLOCKED)
 124   2                      {
 125   3                              continue;
 126   3                      }
 127   2                      // ÉèÖÃÑÓÊ±µÎ´ğÊı
 128   2                      if((tcb_list[ti].delay_tick - 1) == 0)
 129   2                      {
 130   3                              tcb_list[ti].delay_tick = 0;
 131   3                              // ½«ÈÎÎñÉèÖÃÎª×èÈûÌ¬
 132   3                              tcb_list[ti].os_status_type = OS_READY;
 133   3                              continue;
 134   3                      }
 135   2                      tcb_list[ti].delay_tick--;
 136   2              }
 137   1              os_switch();
 138   1      }
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/28/2023 15:49:27 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION os_switch (BEGIN)
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 39
;---- Variable 'ost_i' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 43
0002 E500        R     MOV     A,task_id
0004 75F009            MOV     B,#09H
0007 A4                MUL     AB
0008 2400        R     ADD     A,#LOW tcb_list
000A F8                MOV     R0,A
000B A681              MOV     @R0,SP
                                           ; SOURCE LINE # 45
000D         ?C0001:
000D EF                MOV     A,R7
000E C3                CLR     C
000F 9500        R     SUBB    A,max_task
0011 5011              JNC     ?C0002
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0013 EF                MOV     A,R7
0014 75F009            MOV     B,#09H
0017 A4                MUL     AB
0018 2400        R     ADD     A,#LOW tcb_list+05H
001A F8                MOV     R0,A
001B E6                MOV     A,@R0
001C B40102            CJNE    A,#01H,?C0003
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
001F 8F00        R     MOV     task_id,R7
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
0021         ?C0003:
0021 0F                INC     R7
0022 80E9              SJMP    ?C0001
0024         ?C0002:
                                           ; SOURCE LINE # 54
0024 E500        R     MOV     A,task_id
0026 B50003      R     CJNE    A,max_task,?C0005
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0029 E4                CLR     A
002A F500        R     MOV     task_id,A
                                           ; SOURCE LINE # 57
002C         ?C0005:
                                           ; SOURCE LINE # 58
002C E500        R     MOV     A,task_id
002E 75F009            MOV     B,#09H
0031 A4                MUL     AB
0032 2400        R     ADD     A,#LOW tcb_list
0034 F8                MOV     R0,A
0035 E6                MOV     A,@R0
0036 F581              MOV     SP,A
                                           ; SOURCE LINE # 62
0038 22                RET     
             ; FUNCTION os_switch (END)
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/28/2023 15:49:27 PAGE 5   


             ; FUNCTION _os_task_create (BEGIN)
                                           ; SOURCE LINE # 64
0000 8B00        R     MOV     task,R3
0002 8A00        R     MOV     task+01H,R2
0004 8900        R     MOV     task+02H,R1
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 67
0006 AF01              MOV     R7,AR1
0008 EF                MOV     A,R7
0009 AB00        R     MOV     R3,tstack
000B AA00        R     MOV     R2,tstack+01H
000D A900        R     MOV     R1,tstack+02H
000F 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 68
0012 E500        R     MOV     A,task+01H
0014 AB00        R     MOV     R3,tstack
0016 AA00        R     MOV     R2,tstack+01H
0018 A900        R     MOV     R1,tstack+02H
001A 900001            MOV     DPTR,#01H
001D 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 70
0020 E9                MOV     A,R1
0021 2401              ADD     A,#01H
0023 F9                MOV     R1,A
0024 E4                CLR     A
0025 3A                ADDC    A,R2
0026 AE00        R     MOV     R6,tid+01H
0028 EE                MOV     A,R6
0029 75F009            MOV     B,#09H
002C A4                MUL     AB
002D 2400        R     ADD     A,#LOW tcb_list
002F F8                MOV     R0,A
0030 A601              MOV     @R0,AR1
                                           ; SOURCE LINE # 71
0032 EE                MOV     A,R6
0033 75F009            MOV     B,#09H
0036 A4                MUL     AB
0037 2400        R     ADD     A,#LOW tcb_list+05H
0039 F8                MOV     R0,A
003A 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 72
003C AA00        R     MOV     R2,tstack+01H
003E A900        R     MOV     R1,tstack+02H
0040 EE                MOV     A,R6
0041 75F009            MOV     B,#09H
0044 A4                MUL     AB
0045 2400        R     ADD     A,#LOW tcb_list+06H
0047 F8                MOV     R0,A
0048 A600        R     MOV     @R0,tstack
004A 08                INC     R0
004B A602              MOV     @R0,AR2
004D 08                INC     R0
004E A601              MOV     @R0,AR1
                                           ; SOURCE LINE # 79
0050 0500        R     INC     max_task
                                           ; SOURCE LINE # 80
0052 22                RET     
             ; FUNCTION _os_task_create (END)

             ; FUNCTION os_start (BEGIN)
                                           ; SOURCE LINE # 83
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/28/2023 15:49:27 PAGE 6   

                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 87
0002 750000      R     MOV     ?_os_task_create?BYTE+03H,#00H
0005 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_idle_stack
0008 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_idle_stack
000B E4                CLR     A
000C F500        R     MOV     ?_os_task_create?BYTE+06H,A
000E F500        R     MOV     ?_os_task_create?BYTE+07H,A
0010 7BFF              MOV     R3,#0FFH
0012 7A00        R     MOV     R2,#HIGH os_idle_task
0014 7900        R     MOV     R1,#LOW os_idle_task
0016 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 90
0019 E4                CLR     A
001A F500        R     MOV     task_id,A
                                           ; SOURCE LINE # 91
001C E500        R     MOV     A,task_id
001E 75F009            MOV     B,#09H
0021 A4                MUL     AB
0022 2400        R     ADD     A,#LOW tcb_list
0024 F8                MOV     R0,A
0025 E6                MOV     A,@R0
0026 F581              MOV     SP,A
                                           ; SOURCE LINE # 94
0028 D2AF              SETB    EA
                                           ; SOURCE LINE # 96
002A 22                RET     
             ; FUNCTION os_start (END)

             ; FUNCTION _os_delay (BEGIN)
                                           ; SOURCE LINE # 100
;---- Variable 'tasks' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 104
0000 E500        R     MOV     A,task_id
0002 75F009            MOV     B,#09H
0005 A4                MUL     AB
0006 2400        R     ADD     A,#LOW tcb_list+01H
0008 F8                MOV     R0,A
0009 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 106
000C E500        R     MOV     A,task_id
000E 75F009            MOV     B,#09H
0011 A4                MUL     AB
0012 2400        R     ADD     A,#LOW tcb_list+05H
0014 F8                MOV     R0,A
0015 7603              MOV     @R0,#03H
                                           ; SOURCE LINE # 108
0017 020000      R     LJMP    os_switch
             ; FUNCTION _os_delay (END)

             ; FUNCTION os_idle_task (BEGIN)
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
0000         ?C0010:
                                           ; SOURCE LINE # 114
0000 80FE              SJMP    ?C0010
             ; FUNCTION os_idle_task (END)

C51 COMPILER V9.60.7.0   OS_TASK                                                           12/28/2023 15:49:27 PAGE 7   

             ; FUNCTION time_handleHook (BEGIN)
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0000 E4                CLR     A
0001 F500        R     MOV     ti,A
                                           ; SOURCE LINE # 121
0003 F500        R     MOV     ti,A
0005         ?C0013:
0005 E500        R     MOV     A,ti
0007 C3                CLR     C
0008 9500        R     SUBB    A,max_task
000A 4003              JC      $ + 5H
000C 020000      R     LJMP    ?C0014
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
000F E500        R     MOV     A,ti
0011 75F009            MOV     B,#09H
0014 A4                MUL     AB
0015 2400        R     ADD     A,#LOW tcb_list+05H
0017 F8                MOV     R0,A
0018 E6                MOV     A,@R0
0019 6403              XRL     A,#03H
001B 706C              JNZ     ?C0015
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 128
001D E500        R     MOV     A,ti
001F 75F009            MOV     B,#09H
0022 A4                MUL     AB
0023 2400        R     ADD     A,#LOW tcb_list+01H
0025 F8                MOV     R0,A
0026 120000      E     LCALL   ?C?LLDIDATA
0029 EF                MOV     A,R7
002A 24FF              ADD     A,#0FFH
002C FF                MOV     R7,A
002D EE                MOV     A,R6
002E 34FF              ADDC    A,#0FFH
0030 FE                MOV     R6,A
0031 ED                MOV     A,R5
0032 34FF              ADDC    A,#0FFH
0034 FD                MOV     R5,A
0035 EC                MOV     A,R4
0036 34FF              ADDC    A,#0FFH
0038 FC                MOV     R4,A
0039 E4                CLR     A
003A FB                MOV     R3,A
003B FA                MOV     R2,A
003C F9                MOV     R1,A
003D F8                MOV     R0,A
003E C3                CLR     C
003F 120000      E     LCALL   ?C?ULCMP
0042 701D              JNZ     ?C0017
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0044 E500        R     MOV     A,ti
0046 75F009            MOV     B,#09H
0049 A4                MUL     AB
004A 2400        R     ADD     A,#LOW tcb_list+01H
004C F8                MOV     R0,A
004D 120000      E     LCALL   ?C?LSTKIDATA
C51 COMPILER V9.60.7.0   OS_TASK                                                           12/28/2023 15:49:27 PAGE 8   

0050 00                DB      00H
0051 00                DB      00H
0052 00                DB      00H
0053 00                DB      00H
                                           ; SOURCE LINE # 132
0054 E500        R     MOV     A,ti
0056 75F009            MOV     B,#09H
0059 A4                MUL     AB
005A 2400        R     ADD     A,#LOW tcb_list+05H
005C F8                MOV     R0,A
005D 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 133
005F 8028              SJMP    ?C0015
                                           ; SOURCE LINE # 134
0061         ?C0017:
                                           ; SOURCE LINE # 135
0061 E500        R     MOV     A,ti
0063 75F009            MOV     B,#09H
0066 A4                MUL     AB
0067 2400        R     ADD     A,#LOW tcb_list+01H
0069 F8                MOV     R0,A
006A 120000      E     LCALL   ?C?LLDIDATA
006D EF                MOV     A,R7
006E 24FF              ADD     A,#0FFH
0070 FF                MOV     R7,A
0071 EE                MOV     A,R6
0072 34FF              ADDC    A,#0FFH
0074 FE                MOV     R6,A
0075 ED                MOV     A,R5
0076 34FF              ADDC    A,#0FFH
0078 FD                MOV     R5,A
0079 EC                MOV     A,R4
007A 34FF              ADDC    A,#0FFH
007C FC                MOV     R4,A
007D E500        R     MOV     A,ti
007F 75F009            MOV     B,#09H
0082 A4                MUL     AB
0083 2400        R     ADD     A,#LOW tcb_list+01H
0085 F8                MOV     R0,A
0086 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 136
0089         ?C0015:
0089 0500        R     INC     ti
008B 020000      R     LJMP    ?C0013
008E         ?C0014:
                                           ; SOURCE LINE # 137
008E 020000      R     LJMP    os_switch
             ; FUNCTION time_handleHook (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    356    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       9
   IDATA SIZE       =     65    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
