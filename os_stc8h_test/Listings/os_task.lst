C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE OS_TASK
OBJECT MODULE PLACED IN .\Objects\os_task.obj
COMPILER INVOKED BY: D:\Keil_v5_C51\C51\BIN\C51.EXE XmRTOS\os_task.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJ
                    -ECTEXTEND CODE PRINT(.\Listings\os_task.lst) TABS(2) OBJECT(.\Objects\os_task.obj)

line level    source

   1          #include "os_task.h"
   2          
   3          #include "stc8g.h"
   4          #include "intrins.h"
   5          #include "stdio.h"
   6          extern void push_all_(void);
   7          extern void pop_all_(void);
   8          enum OS_TASK_STATUS_TYPE
   9          {
  10            OS_READY      = 1,  // 就绪态
  11            OS_RUNING     = 2,  // 运行态
  12            OS_BLOCKED    = 3,  // 阻塞态
  13            OS_SUSPENDED  = 4 // 停止态
  14          
  15          };
  16          
  17          // 任务控制块
  18          typedef struct os_tcb_t
  19          {
  20            os_uint8_t      sp;         // sp 堆栈指针存储
  21            os_uint32_t     delay_tick;     // 延时滴答数
  22            os_uint8_t      os_status_type;   // 任务状态
  23          };
  24          
  25          os_uint8_t data task_id = 0;    /*当前活动任务号*/
  26          os_uint8_t max_task = 0;
  27          
  28          // 任务控制列表
  29          struct os_tcb_t idata tcb_list[MAX_TASKS];
  30          
  31          os_uint8_t idata task_idle_stack[MAX_TASK_DEP];   /*空闲任务堆栈.*/
  32          //// 获取下一个任务id
  33          //void os_getNextTaskId(void)
  34          //{
  35          //  
  36          ////  
  37          ////  
  38          ////  
  39          
  40          //}
  41          // 任务切换函数
  42            os_uint8_t  ost_i = 0;
  43          
  44          void OSCtxSw()
  45          {
  46   1      
  47   1        EA = 0;//关中断
  48   1        EA = 0;//关中断
  49   1        EA = 0;//关中断
  50   1        push_all_();
  51   1        tcb_list[task_id].sp = SP;
  52   1      
  53   1      // 找出就绪态的一个id
  54   1        for(ost_i = 0; ost_i < max_task; ost_i++)
C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 2   

  55   1        {
  56   2          if(tcb_list[ost_i].os_status_type == OS_READY)
  57   2          {
  58   3            task_id = ost_i;
  59   3            continue;
  60   3      
  61   3          }
  62   2        }
  63   1        if(task_id == max_task)
  64   1        {
  65   2          task_id = 0;
  66   2        }
  67   1        
  68   1          SP = tcb_list[task_id].sp;
  69   1      pop_all_();
  70   1        EA = 1;//开中断
  71   1      }
  72           
  73          void os_task_create(void(*task)(void) ,os_uint8_t *tstack,int tid)
  74          {
  75   1      
  76   1        tstack[0] = (unsigned int)task & 0xff;
  77   1        tstack[1] = (unsigned int)task >> 8;
  78   1      
  79   1        tcb_list[tid].sp        = tstack + 1;
*** WARNING C260 IN LINE 79 OF XmRTOS\os_task.c: '=': pointer truncation
  80   1        tcb_list[tid].os_status_type  = OS_READY;
  81   1      
  82   1        max_task++;
  83   1      }
  84          void os_idle_task(void);
  85          
  86          void os_start()
  87          {
  88   1        EA = 0;//关中断
  89   1        // 装载空闲任务
  90   1        os_task_create(os_idle_task, &task_idle_stack, 0);//将task1函数装入0号槽
  91   1      
  92   1        task_id = 0;
  93   1        SP = tcb_list[task_id].sp;
  94   1        pop_all_();
  95   1        EA = 1;//开中断
  96   1        return;
  97   1      }
  98          void Delay500ms(void) //@11.0592MHz
  99          {
 100   1        unsigned char data i, j, k;
 101   1      
 102   1        _nop_();
 103   1        _nop_();
 104   1        i = 22;
 105   1        j = 3;
 106   1        k = 227;
 107   1        do
 108   1        {
 109   2          do
 110   2          {
 111   3            while (--k);
 112   3          } while (--j);
 113   2        } while (--i);
 114   1      }
 115          
C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 3   

 116          // 任务延时函数
 117          void os_delay(os_uint32_t tasks)
 118          { 
 119   1        tasks = tasks;
 120   1      //  // 设置延时滴答数
 121   1      //  tcb_list[task_id].delay_tick   =  tasks;
 122   1      //  // 将任务设置为阻塞态
 123   1      //  tcb_list[task_id].os_status_type =  OS_BLOCKED;
 124   1        // 只要任务延时了，就马上切换出去
 125   1      //  OSCtxSw();
 126   1        //  
 127   1        Delay500ms();
 128   1      }
 129          // 空闲函数
 130          void os_idle_task(void)
 131          {
 132   1        while(1)
 133   1        {
 134   2          OSCtxSw();
 135   2        }
 136   1      }
 137          void time_handleHook(void)
 138          {
 139   1        os_uint8_t ti = 0;
 140   1      
 141   1          // 在这里处理遍历延时
 142   1        for(ti = 0; ti<max_task; ti++)
 143   1        {
 144   2          if(tcb_list[ti].os_status_type != OS_BLOCKED)
 145   2          {
 146   3            continue;
 147   3          }
 148   2          // 设置延时滴答数
 149   2          if((tcb_list[ti].delay_tick - 1) == 0)
 150   2          {
 151   3            tcb_list[ti].delay_tick = 0;
 152   3            // 将任务设置为阻塞态
 153   3            tcb_list[ti].os_status_type = OS_READY;
 154   3            continue;
 155   3          }
 156   2          tcb_list[ti].delay_tick--;
 157   2        }
 158   1      }
C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION OSCtxSw (BEGIN)
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 47
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 48
0002 C2AF              CLR     EA
                                           ; SOURCE LINE # 49
0004 C2AF              CLR     EA
                                           ; SOURCE LINE # 50
0006 120000      E     LCALL   push_all_
                                           ; SOURCE LINE # 51
0009 E500        R     MOV     A,task_id
000B 75F006            MOV     B,#06H
000E A4                MUL     AB
000F 2400        R     ADD     A,#LOW tcb_list
0011 F8                MOV     R0,A
0012 A681              MOV     @R0,SP
                                           ; SOURCE LINE # 54
0014 E4                CLR     A
0015 F500        R     MOV     ost_i,A
0017         ?C0001:
0017 E500        R     MOV     A,ost_i
0019 C3                CLR     C
001A 9500        R     SUBB    A,max_task
001C 5015              JNC     ?C0002
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
001E E500        R     MOV     A,ost_i
0020 75F006            MOV     B,#06H
0023 A4                MUL     AB
0024 2400        R     ADD     A,#LOW tcb_list+05H
0026 F8                MOV     R0,A
0027 E6                MOV     A,@R0
0028 6401              XRL     A,#01H
002A 7003              JNZ     ?C0003
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
002C 850000      R     MOV     task_id,ost_i
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
002F         ?C0003:
002F 0500        R     INC     ost_i
0031 80E4              SJMP    ?C0001
0033         ?C0002:
                                           ; SOURCE LINE # 63
0033 E500        R     MOV     A,task_id
0035 B50003      R     CJNE    A,max_task,?C0005
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0038 E4                CLR     A
0039 F500        R     MOV     task_id,A
                                           ; SOURCE LINE # 66
003B         ?C0005:
                                           ; SOURCE LINE # 68
003B E500        R     MOV     A,task_id
003D 75F006            MOV     B,#06H
0040 A4                MUL     AB
C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 5   

0041 2400        R     ADD     A,#LOW tcb_list
0043 F8                MOV     R0,A
0044 E6                MOV     A,@R0
0045 F581              MOV     SP,A
                                           ; SOURCE LINE # 69
0047 120000      E     LCALL   pop_all_
                                           ; SOURCE LINE # 70
004A D2AF              SETB    EA
                                           ; SOURCE LINE # 71
004C 22                RET     
             ; FUNCTION OSCtxSw (END)

             ; FUNCTION _os_task_create (BEGIN)
                                           ; SOURCE LINE # 73
0000 8B00        R     MOV     task,R3
0002 8A00        R     MOV     task+01H,R2
0004 8900        R     MOV     task+02H,R1
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 76
0006 AF01              MOV     R7,AR1
0008 EF                MOV     A,R7
0009 AB00        R     MOV     R3,tstack
000B AA00        R     MOV     R2,tstack+01H
000D A900        R     MOV     R1,tstack+02H
000F 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 77
0012 E500        R     MOV     A,task+01H
0014 AB00        R     MOV     R3,tstack
0016 AA00        R     MOV     R2,tstack+01H
0018 A900        R     MOV     R1,tstack+02H
001A 900001            MOV     DPTR,#01H
001D 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 79
0020 E9                MOV     A,R1
0021 2401              ADD     A,#01H
0023 F9                MOV     R1,A
0024 E4                CLR     A
0025 3A                ADDC    A,R2
0026 AE00        R     MOV     R6,tid+01H
0028 EE                MOV     A,R6
0029 75F006            MOV     B,#06H
002C A4                MUL     AB
002D 2400        R     ADD     A,#LOW tcb_list
002F F8                MOV     R0,A
0030 A601              MOV     @R0,AR1
                                           ; SOURCE LINE # 80
0032 EE                MOV     A,R6
0033 75F006            MOV     B,#06H
0036 A4                MUL     AB
0037 2400        R     ADD     A,#LOW tcb_list+05H
0039 F8                MOV     R0,A
003A 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 82
003C 0500        R     INC     max_task
                                           ; SOURCE LINE # 83
003E 22                RET     
             ; FUNCTION _os_task_create (END)

             ; FUNCTION os_start (BEGIN)
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 6   

0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 90
0002 750000      R     MOV     ?_os_task_create?BYTE+03H,#00H
0005 750000      R     MOV     ?_os_task_create?BYTE+04H,#HIGH task_idle_stack
0008 750000      R     MOV     ?_os_task_create?BYTE+05H,#LOW task_idle_stack
000B E4                CLR     A
000C F500        R     MOV     ?_os_task_create?BYTE+06H,A
000E F500        R     MOV     ?_os_task_create?BYTE+07H,A
0010 7BFF              MOV     R3,#0FFH
0012 7A00        R     MOV     R2,#HIGH os_idle_task
0014 7900        R     MOV     R1,#LOW os_idle_task
0016 120000      R     LCALL   _os_task_create
                                           ; SOURCE LINE # 92
0019 E4                CLR     A
001A F500        R     MOV     task_id,A
                                           ; SOURCE LINE # 93
001C E500        R     MOV     A,task_id
001E 75F006            MOV     B,#06H
0021 A4                MUL     AB
0022 2400        R     ADD     A,#LOW tcb_list
0024 F8                MOV     R0,A
0025 E6                MOV     A,@R0
0026 F581              MOV     SP,A
                                           ; SOURCE LINE # 94
0028 120000      E     LCALL   pop_all_
                                           ; SOURCE LINE # 95
002B D2AF              SETB    EA
                                           ; SOURCE LINE # 97
002D 22                RET     
             ; FUNCTION os_start (END)

             ; FUNCTION Delay500ms (BEGIN)
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 102
0000 00                NOP     
                                           ; SOURCE LINE # 103
0001 00                NOP     
                                           ; SOURCE LINE # 104
;---- Variable 'i' assigned to Register 'R7' ----
0002 7F16              MOV     R7,#016H
                                           ; SOURCE LINE # 105
;---- Variable 'j' assigned to Register 'R6' ----
0004 7E03              MOV     R6,#03H
                                           ; SOURCE LINE # 106
;---- Variable 'k' assigned to Register 'R5' ----
0006 7DE3              MOV     R5,#0E3H
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 110
0008         ?C0015:
                                           ; SOURCE LINE # 111
0008 DDFE              DJNZ    R5,?C0015
                                           ; SOURCE LINE # 112
000A DEFC              DJNZ    R6,?C0015
                                           ; SOURCE LINE # 113
000C DFFA              DJNZ    R7,?C0015
                                           ; SOURCE LINE # 114
000E 22                RET     
             ; FUNCTION Delay500ms (END)

             ; FUNCTION _os_delay (BEGIN)
                                           ; SOURCE LINE # 117
C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 7   

                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 127
0000 020000      R     LJMP    Delay500ms
             ; FUNCTION _os_delay (END)

             ; FUNCTION os_idle_task (BEGIN)
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
0000         ?C0019:
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0000 120000      R     LCALL   OSCtxSw
                                           ; SOURCE LINE # 135
0003 80FB              SJMP    ?C0019
             ; FUNCTION os_idle_task (END)

             ; FUNCTION time_handleHook (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
0000 E4                CLR     A
0001 F500        R     MOV     ti,A
                                           ; SOURCE LINE # 142
0003 F500        R     MOV     ti,A
0005         ?C0022:
0005 E500        R     MOV     A,ti
0007 C3                CLR     C
0008 9500        R     SUBB    A,max_task
000A 4003              JC      $ + 5H
000C 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
000F E500        R     MOV     A,ti
0011 75F006            MOV     B,#06H
0014 A4                MUL     AB
0015 2400        R     ADD     A,#LOW tcb_list+05H
0017 F8                MOV     R0,A
0018 E6                MOV     A,@R0
0019 6403              XRL     A,#03H
001B 706C              JNZ     ?C0024
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 149
001D E500        R     MOV     A,ti
001F 75F006            MOV     B,#06H
0022 A4                MUL     AB
0023 2400        R     ADD     A,#LOW tcb_list+01H
0025 F8                MOV     R0,A
0026 120000      E     LCALL   ?C?LLDIDATA
0029 EF                MOV     A,R7
002A 24FF              ADD     A,#0FFH
002C FF                MOV     R7,A
002D EE                MOV     A,R6
002E 34FF              ADDC    A,#0FFH
0030 FE                MOV     R6,A
0031 ED                MOV     A,R5
0032 34FF              ADDC    A,#0FFH
0034 FD                MOV     R5,A
0035 EC                MOV     A,R4
C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 8   

0036 34FF              ADDC    A,#0FFH
0038 FC                MOV     R4,A
0039 E4                CLR     A
003A FB                MOV     R3,A
003B FA                MOV     R2,A
003C F9                MOV     R1,A
003D F8                MOV     R0,A
003E C3                CLR     C
003F 120000      E     LCALL   ?C?ULCMP
0042 701D              JNZ     ?C0026
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
0044 E500        R     MOV     A,ti
0046 75F006            MOV     B,#06H
0049 A4                MUL     AB
004A 2400        R     ADD     A,#LOW tcb_list+01H
004C F8                MOV     R0,A
004D 120000      E     LCALL   ?C?LSTKIDATA
0050 00                DB      00H
0051 00                DB      00H
0052 00                DB      00H
0053 00                DB      00H
                                           ; SOURCE LINE # 153
0054 E500        R     MOV     A,ti
0056 75F006            MOV     B,#06H
0059 A4                MUL     AB
005A 2400        R     ADD     A,#LOW tcb_list+05H
005C F8                MOV     R0,A
005D 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 154
005F 8028              SJMP    ?C0024
                                           ; SOURCE LINE # 155
0061         ?C0026:
                                           ; SOURCE LINE # 156
0061 E500        R     MOV     A,ti
0063 75F006            MOV     B,#06H
0066 A4                MUL     AB
0067 2400        R     ADD     A,#LOW tcb_list+01H
0069 F8                MOV     R0,A
006A 120000      E     LCALL   ?C?LLDIDATA
006D EF                MOV     A,R7
006E 24FF              ADD     A,#0FFH
0070 FF                MOV     R7,A
0071 EE                MOV     A,R6
0072 34FF              ADDC    A,#0FFH
0074 FE                MOV     R6,A
0075 ED                MOV     A,R5
0076 34FF              ADDC    A,#0FFH
0078 FD                MOV     R5,A
0079 EC                MOV     A,R4
007A 34FF              ADDC    A,#0FFH
007C FC                MOV     R4,A
007D E500        R     MOV     A,ti
007F 75F006            MOV     B,#06H
0082 A4                MUL     AB
0083 2400        R     ADD     A,#LOW tcb_list+01H
0085 F8                MOV     R0,A
0086 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 157
0089         ?C0024:
0089 0500        R     INC     ti
008B 020000      R     LJMP    ?C0022
C51 COMPILER V9.59.0.0   OS_TASK                                                           12/27/2023 23:07:06 PAGE 9   

                                           ; SOURCE LINE # 158
008E         ?C0027:
008E 22                RET     
             ; FUNCTION time_handleHook (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    352    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       9
   IDATA SIZE       =     50    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
