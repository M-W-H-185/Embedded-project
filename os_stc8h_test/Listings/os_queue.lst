C51 COMPILER V9.60.7.0   OS_QUEUE                                                          01/02/2024 16:55:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE OS_QUEUE
OBJECT MODULE PLACED IN .\Objects\os_queue.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE XmRTOS\os_queue.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS;.\XmRTOS\util
                    -s) DEBUG OBJECTEXTEND CODE PRINT(.\Listings\os_queue.lst) OBJECT(.\Objects\os_queue.obj)

line level    source

   1          #include "os_queue.h"
   2          #include "ringBuffer.h"
   3          
   4          //typedef struct QueueHandle_t
   5          //{
   6          //      RingBufferHandle  rb_handle;                                                    // 环形缓冲区操作句柄
   7          //      os_uint8_t                osTaskIdsWaitToSendList[MAX_TASKS];   // 等待发送的任务id列表。缓冲区满后将id存进去
   8          //      os_uint8_t                osTaskIdsWaitToReadList[MAX_TASKS];   // 等待读取的任务id列表。缓冲区读取不到数据的时候将id
             -存进去
   9          //}QueueHandle;
  10          
  11          
  12          // 创建一个队列
  13          os_uint8_t os_queueCreate(QueueHandle *queue_handle, void *buff, os_uint8_t buff_size, os_uint8_t itemSize
             -)
  14          {
  15   1              RingBufferHandle  ringbuffer ;
  16   1              
  17   1              memset(buff, 0, (buff_size * itemSize));                // 写入0
  18   1              memset(queue_handle, 0, sizeof(QueueHandle));   // 写入0
  19   1      
  20   1              // 创建一个环形缓冲区
  21   1              ringbuffer_created(&ringbuffer, buff, buff_size, itemSize);
  22   1              // 指向环形缓冲区
  23   1              queue_handle->rb_handle = ringbuffer;
  24   1              
  25   1              return 0;
  26   1      }
  27          // 写入队列
  28          os_uint8_t os_queueSend(QueueHandle *queue_handle, void *_data, os_uint32_t waitTicks)
  29          {
  30   1              
  31   1              os_uint8_t ret = ringbuffer_write(&(queue_handle->rb_handle), _data);
  32   1              if(ret != RINGBUFF_SUCCESS && waitTicks > 0 )
  33   1              {
  34   2                      // 并将当前任务id 放入 osTaskIdsWaitToSendList[tackid] = 1 表示当前任务是被这个队列堵塞了
  35   2                      queue_handle->osTaskIdsWaitToSendList[task_id] = 1;
  36   2                      os_delay(waitTicks);
  37   2              }
  38   1              return ret;
  39   1      }
C51 COMPILER V9.60.7.0   OS_QUEUE                                                          01/02/2024 16:55:54 PAGE 2   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _os_queueCreate (BEGIN)
                                           ; SOURCE LINE # 13
0000 8B00        R     MOV     queue_handle,R3
0002 8A00        R     MOV     queue_handle+01H,R2
0004 8900        R     MOV     queue_handle+02H,R1
                                           ; SOURCE LINE # 14
                                           ; SOURCE LINE # 17
0006 E500        R     MOV     A,buff_size
0008 8500F0      R     MOV     B,itemSize
000B A4                MUL     AB
000C FF                MOV     R7,A
000D AEF0              MOV     R6,B
000F 7D00              MOV     R5,#00H
0011 AB00        R     MOV     R3,buff
0013 AA00        R     MOV     R2,buff+01H
0015 A900        R     MOV     R1,buff+02H
0017 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 18
001A 7E00              MOV     R6,#00H
001C 7F17              MOV     R7,#017H
001E 7D00              MOV     R5,#00H
0020 AB00        R     MOV     R3,queue_handle
0022 AA00        R     MOV     R2,queue_handle+01H
0024 A900        R     MOV     R1,queue_handle+02H
0026 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 21
0029 850000      E     MOV     ?_ringbuffer_created?BYTE+03H,buff
002C 850000      E     MOV     ?_ringbuffer_created?BYTE+04H,buff+01H
002F 850000      E     MOV     ?_ringbuffer_created?BYTE+05H,buff+02H
0032 850000      E     MOV     ?_ringbuffer_created?BYTE+06H,buff_size
0035 850000      E     MOV     ?_ringbuffer_created?BYTE+07H,itemSize
0038 7B00              MOV     R3,#00H
003A 7A00        R     MOV     R2,#HIGH ringbuffer
003C 7900        R     MOV     R1,#LOW ringbuffer
003E 120000      E     LCALL   _ringbuffer_created
                                           ; SOURCE LINE # 23
0041 A800        R     MOV     R0,queue_handle+02H
0043 AC00        R     MOV     R4,queue_handle+01H
0045 AD00        R     MOV     R5,queue_handle
0047 7B00              MOV     R3,#00H
0049 7A00        R     MOV     R2,#HIGH ringbuffer
004B 7900        R     MOV     R1,#LOW ringbuffer
004D 7E00              MOV     R6,#00H
004F 7F0B              MOV     R7,#0BH
0051 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 25
0054 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 26
0056 22                RET     
             ; FUNCTION _os_queueCreate (END)

             ; FUNCTION _os_queueSend (BEGIN)
                                           ; SOURCE LINE # 28
0000 8B00        R     MOV     queue_handle,R3
0002 8A00        R     MOV     queue_handle+01H,R2
0004 8900        R     MOV     queue_handle+02H,R1
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 31
0006 850000      E     MOV     ?_ringbuffer_write?BYTE+03H,_data
C51 COMPILER V9.60.7.0   OS_QUEUE                                                          01/02/2024 16:55:54 PAGE 3   

0009 850000      E     MOV     ?_ringbuffer_write?BYTE+04H,_data+01H
000C 850000      E     MOV     ?_ringbuffer_write?BYTE+05H,_data+02H
000F 120000      E     LCALL   _ringbuffer_write
0012 8F00        R     MOV     ret,R7
                                           ; SOURCE LINE # 32
0014 E500        R     MOV     A,ret
0016 6401              XRL     A,#01H
0018 6037              JZ      ?C0002
001A E4                CLR     A
001B FF                MOV     R7,A
001C FE                MOV     R6,A
001D FD                MOV     R5,A
001E FC                MOV     R4,A
001F AB00        R     MOV     R3,waitTicks+03H
0021 AA00        R     MOV     R2,waitTicks+02H
0023 A900        R     MOV     R1,waitTicks+01H
0025 A800        R     MOV     R0,waitTicks
0027 D3                SETB    C
0028 120000      E     LCALL   ?C?ULCMP
002B 4024              JC      ?C0002
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 35
002D AB00        R     MOV     R3,queue_handle
002F E500        R     MOV     A,queue_handle+02H
0031 240B              ADD     A,#0BH
0033 F9                MOV     R1,A
0034 E4                CLR     A
0035 3500        R     ADDC    A,queue_handle+01H
0037 FA                MOV     R2,A
0038 7E00              MOV     R6,#00H
003A E9                MOV     A,R1
003B 2500        E     ADD     A,task_id
003D F9                MOV     R1,A
003E EE                MOV     A,R6
003F 3A                ADDC    A,R2
0040 FA                MOV     R2,A
0041 7401              MOV     A,#01H
0043 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 36
0046 AF00        R     MOV     R7,waitTicks+03H
0048 AE00        R     MOV     R6,waitTicks+02H
004A AD00        R     MOV     R5,waitTicks+01H
004C AC00        R     MOV     R4,waitTicks
004E 120000      E     LCALL   _os_delay
                                           ; SOURCE LINE # 37
0051         ?C0002:
                                           ; SOURCE LINE # 38
0051 AF00        R     MOV     R7,ret
                                           ; SOURCE LINE # 39
0053 22                RET     
             ; FUNCTION _os_queueSend (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    171    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.7.0   OS_QUEUE                                                          01/02/2024 16:55:54 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
