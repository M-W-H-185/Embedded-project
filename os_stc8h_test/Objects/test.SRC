; .\Objects\test.SRC generated from: test.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE test.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJECTEXTEND CODE PRINT(.\Listings\test.lst) SRC(.\Objects\test.SRC)


NAME	TEST

?PR?PUSH_ALL_STACK?TEST                  SEGMENT CODE 
?PR?POP_ALL_STACK?TEST                   SEGMENT CODE 
	PUBLIC	POP_ALL_STACK
	PUBLIC	PUSH_ALL_STACK
; 
; void PUSH_ALL_STACK(void)

	RSEG  ?PR?PUSH_ALL_STACK?TEST
PUSH_ALL_STACK:
	USING	0
			; SOURCE LINE # 2
; {
			; SOURCE LINE # 3
;         __asm PUSH PSW
	 PUSH PSW
;         __asm PUSH ACC
	 PUSH ACC
;         __asm PUSH B
	 PUSH B
;         __asm PUSH DPL
	 PUSH DPL
;         __asm PUSH DPH
	 PUSH DPH
;         __asm MOV  A,R0	;R0~R7入栈
	 MOV  A,R0	;R0~R7入栈
;         __asm PUSH ACC
	 PUSH ACC
;         __asm MOV  A,R1
	 MOV  A,R1
;         __asm PUSH ACC
	 PUSH ACC
;         __asm MOV  A,R2
	 MOV  A,R2
;         __asm PUSH ACC
	 PUSH ACC
;         __asm MOV  A,R3
	 MOV  A,R3
;         __asm PUSH ACC
	 PUSH ACC
;         __asm MOV  A,R4
	 MOV  A,R4
;         __asm PUSH ACC
	 PUSH ACC
;         __asm MOV  A,R5
	 MOV  A,R5
;         __asm PUSH ACC
	 PUSH ACC
;         __asm MOV  A,R6
	 MOV  A,R6
;         __asm PUSH ACC
	 PUSH ACC
;         __asm MOV  A,R7
	 MOV  A,R7
;         __asm PUSH ACC
	 PUSH ACC
; 	
; }
			; SOURCE LINE # 26
	RET  	
; END OF PUSH_ALL_STACK

; void POP_ALL_STACK(void)

	RSEG  ?PR?POP_ALL_STACK?TEST
POP_ALL_STACK:
	USING	0
			; SOURCE LINE # 27
; {
			; SOURCE LINE # 28
; 
;         __asm POP  ACC	;R0~R7出栈
	 POP  ACC	;R0~R7出栈
;         __asm MOV  R7,A
	 MOV  R7,A
;         __asm POP  ACC
	 POP  ACC
;         __asm MOV  R6,A
	 MOV  R6,A
;         __asm POP  ACC
	 POP  ACC
;         __asm MOV  R5,A
	 MOV  R5,A
;         __asm POP  ACC
	 POP  ACC
;         __asm MOV  R4,A
	 MOV  R4,A
;         __asm POP  ACC
	 POP  ACC
;         __asm MOV  R3,A
	 MOV  R3,A
;         __asm POP  ACC
	 POP  ACC
;         __asm MOV  R2,A
	 MOV  R2,A
;         __asm POP  ACC
	 POP  ACC
;         __asm MOV  R1,A
	 MOV  R1,A
;         __asm POP  ACC
	 POP  ACC
;         __asm MOV  R0,A
	 MOV  R0,A
;         __asm POP  DPH
	 POP  DPH
;         __asm POP  DPL
	 POP  DPL
;         __asm POP  B
	 POP  B
;         __asm POP  ACC
	 POP  ACC
;         __asm POP  PSW	
	 POP  PSW	
; }			; SOURCE LINE # 51
	RET  	
; END OF POP_ALL_STACK

	END
