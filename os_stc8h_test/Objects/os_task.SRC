; .\Objects\os_task.SRC generated from: XmRTOS\os_task.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE XmRTOS\os_task.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJECTEXTEND CODE PRINT(.\Listings\os_task.lst) SRC(.\Objects\os_task.SRC)

$NOMOD51

NAME	OS_TASK

CCF2	BIT	0D8H.2
P0M1	DATA	093H
P1M0	DATA	092H
P2M0	DATA	096H
P1M1	DATA	091H
P0	DATA	080H
P3M0	DATA	0B2H
P2M1	DATA	095H
P1	DATA	090H
P4M0	DATA	0B4H
P3M1	DATA	0B1H
P2	DATA	0A0H
P5M0	DATA	0CAH
P4M1	DATA	0B3H
P3	DATA	0B0H
WKTCH	DATA	0ABH
AC	BIT	0D0H.6
P6M0	DATA	0CCH
P5M1	DATA	0C9H
P4	DATA	0C0H
T0	BIT	0B0H.4
P7M0	DATA	0E2H
P6M1	DATA	0CBH
P5	DATA	0C8H
T1	BIT	0B0H.5
P6	DATA	0E8H
P7M1	DATA	0E1H
EA	BIT	0A8H.7
P7	DATA	0F8H
WKTCL	DATA	0AAH
SPCTL	DATA	0CEH
CF	BIT	0D8H.7
CH	DATA	0F9H
P_SW1	DATA	0A2H
P_SW2	DATA	0BAH
DPH1	DATA	0E5H
EADC	BIT	0A8H.5
IE	DATA	0A8H
CL	DATA	0E9H
IAP_CMD	DATA	0C5H
CCAP0H	DATA	0FAH
CCAP1H	DATA	0FBH
DPL1	DATA	0E4H
CCAP2H	DATA	0FCH
ADC_RES	DATA	0BDH
IP2H	DATA	0B6H
IP3H	DATA	0EEH
CCAP0L	DATA	0EAH
CR	BIT	0D8H.6
TA	DATA	0AEH
CCAP1L	DATA	0EBH
CCAPM0	DATA	0DAH
RD	BIT	0B0H.7
CCAP2L	DATA	0ECH
CCAPM1	DATA	0DBH
INTCLKO	DATA	08FH
CCAPM2	DATA	0DCH
ES	BIT	0A8H.4
PADC	BIT	0B8H.5
IP	DATA	0B8H
ADCCFG	DATA	0DEH
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
INT1	BIT	0B0H.3
TI	BIT	098H.1
IAP_ADDRH	DATA	0C3H
PS	BIT	0B8H.4
SP	DATA	081H
CMOD	DATA	0D9H
CCON	DATA	0D8H
IAP_ADDRL	DATA	0C4H
OV	BIT	0D0H.2
PPCA	BIT	0B8H.7
LIRTRIM	DATA	09EH
PWMCFG01	DATA	0F6H
CMPCR1	DATA	0E6H
CMPCR2	DATA	0E7H
WR	BIT	0B0H.6
PWMCFG23	DATA	0F7H
ELVD	BIT	0A8H.6
PWMCFG45	DATA	0FEH
P00	BIT	080H.0
ADC_CONTR	DATA	0BCH
SBUF	DATA	099H
P10	BIT	090H.0
PCON	DATA	087H
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
IAP_TPS	DATA	0F5H
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
P40	BIT	0C0H.0
P31	BIT	0B0H.1
P22	BIT	0A0H.2
SCON	DATA	098H
P13	BIT	090H.3
P04	BIT	080H.4
P50	BIT	0C8H.0
P41	BIT	0C0H.1
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
P05	BIT	080H.5
P60	BIT	0E8H.0
P51	BIT	0C8H.1
P42	BIT	0C0H.2
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
P70	BIT	0F8H.0
P61	BIT	0E8H.1
P52	BIT	0C8H.2
P43	BIT	0C0H.3
PLVD	BIT	0B8H.6
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P71	BIT	0F8H.1
P62	BIT	0E8H.2
P53	BIT	0C8H.3
P44	BIT	0C0H.4
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P72	BIT	0F8H.2
P63	BIT	0E8H.3
P54	BIT	0C8H.4
P45	BIT	0C0H.5
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P73	BIT	0F8H.3
P64	BIT	0E8H.4
P55	BIT	0C8H.5
P46	BIT	0C0H.6
P37	BIT	0B0H.7
P74	BIT	0F8H.4
P65	BIT	0E8H.5
P56	BIT	0C8H.6
P47	BIT	0C0H.7
P75	BIT	0F8H.5
P66	BIT	0E8H.6
P57	BIT	0C8H.7
P76	BIT	0F8H.6
P67	BIT	0E8H.7
P77	BIT	0F8H.7
IE0	BIT	088H.1
IE1	BIT	088H.3
IE2	DATA	0AFH
B	DATA	0F0H
AUXR	DATA	08EH
IAP_CONTR	DATA	0C7H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
RSTCFG	DATA	0FFH
IP2	DATA	0B5H
TF1	BIT	088H.7
IP3	DATA	0DFH
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
TH1	DATA	08DH
IT0	BIT	088H.0
TH2	DATA	0D6H
T2H	DATA	0D6H
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH3	DATA	0D4H
T3H	DATA	0D4H
P	BIT	0D0H.0
TH4	DATA	0D2H
T4H	DATA	0D2H
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
TL2	DATA	0D7H
T2L	DATA	0D7H
SM2	BIT	098H.5
TL3	DATA	0D5H
T3L	DATA	0D5H
TL4	DATA	0D3H
T4L	DATA	0D3H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
IAP_DATA	DATA	0C2H
TR0	BIT	088H.4
TR1	BIT	088H.6
WDT_CONTR	DATA	0C1H
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
IRTRIM	DATA	09FH
PCA_PWM0	DATA	0F2H
PCA_PWM1	DATA	0F3H
PCA_PWM2	DATA	0F4H
DPH	DATA	083H
T3T4M	DATA	0D1H
T4T3M	DATA	0D1H
ADC_RESL	DATA	0BEH
DPL	DATA	082H
SPSTAT	DATA	0CDH
IPH	DATA	0B7H
PWMSET	DATA	0F1H
S2BUF	DATA	09BH
S3BUF	DATA	0ADH
REN	BIT	098H.4
S4BUF	DATA	085H
S2CON	DATA	09AH
DPS	DATA	0E3H
S3CON	DATA	0ACH
S4CON	DATA	084H
AUXINTIF	DATA	0EFH
SADEN	DATA	0B9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
IAP_TRIG	DATA	0C6H
F0	BIT	0D0H.5
IRCBAND	DATA	09DH
F1	BIT	0D0H.1
PSW	DATA	0D0H
CCF0	BIT	0D8H.0
CCF1	BIT	0D8H.1
SPDAT	DATA	0CFH
P0M0	DATA	094H
?PR?OSCtxSw?OS_TASK  SEGMENT CODE 
?PR?_os_task_create?OS_TASK              SEGMENT CODE 
?DT?_os_task_create?OS_TASK              SEGMENT DATA OVERLAYABLE 
?PR?os_start?OS_TASK SEGMENT CODE 
?PR?Delay500ms?OS_TASK                   SEGMENT CODE 
?PR?_os_delay?OS_TASK                    SEGMENT CODE 
?PR?os_idle_task?OS_TASK                 SEGMENT CODE 
?PR?time_handleHook?OS_TASK              SEGMENT CODE 
?DT?time_handleHook?OS_TASK              SEGMENT DATA OVERLAYABLE 
?C_INITSEG           SEGMENT CODE 
?DT?OS_TASK          SEGMENT DATA 
?ID?OS_TASK          SEGMENT IDATA 
	EXTRN	CODE (push_all_)
	EXTRN	CODE (pop_all_)
	EXTRN	CODE (?C?CSTPTR)
	EXTRN	CODE (?C?LLDIDATA)
	EXTRN	CODE (?C?ULCMP)
	EXTRN	CODE (?C?LSTKIDATA)
	EXTRN	CODE (?C?LSTIDATA)
	PUBLIC	task_id
	PUBLIC	max_task
	PUBLIC	tcb_list
	PUBLIC	task_idle_stack
	PUBLIC	ost_i
	PUBLIC	time_handleHook
	PUBLIC	os_idle_task
	PUBLIC	_os_delay
	PUBLIC	Delay500ms
	PUBLIC	os_start
	PUBLIC	?_os_task_create?BYTE
	PUBLIC	_os_task_create
	PUBLIC	OSCtxSw

	RSEG  ?DT?time_handleHook?OS_TASK
?time_handleHook?BYTE:
         ti?647:   DS   1

	RSEG  ?DT?_os_task_create?OS_TASK
?_os_task_create?BYTE:
       task?140:   DS   3
	ORG  3
     tstack?141:   DS   3
	ORG  6
        tid?142:   DS   2

	RSEG  ?DT?OS_TASK
          ost_i:   DS   1
       max_task:   DS   1
        task_id:   DS   1

	RSEG  ?ID?OS_TASK
task_idle_stack:   DS   50
       tcb_list:   DS   40

	RSEG  ?C_INITSEG
	DB	001H
	DB	task_id
	DB	000H

	DB	001H
	DB	max_task
	DB	000H

	DB	001H
	DB	ost_i
	DB	000H

; #include "os_task.h"
; 
; #include "stc8g.h"
; #include "intrins.h"
; #include "stdio.h"
; extern void push_all_(void);
; extern void pop_all_(void);
; enum OS_TASK_STATUS_TYPE
; {
; 	OS_READY      = 1,	// 就绪态
; 	OS_RUNING     = 2,	// 运行态
; 	OS_BLOCKED    = 3,	// 阻塞态
; 	OS_SUSPENDED  = 4	// 停止态
; 
; };
; 
; // 任务控制块
; typedef struct os_tcb_t
; {
; 	os_uint8_t 			*stk;				
; 	os_uint32_t 		delay_tick;			// 延时滴答数
; 	os_uint8_t 			os_status_type;		// 任务状态
; };
; 
; os_uint8_t data task_id = 0;    /*当前活动任务号*/
; os_uint8_t max_task = 0;
; 
; // 任务控制列表
; struct os_tcb_t idata tcb_list[MAX_TASKS];
; 
; os_uint8_t idata task_idle_stack[MAX_TASK_DEP];		/*空闲任务堆栈.*/
; //// 获取下一个任务id
; //void os_getNextTaskId(void)
; //{
; //	
; ////	
; ////	
; ////	
; 
; //}
; // 任务切换函数
; 	os_uint8_t  ost_i = 0;
; 
; void OSCtxSw()

	RSEG  ?PR?OSCtxSw?OS_TASK
OSCtxSw:
	USING	0
			; SOURCE LINE # 44
; {
			; SOURCE LINE # 45
; 
; 	EA = 0;//关中断
			; SOURCE LINE # 47
	CLR  	EA
; 	EA = 0;//关中断
			; SOURCE LINE # 48
	CLR  	EA
; 	EA = 0;//关中断
			; SOURCE LINE # 49
	CLR  	EA
; 	push_all_();
			; SOURCE LINE # 50
	LCALL	push_all_
; // 找出就绪态的一个id
; 	for(ost_i = 0; ost_i < max_task; ost_i++)
			; SOURCE LINE # 52
	CLR  	A
	MOV  	ost_i,A
?C0001:
	MOV  	A,ost_i
	CLR  	C
	SUBB 	A,max_task
	JNC  	?C0002
; 	{
			; SOURCE LINE # 53
; 		if(tcb_list[ost_i].os_status_type == OS_READY)
			; SOURCE LINE # 54
	MOV  	A,ost_i
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+07H)
	MOV  	R0,A
	MOV  	A,@R0
	CJNE 	A,#01H,?C0003
; 		{
			; SOURCE LINE # 55
; 			task_id = ost_i;
			; SOURCE LINE # 56
	MOV  	task_id,ost_i
; 			continue;
			; SOURCE LINE # 57
; 
; 		}
			; SOURCE LINE # 59
; 	}
			; SOURCE LINE # 60
?C0003:
	INC  	ost_i
	SJMP 	?C0001
?C0002:
; 	if(task_id == max_task)
			; SOURCE LINE # 61
	MOV  	A,task_id
	CJNE 	A,max_task,?C0005
; 	{
			; SOURCE LINE # 62
; 		task_id = 0;
			; SOURCE LINE # 63
	CLR  	A
	MOV  	task_id,A
; 	}
			; SOURCE LINE # 64
?C0005:
; 	
; pop_all_();
			; SOURCE LINE # 66
	LCALL	pop_all_
; 	
; 	EA = 1;//开中断
			; SOURCE LINE # 68
	SETB 	EA
; }
			; SOURCE LINE # 69
	RET  	
; END OF OSCtxSw

;  
; void os_task_create(void(*task)(void) ,os_uint8_t *tstack,int tid)

	RSEG  ?PR?_os_task_create?OS_TASK
_os_task_create:
	USING	0
			; SOURCE LINE # 71
	MOV  	task?140,R3
	MOV  	task?140+01H,R2
	MOV  	task?140+02H,R1
; {
			; SOURCE LINE # 72
; 
; 	tcb_list[tid].stk 				= tstack ;
			; SOURCE LINE # 74
	MOV  	R2,tstack?141+01H
	MOV  	R1,tstack?141+02H
	MOV  	R7,tid?142+01H
	MOV  	A,R7
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list)
	MOV  	R0,A
	MOV  	@R0,tstack?141
	INC  	R0
	MOV  	@R0,AR2
	INC  	R0
	MOV  	@R0,AR1
; 	tcb_list[tid].os_status_type 	= OS_READY;
			; SOURCE LINE # 75
	MOV  	A,R7
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+07H)
	MOV  	R0,A
	MOV  	@R0,#01H
; 	
; 	*tstack++=15;						/* 任务堆栈长度 								*/
			; SOURCE LINE # 77
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0028
	INC  	tstack?141+01H
?C0028:
	DEC  	A
	MOV  	R1,A
	MOV  	A,#0FH
	LCALL	?C?CSTPTR
; 	*tstack++=(unsigned int)task & 0xFF;		/* 任务代码地址低8位 							*/
			; SOURCE LINE # 78
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0029
	INC  	tstack?141+01H
?C0029:
	DEC  	A
	MOV  	R1,A
	MOV  	A,task?140+02H
	LCALL	?C?CSTPTR
; 	*tstack++=(unsigned int)task >> 8;		/* 任务代码地址高8位 							*/
			; SOURCE LINE # 79
	MOV  	A,task?140+01H
	MOV  	R7,A
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0030
	INC  	tstack?141+01H
?C0030:
	DEC  	A
	MOV  	R1,A
	MOV  	A,R7
	LCALL	?C?CSTPTR
; 	/* 处理器是按特定的顺序将寄存器存入堆栈的，所以用户在将寄存器存入堆栈的时候也要依照这一顺序 */
; 	*tstack++=0;					/* PSW 											*/
			; SOURCE LINE # 81
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0031
	INC  	tstack?141+01H
?C0031:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* ACC 											*/
			; SOURCE LINE # 82
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0032
	INC  	tstack?141+01H
?C0032:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* B 											*/
			; SOURCE LINE # 83
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0033
	INC  	tstack?141+01H
?C0033:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* DPL 											*/
			; SOURCE LINE # 84
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0034
	INC  	tstack?141+01H
?C0034:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* DPH 											*/
			; SOURCE LINE # 85
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0035
	INC  	tstack?141+01H
?C0035:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* R0 											*/
			; SOURCE LINE # 86
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0036
	INC  	tstack?141+01H
?C0036:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* R1 											*/
			; SOURCE LINE # 87
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0037
	INC  	tstack?141+01H
?C0037:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* R2 											*/
			; SOURCE LINE # 88
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0038
	INC  	tstack?141+01H
?C0038:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* R3 											*/	
			; SOURCE LINE # 89
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0039
	INC  	tstack?141+01H
?C0039:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* R4 											*/
			; SOURCE LINE # 90
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0040
	INC  	tstack?141+01H
?C0040:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* R5 											*/
			; SOURCE LINE # 91
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0041
	INC  	tstack?141+01H
?C0041:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 	*tstack++=0;					/* R6 											*/
			; SOURCE LINE # 92
	MOV  	R3,tstack?141
	INC  	tstack?141+02H
	MOV  	A,tstack?141+02H
	MOV  	R2,tstack?141+01H
	JNZ  	?C0042
	INC  	tstack?141+01H
?C0042:
	DEC  	A
	MOV  	R1,A
	CLR  	A
	LCALL	?C?CSTPTR
; 
; 
; 	max_task++;
			; SOURCE LINE # 95
	INC  	max_task
; }
			; SOURCE LINE # 96
	RET  	
; END OF _os_task_create

; void os_idle_task(void);
; 
; void os_start()

	RSEG  ?PR?os_start?OS_TASK
os_start:
	USING	0
			; SOURCE LINE # 99
; {
			; SOURCE LINE # 100
; 	EA = 0;//关中断
			; SOURCE LINE # 101
	CLR  	EA
; 	// 装载空闲任务
; 	os_task_create(os_idle_task, &task_idle_stack, 0);//将task1函数装入0号槽
			; SOURCE LINE # 103
	MOV  	?_os_task_create?BYTE+03H,#00H
	MOV  	?_os_task_create?BYTE+04H,#HIGH (task_idle_stack)
	MOV  	?_os_task_create?BYTE+05H,#LOW (task_idle_stack)
	CLR  	A
	MOV  	?_os_task_create?BYTE+06H,A
	MOV  	?_os_task_create?BYTE+07H,A
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (os_idle_task)
	MOV  	R1,#LOW (os_idle_task)
	LCALL	_os_task_create
; 
; 	task_id = 0;
			; SOURCE LINE # 105
	CLR  	A
	MOV  	task_id,A
; 
; 
; 	EA = 1;//开中断
			; SOURCE LINE # 108
	SETB 	EA
; 	return;
; }
			; SOURCE LINE # 110
	RET  	
; END OF os_start

; void Delay500ms(void)	//@11.0592MHz

	RSEG  ?PR?Delay500ms?OS_TASK
Delay500ms:
	USING	0
			; SOURCE LINE # 111
; {
			; SOURCE LINE # 112
; 	unsigned char data i, j, k;
; 
; 	_nop_();
			; SOURCE LINE # 115
	NOP  	
; 	_nop_();
			; SOURCE LINE # 116
	NOP  	
; 	i = 22;
			; SOURCE LINE # 117
;---- Variable 'i?343' assigned to Register 'R7' ----
	MOV  	R7,#016H
; 	j = 3;
			; SOURCE LINE # 118
;---- Variable 'j?344' assigned to Register 'R6' ----
	MOV  	R6,#03H
; 	k = 227;
			; SOURCE LINE # 119
;---- Variable 'k?345' assigned to Register 'R5' ----
	MOV  	R5,#0E3H
; 	do
; 	{
			; SOURCE LINE # 121
; 		do
; 		{
			; SOURCE LINE # 123
?C0015:
; 			while (--k);
			; SOURCE LINE # 124
	DJNZ 	R5,?C0015
; 		} while (--j);
			; SOURCE LINE # 125
	DJNZ 	R6,?C0015
; 	} while (--i);
			; SOURCE LINE # 126
	DJNZ 	R7,?C0015
; }
			; SOURCE LINE # 127
	RET  	
; END OF Delay500ms

; 
; // 任务延时函数
; void os_delay(os_uint32_t tasks)

	RSEG  ?PR?_os_delay?OS_TASK
_os_delay:
	USING	0
			; SOURCE LINE # 130
; {	
			; SOURCE LINE # 131
; 	tasks = tasks;
			; SOURCE LINE # 132
; //	// 设置延时滴答数
; //	tcb_list[task_id].delay_tick 	 = 	tasks;
; //	// 将任务设置为阻塞态
; //	tcb_list[task_id].os_status_type = 	OS_BLOCKED;
; 	// 只要任务延时了，就马上切换出去
; //	OSCtxSw();
; 	//	
; 	Delay500ms();
			; SOURCE LINE # 140
	LJMP 	Delay500ms
; END OF _os_delay

; }
; // 空闲函数
; void os_idle_task(void)

	RSEG  ?PR?os_idle_task?OS_TASK
os_idle_task:
	USING	0
			; SOURCE LINE # 143
; {
			; SOURCE LINE # 144
?C0019:
; 	while(1)
			; SOURCE LINE # 145
; 	{
			; SOURCE LINE # 146
; 		OSCtxSw();
			; SOURCE LINE # 147
	LCALL	OSCtxSw
; 	}
			; SOURCE LINE # 148
	SJMP 	?C0019
; END OF os_idle_task

; }
; void time_handleHook(void)

	RSEG  ?PR?time_handleHook?OS_TASK
time_handleHook:
	USING	0
			; SOURCE LINE # 150
; {
			; SOURCE LINE # 151
; 	os_uint8_t ti = 0;
			; SOURCE LINE # 152
	CLR  	A
	MOV  	ti?647,A
; 
; 		// 在这里处理遍历延时
; 	for(ti = 0; ti<max_task; ti++)
			; SOURCE LINE # 155
	MOV  	ti?647,A
?C0022:
	MOV  	A,ti?647
	CLR  	C
	SUBB 	A,max_task
	JC   	$ + 5H
	LJMP 	?C0027
; 	{
			; SOURCE LINE # 156
; 		if(tcb_list[ti].os_status_type != OS_BLOCKED)
			; SOURCE LINE # 157
	MOV  	A,ti?647
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+07H)
	MOV  	R0,A
	MOV  	A,@R0
	XRL  	A,#03H
	JNZ  	?C0024
; 		{
			; SOURCE LINE # 158
; 			continue;
			; SOURCE LINE # 159
; 		}
			; SOURCE LINE # 160
; 		// 设置延时滴答数
; 		if((tcb_list[ti].delay_tick - 1) == 0)
			; SOURCE LINE # 162
	MOV  	A,ti?647
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+03H)
	MOV  	R0,A
	LCALL	?C?LLDIDATA
	MOV  	A,R7
	ADD  	A,#0FFH
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,#0FFH
	MOV  	R6,A
	MOV  	A,R5
	ADDC 	A,#0FFH
	MOV  	R5,A
	MOV  	A,R4
	ADDC 	A,#0FFH
	MOV  	R4,A
	CLR  	A
	MOV  	R3,A
	MOV  	R2,A
	MOV  	R1,A
	MOV  	R0,A
	CLR  	C
	LCALL	?C?ULCMP
	JNZ  	?C0026
; 		{
			; SOURCE LINE # 163
; 			tcb_list[ti].delay_tick = 0;
			; SOURCE LINE # 164
	MOV  	A,ti?647
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+03H)
	MOV  	R0,A
	LCALL	?C?LSTKIDATA
	DB   	00H
	DB   	00H
	DB   	00H
	DB   	00H
; 			// 将任务设置为阻塞态
; 			tcb_list[ti].os_status_type = OS_READY;
			; SOURCE LINE # 166
	MOV  	A,ti?647
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+07H)
	MOV  	R0,A
	MOV  	@R0,#01H
; 			continue;
			; SOURCE LINE # 167
	SJMP 	?C0024
; 		}
			; SOURCE LINE # 168
?C0026:
; 		tcb_list[ti].delay_tick--;
			; SOURCE LINE # 169
	MOV  	A,ti?647
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+03H)
	MOV  	R0,A
	LCALL	?C?LLDIDATA
	MOV  	A,R7
	ADD  	A,#0FFH
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,#0FFH
	MOV  	R6,A
	MOV  	A,R5
	ADDC 	A,#0FFH
	MOV  	R5,A
	MOV  	A,R4
	ADDC 	A,#0FFH
	MOV  	R4,A
	MOV  	A,ti?647
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+03H)
	MOV  	R0,A
	LCALL	?C?LSTIDATA
; 	}
			; SOURCE LINE # 170
?C0024:
	INC  	ti?647
	LJMP 	?C0022
; }
			; SOURCE LINE # 171
?C0027:
	RET  	
; END OF time_handleHook

	END
