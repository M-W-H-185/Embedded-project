; .\Objects\main.SRC generated from: main.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\XmRTOS) DEBUG OBJECTEXTEND CODE PRINT(.\Listings\main.lst) SRC(.\Objects\main.SRC)

$NOMOD51

NAME	MAIN

CCF2	BIT	0D8H.2
P0M1	DATA	093H
P1M0	DATA	092H
P2M0	DATA	096H
P1M1	DATA	091H
P0	DATA	080H
P3M0	DATA	0B2H
P2M1	DATA	095H
P1	DATA	090H
P4M0	DATA	0B4H
P3M1	DATA	0B1H
P2	DATA	0A0H
P5M0	DATA	0CAH
P4M1	DATA	0B3H
P3	DATA	0B0H
WKTCH	DATA	0ABH
AC	BIT	0D0H.6
P6M0	DATA	0CCH
P5M1	DATA	0C9H
P4	DATA	0C0H
T0	BIT	0B0H.4
P7M0	DATA	0E2H
P6M1	DATA	0CBH
P5	DATA	0C8H
T1	BIT	0B0H.5
P6	DATA	0E8H
P7M1	DATA	0E1H
EA	BIT	0A8H.7
P7	DATA	0F8H
WKTCL	DATA	0AAH
LED_R	BIT	080H.5
SPCTL	DATA	0CEH
CF	BIT	0D8H.7
CH	DATA	0F9H
P_SW1	DATA	0A2H
P_SW2	DATA	0BAH
DPH1	DATA	0E5H
EADC	BIT	0A8H.5
IE	DATA	0A8H
LED_Y	BIT	080H.6
CL	DATA	0E9H
IAP_CMD	DATA	0C5H
CCAP0H	DATA	0FAH
CCAP1H	DATA	0FBH
DPL1	DATA	0E4H
CCAP2H	DATA	0FCH
ADC_RES	DATA	0BDH
IP2H	DATA	0B6H
IP3H	DATA	0EEH
CCAP0L	DATA	0EAH
CR	BIT	0D8H.6
TA	DATA	0AEH
CCAP1L	DATA	0EBH
CCAPM0	DATA	0DAH
RD	BIT	0B0H.7
CCAP2L	DATA	0ECH
CCAPM1	DATA	0DBH
INTCLKO	DATA	08FH
CCAPM2	DATA	0DCH
ES	BIT	0A8H.4
PADC	BIT	0B8H.5
IP	DATA	0B8H
ADCCFG	DATA	0DEH
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
INT1	BIT	0B0H.3
TI	BIT	098H.1
IAP_ADDRH	DATA	0C3H
PS	BIT	0B8H.4
SP	DATA	081H
CMOD	DATA	0D9H
CCON	DATA	0D8H
IAP_ADDRL	DATA	0C4H
OV	BIT	0D0H.2
PPCA	BIT	0B8H.7
LIRTRIM	DATA	09EH
PWMCFG01	DATA	0F6H
CMPCR1	DATA	0E6H
CMPCR2	DATA	0E7H
WR	BIT	0B0H.6
PWMCFG23	DATA	0F7H
ELVD	BIT	0A8H.6
PWMCFG45	DATA	0FEH
P00	BIT	080H.0
ADC_CONTR	DATA	0BCH
SBUF	DATA	099H
P10	BIT	090H.0
PCON	DATA	087H
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
IAP_TPS	DATA	0F5H
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
P40	BIT	0C0H.0
P31	BIT	0B0H.1
P22	BIT	0A0H.2
SCON	DATA	098H
P13	BIT	090H.3
P04	BIT	080H.4
P50	BIT	0C8H.0
P41	BIT	0C0H.1
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
P05	BIT	080H.5
P60	BIT	0E8H.0
P51	BIT	0C8H.1
P42	BIT	0C0H.2
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
P70	BIT	0F8H.0
P61	BIT	0E8H.1
P52	BIT	0C8H.2
P43	BIT	0C0H.3
PLVD	BIT	0B8H.6
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P71	BIT	0F8H.1
P62	BIT	0E8H.2
P53	BIT	0C8H.3
P44	BIT	0C0H.4
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P72	BIT	0F8H.2
P63	BIT	0E8H.3
P54	BIT	0C8H.4
P45	BIT	0C0H.5
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P73	BIT	0F8H.3
P64	BIT	0E8H.4
P55	BIT	0C8H.5
P46	BIT	0C0H.6
P37	BIT	0B0H.7
P74	BIT	0F8H.4
P65	BIT	0E8H.5
P56	BIT	0C8H.6
P47	BIT	0C0H.7
P75	BIT	0F8H.5
P66	BIT	0E8H.6
P57	BIT	0C8H.7
P76	BIT	0F8H.6
P67	BIT	0E8H.7
P77	BIT	0F8H.7
IE0	BIT	088H.1
IE1	BIT	088H.3
IE2	DATA	0AFH
B	DATA	0F0H
AUXR	DATA	08EH
IAP_CONTR	DATA	0C7H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
RSTCFG	DATA	0FFH
IP2	DATA	0B5H
TF1	BIT	088H.7
IP3	DATA	0DFH
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
TH1	DATA	08DH
IT0	BIT	088H.0
TH2	DATA	0D6H
T2H	DATA	0D6H
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH3	DATA	0D4H
T3H	DATA	0D4H
P	BIT	0D0H.0
TH4	DATA	0D2H
T4H	DATA	0D2H
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
TL2	DATA	0D7H
T2L	DATA	0D7H
SM2	BIT	098H.5
TL3	DATA	0D5H
T3L	DATA	0D5H
TL4	DATA	0D3H
T4L	DATA	0D3H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
IAP_DATA	DATA	0C2H
TR0	BIT	088H.4
TR1	BIT	088H.6
WDT_CONTR	DATA	0C1H
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
IRTRIM	DATA	09FH
PCA_PWM0	DATA	0F2H
PCA_PWM1	DATA	0F3H
PCA_PWM2	DATA	0F4H
DPH	DATA	083H
T3T4M	DATA	0D1H
T4T3M	DATA	0D1H
ADC_RESL	DATA	0BEH
DPL	DATA	082H
SPSTAT	DATA	0CDH
IPH	DATA	0B7H
PWMSET	DATA	0F1H
S2BUF	DATA	09BH
S3BUF	DATA	0ADH
REN	BIT	098H.4
S4BUF	DATA	085H
S2CON	DATA	09AH
DPS	DATA	0E3H
S3CON	DATA	0ACH
S4CON	DATA	084H
AUXINTIF	DATA	0EFH
SADEN	DATA	0B9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
IAP_TRIG	DATA	0C6H
F0	BIT	0D0H.5
IRCBAND	DATA	09DH
F1	BIT	0D0H.1
PSW	DATA	0D0H
LED_G	BIT	080H.7
CCF0	BIT	0D8H.0
CCF1	BIT	0D8H.1
SPDAT	DATA	0CFH
P0M0	DATA	094H
?PR?os_getNextTaskId?MAIN                SEGMENT CODE 
?PR?OSCtxSw?MAIN     SEGMENT CODE 
?PR?_os_task_create?MAIN                 SEGMENT CODE 
?XD?_os_task_create?MAIN                 SEGMENT XDATA OVERLAYABLE 
?PR?os_start?MAIN    SEGMENT CODE 
?PR?_os_delay?MAIN   SEGMENT CODE 
?PR?os_idle_task?MAIN                    SEGMENT CODE 
?PR?task1?MAIN       SEGMENT CODE 
?PR?task2?MAIN       SEGMENT CODE 
?PR?time0_handle?MAIN                    SEGMENT CODE 
?XD?time0_handle?MAIN                    SEGMENT XDATA OVERLAYABLE 
?PR?Timer0_Init?MAIN SEGMENT CODE 
?PR?main?MAIN        SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?ID?MAIN             SEGMENT IDATA 
?XD?MAIN             SEGMENT XDATA 
?DT?MAIN             SEGMENT DATA 
	EXTRN	CODE (?C?CSTPTR)
	EXTRN	CODE (?C?CSTOPTR)
	EXTRN	CODE (?C?LSTIDATA)
	EXTRN	CODE (?C?LLDIDATA)
	EXTRN	CODE (?C?ULCMP)
	EXTRN	CODE (?C?LSTKIDATA)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	OS_TCB_SIZE
	PUBLIC	task_id
	PUBLIC	task_stack2
	PUBLIC	task_stack1
	PUBLIC	max_task
	PUBLIC	tcb_list
	PUBLIC	cut
	PUBLIC	task_idle_stack
	PUBLIC	main
	PUBLIC	Timer0_Init
	PUBLIC	time0_handle
	PUBLIC	task2
	PUBLIC	task1
	PUBLIC	os_idle_task
	PUBLIC	_os_delay
	PUBLIC	os_start
	PUBLIC	?_os_task_create?BYTE
	PUBLIC	_os_task_create
	PUBLIC	OSCtxSw
	PUBLIC	os_getNextTaskId

	RSEG  ?XD?time0_handle?MAIN
?time0_handle?BYTE:
         ti?845:   DS   1

	RSEG  ?XD?_os_task_create?MAIN
?_os_task_create?BYTE:
       task?241:   DS   3
	ORG  3
     tstack?242:   DS   3
	ORG  6
        tid?243:   DS   2

	RSEG  ?ID?MAIN
task_idle_stack:   DS   20
       tcb_list:   DS   30
    task_stack1:   DS   20
    task_stack2:   DS   20

	RSEG  ?XD?MAIN
            cut:   DS   2
       max_task:   DS   1

	RSEG  ?DT?MAIN
        task_id:   DS   1
    OS_TCB_SIZE:   DS   1

	RSEG  ?C_INITSEG
	DB	001H
	DB	OS_TCB_SIZE
	DB	006H

	DB	001H
	DB	task_id
	DB	000H

	DB	041H
	DW	max_task
	DB	000H

	DB	042H
	DW	cut
	DW	00000H

; /*
; 标题：LED红绿灯系统
; 主频：35MHz
; 用于：51单片机学习机-学电 
; 资料：https://rationmcu.com
; */
; 
; #include "stc8g.h"
; #include "intrins.h"
; #include "stdio.h"
; 
; 
; /* 发光二极管定义 */
; sbit LED_R = P0^5;    // 红色LED
; sbit LED_Y = P0^6;    // 黄色LED
; sbit LED_G = P0^7;    // 绿色LED
; 
; typedef     unsigned char    os_uint8_t;	//  8 bits 
; 
; typedef     unsigned int     os_uint16_t;	// 16 bits 
; 
; typedef     unsigned long    os_uint32_t;	// 32 bits 
; enum OS_TASK_STATUS_TYPE
; {
; 	OS_READY      = 1,	// 就绪态
; 	OS_RUNING     = 2,	// 运行态
; 	OS_BLOCKED    = 3,	// 阻塞态
; 	OS_SUSPENDED  = 4	// 停止态
; 
; };
; 
; 	// 任务控制块
; 	typedef struct os_tcb_t
; 	{
; 		os_uint8_t 			sp;					// sp 堆栈指针存储
; 		os_uint32_t 		delay_tick;			// 延时滴答数
; 		os_uint8_t 			os_status_type;		// 任务状态
; 	};
; // 任务控制块的结构体大小
; const os_uint8_t data OS_TCB_SIZE = sizeof(struct os_tcb_t);	// 1 + 4 + 1 = 6个字节
;  
; #define MAX_TASKS 5       /*任务槽个数.必须和实际任务数一至*/
; #define MAX_TASK_DEP 20   /*最大栈深.最低不得少于2个,保守值为12*/
; os_uint8_t data task_id = 0;    /*当前活动任务号*/
; os_uint8_t max_task = 0;
; 
; 
;  
; extern void test(void);
; //// 任务主动放弃cpu资源
; //extern void OSCtxSw(void);
; 
; 
; // 任务控制列表
; struct os_tcb_t idata tcb_list[MAX_TASKS];
; // 任务堆栈区
; os_uint8_t idata task_idle_stack[MAX_TASK_DEP];		/*空闲任务堆栈.*/
; os_uint8_t idata task_stack1[MAX_TASK_DEP];			/*任务1堆栈.*/
; os_uint8_t idata task_stack2[MAX_TASK_DEP];			/*任务2堆栈.*/
; // 任务堆栈区
; 
; 
; // 获取下一个任务id
; void os_getNextTaskId(void)

	RSEG  ?PR?os_getNextTaskId?MAIN
os_getNextTaskId:
			; SOURCE LINE # 64
; {
			; SOURCE LINE # 65
; 	
; //	
; //	
; //	
; 
; }
			; SOURCE LINE # 71
	RET  	
; END OF os_getNextTaskId

; // 任务切换函数
; void OSCtxSw()

	RSEG  ?PR?OSCtxSw?MAIN
OSCtxSw:
	USING	0
			; SOURCE LINE # 73
; {
			; SOURCE LINE # 74
; 	os_uint8_t  ost_i = 0;
			; SOURCE LINE # 75
;---- Variable 'ost_i?140' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
; 	
; 	tcb_list[task_id].sp = SP;
			; SOURCE LINE # 77
	MOV  	A,task_id
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list)
	MOV  	R0,A
	MOV  	@R0,SP
; 
; // 找出就绪态的一个id
; 	for(ost_i = 0; ost_i < max_task; ost_i++)
			; SOURCE LINE # 80
?C0002:
	MOV  	DPTR,#max_task
	MOVX 	A,@DPTR
	MOV  	R6,A
	MOV  	A,R7
	CLR  	C
	SUBB 	A,R6
	JNC  	?C0003
; 	{
			; SOURCE LINE # 81
; 		if(tcb_list[ost_i].os_status_type == OS_READY)
			; SOURCE LINE # 82
	MOV  	A,R7
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+05H)
	MOV  	R0,A
	MOV  	A,@R0
	CJNE 	A,#01H,?C0004
; 		{
			; SOURCE LINE # 83
; 			task_id = ost_i;
			; SOURCE LINE # 84
	MOV  	task_id,R7
; 			continue;
			; SOURCE LINE # 85
; 
; 		}
			; SOURCE LINE # 87
; 	}
			; SOURCE LINE # 88
?C0004:
	INC  	R7
	SJMP 	?C0002
?C0003:
; 	
; 
; 	if(task_id == max_task)
			; SOURCE LINE # 91
	MOV  	A,task_id
	CJNE 	A,AR6,?C0006
; 	{
			; SOURCE LINE # 92
; 		task_id = 0;
			; SOURCE LINE # 93
	CLR  	A
	MOV  	task_id,A
; 	}
			; SOURCE LINE # 94
?C0006:
; 	#pragma asm
; 
	  
;     #pragma endasm
;     SP = tcb_list[task_id].sp;
			; SOURCE LINE # 98
	MOV  	A,task_id
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	SP,A
; 
; }
			; SOURCE LINE # 100
	RET  	
; END OF OSCtxSw

;  
; void os_task_create(void(*task)(void) ,os_uint8_t *tstack,int tid)

	RSEG  ?PR?_os_task_create?MAIN
_os_task_create:
	USING	0
			; SOURCE LINE # 102
	MOV  	DPTR,#task?241
	MOV  	A,R3
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R2
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R1
	MOVX 	@DPTR,A
; {
			; SOURCE LINE # 103
; 
; 	tstack[0] = (unsigned int)task & 0xff;
			; SOURCE LINE # 105
	MOV  	DPTR,#task?241
	INC  	DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	MOV  	A,R7
	LCALL	?C?CSTPTR
; 	tstack[1] = (unsigned int)task >> 8;
			; SOURCE LINE # 106
	MOV  	DPTR,#task?241
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOV  	A,R2
	MOV  	R7,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	MOV  	DPTR,#01H
	MOV  	A,R7
	LCALL	?C?CSTOPTR
; 
; 	tcb_list[tid].sp 				= tstack + 1;
			; SOURCE LINE # 108
	MOV  	A,R1
	ADD  	A,#01H
	MOV  	R1,A
	MOV  	DPTR,#tid?243
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R6,A
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list)
	MOV  	R0,A
	MOV  	@R0,AR1
; 	tcb_list[tid].os_status_type 	= OS_READY;
			; SOURCE LINE # 109
	MOV  	A,R6
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+05H)
	MOV  	R0,A
	MOV  	@R0,#01H
; 
; 	max_task++;
			; SOURCE LINE # 111
	MOV  	DPTR,#max_task
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 112
	RET  	
; END OF _os_task_create

; void os_idle_task(void);
; 
; void os_start()

	RSEG  ?PR?os_start?MAIN
os_start:
	USING	0
			; SOURCE LINE # 115
; {
			; SOURCE LINE # 116
; 	// 装载空闲任务
; 	os_task_create(os_idle_task, &task_idle_stack, 0);//将task1函数装入0号槽
			; SOURCE LINE # 118
	MOV  	DPTR,#?_os_task_create?BYTE+03H
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#HIGH (task_idle_stack)
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#LOW (task_idle_stack)
	MOVX 	@DPTR,A
	CLR  	A
	INC  	DPTR
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (os_idle_task)
	MOV  	R1,#LOW (os_idle_task)
	LCALL	_os_task_create
; 
; 	task_id = 0;
			; SOURCE LINE # 120
	CLR  	A
	MOV  	task_id,A
; 	SP = tcb_list[task_id].sp;  
			; SOURCE LINE # 121
	MOV  	A,task_id
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	SP,A
; 	return;
; }
			; SOURCE LINE # 123
	RET  	
; END OF os_start

; 
; // 任务延时函数
; void os_delay(os_uint32_t tasks)

	RSEG  ?PR?_os_delay?MAIN
L?0033:
	USING	0
	SETB 	LED_R
L?0034:
	MOV  	R7,#0F4H
	MOV  	R6,#01H
L?0035:
	MOV  	R5,#00H
	MOV  	R4,#00H
_os_delay:
	USING	0
			; SOURCE LINE # 126
;---- Variable 'tasks?444' assigned to Register 'R4/R5/R6/R7' ----
; {	
			; SOURCE LINE # 127
; 	
; 	// 设置延时滴答数
; 	tcb_list[task_id].delay_tick 	 = 	tasks;
			; SOURCE LINE # 130
	MOV  	A,task_id
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+01H)
	MOV  	R0,A
	LCALL	?C?LSTIDATA
; 	// 将任务设置为阻塞态
; 	tcb_list[task_id].os_status_type = 	OS_BLOCKED;
			; SOURCE LINE # 132
	MOV  	A,task_id
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+05H)
	MOV  	R0,A
	MOV  	@R0,#03H
; 	// 只要任务延时了，就马上切换出去
; 	OSCtxSw();
			; SOURCE LINE # 134
	LJMP 	OSCtxSw
; END OF _os_delay

; 	//	
; }
; // 空闲函数
; void os_idle_task(void)

	RSEG  ?PR?os_idle_task?MAIN
os_idle_task:
	USING	0
			; SOURCE LINE # 138
; {
			; SOURCE LINE # 139
?C0011:
; 	while(1)
			; SOURCE LINE # 140
; 	{
			; SOURCE LINE # 141
; 		OSCtxSw();
			; SOURCE LINE # 142
	LCALL	OSCtxSw
; 	}
			; SOURCE LINE # 143
	SJMP 	?C0011
; END OF os_idle_task

; }
; 
; void task1()

	RSEG  ?PR?task1?MAIN
task1:
	USING	0
			; SOURCE LINE # 146
; {
			; SOURCE LINE # 147
?C0014:
; 	while(1)
			; SOURCE LINE # 148
; 	{
			; SOURCE LINE # 149
; 		LED_R = 1;
			; SOURCE LINE # 150
; 		os_delay(500);
			; SOURCE LINE # 151
	LCALL	L?0033
; 
; 		LED_R = 0;
			; SOURCE LINE # 153
	CLR  	LED_R
; 		os_delay(500);
			; SOURCE LINE # 154
	LCALL	L?0034
; 		
; 		LED_R = 1;
			; SOURCE LINE # 156
; 		os_delay(500);
			; SOURCE LINE # 157
	LCALL	L?0033
; 		OSCtxSw();
			; SOURCE LINE # 158
	LCALL	OSCtxSw
; 
; 	}
			; SOURCE LINE # 160
	SJMP 	?C0014
; END OF task1

; }
; 
; void task2()

	RSEG  ?PR?task2?MAIN
task2:
	USING	0
			; SOURCE LINE # 163
; {
			; SOURCE LINE # 164
?C0017:
; 
; 	while(1)
			; SOURCE LINE # 166
; 	{
			; SOURCE LINE # 167
; 		LED_Y = 1;
			; SOURCE LINE # 168
	SETB 	LED_Y
; 		os_delay(1000);
			; SOURCE LINE # 169
	MOV  	R7,#0E8H
	MOV  	R6,#03H
	LCALL	L?0035
; 		
; 		LED_Y = 0;
			; SOURCE LINE # 171
	CLR  	LED_Y
; 		os_delay(1000);
			; SOURCE LINE # 172
	MOV  	R7,#0E8H
	MOV  	R6,#03H
	LCALL	L?0035
; 		OSCtxSw();
			; SOURCE LINE # 173
	LCALL	OSCtxSw
; 
; 	}
			; SOURCE LINE # 175
	SJMP 	?C0017
; END OF task2

CSEG	AT	0000BH
	LJMP	time0_handle

; }
; 
; 
; unsigned int cut = 0;
; 
; //void time0_handle(void)large reentrant
; void time0_handle(void)interrupt 1

	RSEG  ?PR?time0_handle?MAIN
	USING	0
time0_handle:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR1
	PUSH 	AR2
	PUSH 	AR3
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 182
; {
; 	os_uint8_t ti = 0;
			; SOURCE LINE # 184
	MOV  	DPTR,#ti?845
	CLR  	A
	MOVX 	@DPTR,A
; 	cut++;
			; SOURCE LINE # 185
	MOV  	DPTR,#cut+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0031
	MOV  	DPTR,#cut
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0031:
; 
; 	if(cut == 500)
			; SOURCE LINE # 187
	MOV  	DPTR,#cut
	MOVX 	A,@DPTR
	CJNE 	A,#01H,?C0020
	INC  	DPTR
	MOVX 	A,@DPTR
	CJNE 	A,#0F4H,?C0020
; 	{
			; SOURCE LINE # 188
; 		cut = 0;
			; SOURCE LINE # 189
	MOV  	DPTR,#cut
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
; 		LED_G = !LED_G;
			; SOURCE LINE # 190
	CPL  	LED_G
; 	}
			; SOURCE LINE # 191
?C0020:
; 	// 在这里处理遍历延时
; 	for(ti = 0; ti<max_task; ti++)
			; SOURCE LINE # 193
	MOV  	DPTR,#ti?845
	CLR  	A
	MOVX 	@DPTR,A
?C0021:
	MOV  	DPTR,#max_task
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#ti?845
	MOVX 	A,@DPTR
	MOV  	R6,A
	CLR  	C
	SUBB 	A,R7
	JC   	$ + 5H
	LJMP 	?C0026
; 	{
			; SOURCE LINE # 194
; 		if(tcb_list[ti].os_status_type != OS_BLOCKED)
			; SOURCE LINE # 195
	MOV  	A,R6
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+05H)
	MOV  	R0,A
	MOV  	A,@R0
	XRL  	A,#03H
	JNZ  	?C0023
; 		{
			; SOURCE LINE # 196
; 			continue;
			; SOURCE LINE # 197
; 		}
			; SOURCE LINE # 198
; 		// 设置延时滴答数
; 		if((tcb_list[ti].delay_tick - 1) == 0)
			; SOURCE LINE # 200
	MOVX 	A,@DPTR
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+01H)
	MOV  	R0,A
	LCALL	?C?LLDIDATA
	MOV  	A,R7
	ADD  	A,#0FFH
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,#0FFH
	MOV  	R6,A
	MOV  	A,R5
	ADDC 	A,#0FFH
	MOV  	R5,A
	MOV  	A,R4
	ADDC 	A,#0FFH
	MOV  	R4,A
	CLR  	A
	MOV  	R3,A
	MOV  	R2,A
	MOV  	R1,A
	MOV  	R0,A
	CLR  	C
	LCALL	?C?ULCMP
	MOV  	DPTR,#ti?845
	JNZ  	?C0025
; 		{
			; SOURCE LINE # 201
; 			tcb_list[ti].delay_tick = 0;
			; SOURCE LINE # 202
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+01H)
	MOV  	R0,A
	LCALL	?C?LSTKIDATA
	DB   	00H
	DB   	00H
	DB   	00H
	DB   	00H
; 			// 将任务设置为阻塞态
; 			tcb_list[ti].os_status_type = OS_READY;
			; SOURCE LINE # 204
	MOV  	A,R3
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+05H)
	MOV  	R0,A
	MOV  	@R0,#01H
; 			continue;
			; SOURCE LINE # 205
	SJMP 	?C0023
; 		}
			; SOURCE LINE # 206
?C0025:
; 		tcb_list[ti].delay_tick--;
			; SOURCE LINE # 207
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+01H)
	MOV  	R0,A
	LCALL	?C?LLDIDATA
	MOV  	A,R7
	ADD  	A,#0FFH
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,#0FFH
	MOV  	R6,A
	MOV  	A,R5
	ADDC 	A,#0FFH
	MOV  	R5,A
	MOV  	A,R4
	ADDC 	A,#0FFH
	MOV  	R4,A
	MOV  	A,R3
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,#LOW (tcb_list+01H)
	MOV  	R0,A
	LCALL	?C?LSTIDATA
; 	}
			; SOURCE LINE # 208
?C0023:
	MOV  	DPTR,#ti?845
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	LJMP 	?C0021
; }
			; SOURCE LINE # 209
?C0026:
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF time0_handle

; 
; void Timer0_Init(void)		//1毫秒@11.0592MHz

	RSEG  ?PR?Timer0_Init?MAIN
Timer0_Init:
			; SOURCE LINE # 211
; {
			; SOURCE LINE # 212
; 	AUXR |= 0x80;			//定时器时钟1T模式
			; SOURCE LINE # 213
	ORL  	AUXR,#080H
; 	TMOD &= 0xF0;			//设置定时器模式
			; SOURCE LINE # 214
	ANL  	TMOD,#0F0H
; 	TL0 = 0xCD;				//设置定时初始值
			; SOURCE LINE # 215
	MOV  	TL0,#0CDH
; 	TH0 = 0xD4;				//设置定时初始值
			; SOURCE LINE # 216
	MOV  	TH0,#0D4H
; 	TF0 = 0;				//清除TF0标志
			; SOURCE LINE # 217
	CLR  	TF0
; 	TR0 = 1;				//定时器0开始计时
			; SOURCE LINE # 218
	SETB 	TR0
; 	ET0 = 1;				//使能定时器0中断
			; SOURCE LINE # 219
	SETB 	ET0
; }
			; SOURCE LINE # 220
	RET  	
; END OF Timer0_Init

; 
; /* 主函数 */
; void main()

	RSEG  ?PR?main?MAIN
main:
	USING	0
			; SOURCE LINE # 223
; {
			; SOURCE LINE # 224
; 	P0M0 = 0x00;   //设置P0.0~P0.7为双向口模式
			; SOURCE LINE # 225
	CLR  	A
	MOV  	P0M0,A
; 	P0M1 = 0x00;
			; SOURCE LINE # 226
	MOV  	P0M1,A
; 	Timer0_Init();
			; SOURCE LINE # 227
	LCALL	Timer0_Init
; 	EA = 1;
			; SOURCE LINE # 228
	SETB 	EA
; 	P_SW2 |= (1<<7);
			; SOURCE LINE # 229
	ORL  	P_SW2,#080H
; 
; 	os_task_create(task1, &task_stack1, 1);//将task1函数装入0号槽
			; SOURCE LINE # 231
	MOV  	DPTR,#?_os_task_create?BYTE+03H
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#HIGH (task_stack1)
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#LOW (task_stack1)
	MOVX 	@DPTR,A
	INC  	DPTR
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	INC  	A
	MOVX 	@DPTR,A
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (task1)
	MOV  	R1,#LOW (task1)
	LCALL	_os_task_create
; 	os_task_create(task2, &task_stack2, 2);//将task2函数装入1号槽
			; SOURCE LINE # 232
	MOV  	DPTR,#?_os_task_create?BYTE+03H
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#HIGH (task_stack2)
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#LOW (task_stack2)
	MOVX 	@DPTR,A
	INC  	DPTR
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#02H
	MOVX 	@DPTR,A
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (task2)
	MOV  	R1,#LOW (task2)
	LCALL	_os_task_create
; 	os_start();
			; SOURCE LINE # 233
	LCALL	os_start
?C0028:
; 
; 
; 	while(1)
			; SOURCE LINE # 236
; 	{
			; SOURCE LINE # 237
; 
; 	}
			; SOURCE LINE # 239
	SJMP 	?C0028
; END OF main

	END
